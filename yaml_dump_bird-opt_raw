S'- name: /Adaptivity\n  description: |\n    \n  parameters:\n  - name: cycles_per_step\n    required: No\n    default: !!str 1\n    cpp_type: unsigned int\n    group_name: \n    description: |\n      The number of adaptive steps to use when on each timestep during a Transient simulation.\n  - name: inactive\n    required: No\n    default: !!str \n    cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n    group_name: \n    description: |\n      If specified blocks matching these identifiers will be skipped.\n  - name: initial_marker\n    required: No\n    default: !!str \n    cpp_type: MarkerName\n    group_name: \n    description: |\n      The name of the Marker to use to adapt the mesh during initial refinement.\n  - name: initial_steps\n    required: No\n    default: !!str 0\n    cpp_type: unsigned int\n    group_name: \n    description: |\n      The number of adaptive steps to do based on the initial condition.\n  - name: marker\n    required: No\n    default: !!str \n    cpp_type: MarkerName\n    group_name: \n    description: |\n      The name of the Marker to use to actually adapt the mesh.\n  - name: max_h_level\n    required: No\n    default: !!str 0\n    cpp_type: unsigned int\n    group_name: \n    description: |\n      Maximum number of times a single element can be refined. If 0 then infinite.\n  - name: recompute_markers_during_cycles\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Recompute markers during adaptivity cycles\n  - name: start_time\n    required: No\n    default: !!str -1.79769e+308\n    cpp_type: double\n    group_name: \n    description: |\n      The time that adaptivity will be active after.\n  - name: steps\n    required: No\n    default: !!str 0\n    cpp_type: unsigned int\n    group_name: \n    description: |\n      The number of adaptive steps to use when doing a Steady simulation.\n  - name: stop_time\n    required: No\n    default: !!str 1.79769e+308\n    cpp_type: double\n    group_name: \n    description: |\n      The time after which adaptivity will no longer be active.\n  subblocks:\n  - name: /Adaptivity/Indicators\n    description: |\n      \n    parameters:\n    subblocks:\n    - name: /Adaptivity/Indicators/*\n      description: |\n        \n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The block id where this object lives.\n      - name: inactive\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          If specified blocks matching these identifiers will be skipped.\n      - name: isObjectAction\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          Indicates that this is a MooseObjectAction.\n      - name: type\n        required: Yes\n        default: !!str \n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          A string representing the Moose Object that will be built by this Action\n      subblocks:\n    - name: /Adaptivity/Indicators/AnalyticalIndicator\n      description: |\n        \n      parameters:\n      - name: block\n        required: No\n        default: !!str ANY_BLOCK_ID \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          block ID or name where the object works\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \'Advanced\'\n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: enable\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Set the enabled status of the MooseObject.\n      - name: function\n        required: Yes\n        default: !!str \n        cpp_type: FunctionName\n        group_name: \n        description: |\n          The analytic solution to compare against\n      - name: implicit\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Determines whether this object is calculated using an implicit or explicit form\n      - name: outputs\n        required: No\n        default: !!str \n        cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n        group_name: \'Advanced\'\n        description: |\n          Vector of output names were you would like to restrict the output of variables(s) associated with this object\n      - name: type\n        required: No\n        default: !!str AnalyticalIndicator\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: use_displaced_mesh\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n      - name: variable\n        required: Yes\n        default: !!str \n        cpp_type: VariableName\n        group_name: \n        description: |\n          The name of the variable that this Indicator operates on\n      subblocks:\n    - name: /Adaptivity/Indicators/GradientJumpIndicator\n      description: |\n        \n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The list of block ids (SubdomainID) that this object will be applied\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \'Advanced\'\n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: enable\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Set the enabled status of the MooseObject.\n      - name: outputs\n        required: No\n        default: !!str \n        cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n        group_name: \'Advanced\'\n        description: |\n          Vector of output names were you would like to restrict the output of variables(s) associated with this object\n      - name: scale_by_flux_faces\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          Whether or not to scale the error values by the number of flux faces.  This attempts to not penalize elements on boundaries for having less neighbors.\n      - name: type\n        required: No\n        default: !!str GradientJumpIndicator\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: use_displaced_mesh\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n      - name: variable\n        required: Yes\n        default: !!str \n        cpp_type: VariableName\n        group_name: \n        description: |\n          The name of the variable that this side indicator applies to\n      subblocks:\n    - name: /Adaptivity/Indicators/LaplacianJumpIndicator\n      description: |\n        \n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The list of block ids (SubdomainID) that this object will be applied\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \'Advanced\'\n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: enable\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Set the enabled status of the MooseObject.\n      - name: outputs\n        required: No\n        default: !!str \n        cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n        group_name: \'Advanced\'\n        description: |\n          Vector of output names were you would like to restrict the output of variables(s) associated with this object\n      - name: scale_by_flux_faces\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          Whether or not to scale the error values by the number of flux faces.  This attempts to not penalize elements on boundaries for having less neighbors.\n      - name: type\n        required: No\n        default: !!str LaplacianJumpIndicator\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: use_displaced_mesh\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n      - name: variable\n        required: Yes\n        default: !!str \n        cpp_type: VariableName\n        group_name: \n        description: |\n          The name of the variable that this side indicator applies to\n      subblocks:\n  - name: /Adaptivity/Markers\n    description: |\n      \n    parameters:\n    subblocks:\n    - name: /Adaptivity/Markers/*\n      description: |\n        \n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The block id where this object lives.\n      - name: inactive\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          If specified blocks matching these identifiers will be skipped.\n      - name: isObjectAction\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          Indicates that this is a MooseObjectAction.\n      - name: type\n        required: Yes\n        default: !!str \n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          A string representing the Moose Object that will be built by this Action\n      subblocks:\n    - name: /Adaptivity/Markers/BoxMarker\n      description: |\n        Marks the region inside and outside of a \'box\' domain for refinement or coarsening.\n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The list of block ids (SubdomainID) that this object will be applied\n      - name: bottom_left\n        required: Yes\n        default: !!str \n        cpp_type: libMesh::VectorValue<double>\n        group_name: \n        description: |\n          The bottom left point (in x,y,z with spaces in-between).\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \'Advanced\'\n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: enable\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Set the enabled status of the MooseObject.\n      - name: inside\n        required: Yes\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: DONT_MARK COARSEN DO_NOTHING REFINE\n        description: |\n          How to mark elements inside the box.\n      - name: outputs\n        required: No\n        default: !!str \n        cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n        group_name: \'Advanced\'\n        description: |\n          Vector of output names were you would like to restrict the output of variables(s) associated with this object\n      - name: outside\n        required: Yes\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: DONT_MARK COARSEN DO_NOTHING REFINE\n        description: |\n          How to mark elements outside the box.\n      - name: top_right\n        required: Yes\n        default: !!str \n        cpp_type: libMesh::VectorValue<double>\n        group_name: \n        description: |\n          The bottom left point (in x,y,z with spaces in-between).\n      - name: type\n        required: No\n        default: !!str BoxMarker\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: use_displaced_mesh\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n      subblocks:\n    - name: /Adaptivity/Markers/ComboMarker\n      description: |\n        A marker that converts many markers into a single marker by considering the maximum value of the listed markers (i.e., refinement takes precedent).\n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The list of block ids (SubdomainID) that this object will be applied\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \'Advanced\'\n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: enable\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Set the enabled status of the MooseObject.\n      - name: markers\n        required: Yes\n        default: !!str \n        cpp_type: std::vector<MarkerName, std::allocator<MarkerName> >\n        group_name: \n        description: |\n          A list of marker names to combine into a single marker.\n      - name: outputs\n        required: No\n        default: !!str \n        cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n        group_name: \'Advanced\'\n        description: |\n          Vector of output names were you would like to restrict the output of variables(s) associated with this object\n      - name: type\n        required: No\n        default: !!str ComboMarker\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: use_displaced_mesh\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n      subblocks:\n    - name: /Adaptivity/Markers/ErrorFractionMarker\n      description: |\n        Marks elements for refinement or coarsening based on the fraction of the min/max error from the supplied indicator.\n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The list of block ids (SubdomainID) that this object will be applied\n      - name: clear_extremes\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          Whether or not to clear the extremes during each error calculation.  Changing this to `false` will result in the global extremes ever encountered during the run to be used as the min and max error.\n      - name: coarsen\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          Elements within this percentage of the min error will be coarsened.  Must be between 0 and 1!\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \'Advanced\'\n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: enable\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Set the enabled status of the MooseObject.\n      - name: indicator\n        required: Yes\n        default: !!str \n        cpp_type: IndicatorName\n        group_name: \n        description: |\n          The name of the Indicator that this Marker uses.\n      - name: outputs\n        required: No\n        default: !!str \n        cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n        group_name: \'Advanced\'\n        description: |\n          Vector of output names were you would like to restrict the output of variables(s) associated with this object\n      - name: refine\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          Elements within this percentage of the max error will be refined.  Must be between 0 and 1!\n      - name: type\n        required: No\n        default: !!str ErrorFractionMarker\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: use_displaced_mesh\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n      subblocks:\n    - name: /Adaptivity/Markers/ErrorToleranceMarker\n      description: |\n        Coarsen or refine elements based on an absolute tolerance allowed from the supplied indicator.\n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The list of block ids (SubdomainID) that this object will be applied\n      - name: coarsen\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          Elements with error less than this will be coarsened.\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \'Advanced\'\n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: enable\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Set the enabled status of the MooseObject.\n      - name: indicator\n        required: Yes\n        default: !!str \n        cpp_type: IndicatorName\n        group_name: \n        description: |\n          The name of the Indicator that this Marker uses.\n      - name: outputs\n        required: No\n        default: !!str \n        cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n        group_name: \'Advanced\'\n        description: |\n          Vector of output names were you would like to restrict the output of variables(s) associated with this object\n      - name: refine\n        required: No\n        default: !!str 1.79769e+308\n        cpp_type: double\n        group_name: \n        description: |\n          Elements with error more than this will be refined.\n      - name: type\n        required: No\n        default: !!str ErrorToleranceMarker\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: use_displaced_mesh\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n      subblocks:\n    - name: /Adaptivity/Markers/OrientedBoxMarker\n      description: |\n        Marks inside and outside a box that can have arbitrary orientation and center point.\n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The list of block ids (SubdomainID) that this object will be applied\n      - name: center\n        required: Yes\n        default: !!str \n        cpp_type: libMesh::Point\n        group_name: \n        description: |\n          The center (many people spell this \'center\') of the box.\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \'Advanced\'\n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: enable\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Set the enabled status of the MooseObject.\n      - name: height\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The height of the box\n      - name: inside\n        required: Yes\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: DONT_MARK COARSEN DO_NOTHING REFINE\n        description: |\n          How to mark elements inside the box.\n      - name: length\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The length of the box\n      - name: length_direction\n        required: Yes\n        default: !!str \n        cpp_type: libMesh::VectorValue<double>\n        group_name: \n        description: |\n          The direction along which the length is oriented (must be perpendicular to width_direction).\n      - name: outputs\n        required: No\n        default: !!str \n        cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n        group_name: \'Advanced\'\n        description: |\n          Vector of output names were you would like to restrict the output of variables(s) associated with this object\n      - name: outside\n        required: Yes\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: DONT_MARK COARSEN DO_NOTHING REFINE\n        description: |\n          How to mark elements outside the box.\n      - name: type\n        required: No\n        default: !!str OrientedBoxMarker\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: use_displaced_mesh\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n      - name: width\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The width of the box\n      - name: width_direction\n        required: Yes\n        default: !!str \n        cpp_type: libMesh::VectorValue<double>\n        group_name: \n        description: |\n          The direction along which the width is oriented.\n      subblocks:\n    - name: /Adaptivity/Markers/UniformMarker\n      description: |\n        Uniformly mark all elements for refinement or coarsening.\n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The list of block ids (SubdomainID) that this object will be applied\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \'Advanced\'\n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: enable\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Set the enabled status of the MooseObject.\n      - name: mark\n        required: Yes\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: DONT_MARK COARSEN DO_NOTHING REFINE\n        description: |\n          How to mark elements.\n      - name: outputs\n        required: No\n        default: !!str \n        cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n        group_name: \'Advanced\'\n        description: |\n          Vector of output names were you would like to restrict the output of variables(s) associated with this object\n      - name: type\n        required: No\n        default: !!str UniformMarker\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: use_displaced_mesh\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n      subblocks:\n    - name: /Adaptivity/Markers/ValueRangeMarker\n      description: |\n        Mark elements for adaptivity based on the supplied upper and lower bounds and the specified variable.\n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The list of block ids (SubdomainID) that this object will be applied\n      - name: buffer_size\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          A buffer zone value added to both ends of the range where a third_state marker can be returned.\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \'Advanced\'\n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: enable\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Set the enabled status of the MooseObject.\n      - name: invert\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          If this is true then values inside the range will be coarsened, and values outside the range will be refined.\n      - name: lower_bound\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The lower bound value for the range.\n      - name: outputs\n        required: No\n        default: !!str \n        cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n        group_name: \'Advanced\'\n        description: |\n          Vector of output names were you would like to restrict the output of variables(s) associated with this object\n      - name: third_state\n        required: No\n        default: !!str DONT_MARK\n        cpp_type: MooseEnum\n        group_name: \n        options: DONT_MARK COARSEN DO_NOTHING REFINE\n        description: |\n          The Marker state to apply to values in the buffer zone (both ends of the range).\n      - name: type\n        required: No\n        default: !!str ValueRangeMarker\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: upper_bound\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The upper bound value for the range.\n      - name: use_displaced_mesh\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n      - name: variable\n        required: Yes\n        default: !!str \n        cpp_type: std::vector<VariableName>\n        group_name: \n        description: |\n          The variable whose values are used in this marker.\n      subblocks:\n    - name: /Adaptivity/Markers/ValueThresholdMarker\n      description: |\n        The the refinement state based on a threshold value compared to the specified variable.\n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The list of block ids (SubdomainID) that this object will be applied\n      - name: coarsen\n        required: No\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The threshold value for coarsening.  Elements with variable values beyond this will be marked for coarsening.\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \'Advanced\'\n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: enable\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Set the enabled status of the MooseObject.\n      - name: invert\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          If this is true then values _below_ \'refine\' will be refined and _above_ \'coarsen\' will be coarsened.\n      - name: outputs\n        required: No\n        default: !!str \n        cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n        group_name: \'Advanced\'\n        description: |\n          Vector of output names were you would like to restrict the output of variables(s) associated with this object\n      - name: refine\n        required: No\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The threshold value for refinement.  Elements with variable values beyond this will be marked for refinement.\n      - name: third_state\n        required: No\n        default: !!str DONT_MARK\n        cpp_type: MooseEnum\n        group_name: \n        options: DONT_MARK COARSEN DO_NOTHING REFINE\n        description: |\n          The Marker state to apply to values falling in-between the coarsen and refine thresholds.\n      - name: type\n        required: No\n        default: !!str ValueThresholdMarker\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: use_displaced_mesh\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n      - name: variable\n        required: Yes\n        default: !!str \n        cpp_type: std::vector<VariableName>\n        group_name: \n        description: |\n          The values of this variable will be compared to \'refine\' and \'coarsen\' to see what should be done with the element\n      subblocks:\n- name: /AuxKernels\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /AuxKernels/*\n    description: |\n      \n    parameters:\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: isObjectAction\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates that this is a MooseObjectAction.\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /AuxKernels/AccumulateAux\n    description: |\n      \n    parameters:\n    - name: accumulate_from_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variable whose values are to be accumulated into the current variable\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str AccumulateAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/BndsCalcAux\n    description: |\n      Calculate location of grain boundaries in a polycrystalline sample\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Array of coupled variables (num_name)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str BndsCalcAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variables\n    - name: var_name_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Array of coupled variables (base_name)\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/BoundsAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bounded_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable to be bounded\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: lower\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The lower bound for the variable\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str BoundsAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: upper\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The upper bound for the variable\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/ConstantAux\n    description: |\n      Creates a constant field in the domain.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ConstantAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Some constant value that can be read from the input file\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/CrossTermGradientFreeEnergy\n    description: |\n      Free energy contribution from the cross terms in ACMultiInetrface\n    parameters:\n    - name: additional_free_energy\n      required: No\n      default: !!str 0\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled variable holding additional free energy contributions to be summed up\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: interfacial_vars\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variable names that contribute to interfacial energy\n    - name: kappa_names\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Matrix of kappa names with rows and columns corresponding to each variable name in interfacial_vars in the same order (should be symmetric).\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CrossTermGradientFreeEnergy\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/CrystalPlasticityRotationOutAux\n    description: |\n      Output updated rotation tensor to a file: Use for stereographic plots\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: output_frequency\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Frequency of Output\n    - name: rotout_file_name\n      required: No\n      default: !!str rot.out\n      cpp_type: FileName\n      group_name: \n      description: |\n        Name of rotation output file: Default rot.out\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CrystalPlasticityRotationOutAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/CylindricalRankTwoAux\n    description: |\n      Takes RankTwoTensor material and outputs component in cylindrical coordinates\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: center_point\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        Location of the center point of the cylindrical coordinates\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: index_i\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index i of ij for the tensor to output (0, 1, 2)\n    - name: index_j\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index j of ij for the tensor to output (0, 1, 2)\n    - name: rank_two_tensor\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The rank two material tensor name\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CylindricalRankTwoAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/DebugResidualAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: debug_variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The variable that is being debugged.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str DebugResidualAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/DomainIntegralQFunction\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: crack_front_definition\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The CrackFrontDefinition user object name\n    - name: crack_front_point_index\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index of the point on the crack front corresponding to this q function\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: j_integral_radius_inner\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Radius for J-Integral calculation\n    - name: j_integral_radius_outer\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Radius for J-Integral calculation\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str DomainIntegralQFunction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/DomainIntegralTopologicalQFunction\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: crack_front_definition\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The CrackFrontDefinition user object name\n    - name: crack_front_point_index\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index of the point on the crack front corresponding to this q function\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: ring_index\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The ring of elements that defines the integration domain\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str DomainIntegralTopologicalQFunction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/EBSDReaderAvgDataAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: data_name\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: phi1 phi phi2 phase symmetry local_id feature_id\n      description: |\n        The averaged data to be extracted from the EBSD data by this AuxKernel\n    - name: ebsd_reader\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The EBSDReader GeneralUserObject\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: grain_tracker\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The GrainTracker UserObject\n    - name: invalid\n      required: No\n      default: !!str -1\n      cpp_type: double\n      group_name: \n      description: |\n        Value to return for points without active grains.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str EBSDReaderAvgDataAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/EBSDReaderPointDataAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: data_name\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: phi1 phi phi2 feature_id phase symmetry\n      description: |\n        The data to be extracted from the EBSD data by this AuxKernel\n    - name: ebsd_reader\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The EBSDReader GeneralUserObject\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str EBSDReaderPointDataAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/ElasticEnergyAux\n    description: |\n      Compute the local elastic energy\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Mechanical property base name\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElasticEnergyAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/ElementH1ErrorFunctionAux\n    description: |\n      Computes the H1 or W^{1,p} error between an exact function and a coupled variable.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: coupled_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable to compute the norm of.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Function representing the exact solution\n    - name: p\n      required: No\n      default: !!str 2\n      cpp_type: double\n      group_name: \n      description: |\n        The exponent used in the norm.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementH1ErrorFunctionAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/ElementL2ErrorFunctionAux\n    description: |\n      A class for computing the element-wise L^2 (Euclidean) error between a function and a coupled variable.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: coupled_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable to compute the norm of.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Function representing the exact solution\n    - name: p\n      required: No\n      default: !!str 2\n      cpp_type: double\n      group_name: \n      description: |\n        The exponent used in the norm.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementL2ErrorFunctionAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/ElementLengthAux\n    description: |\n      Compute the element size using Elem::hmin() or Elem::hmax() from libMesh.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: method\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: min max\n      description: |\n        The size calculation to perform (\'min\' or \'max\').\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementLengthAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/ElementLpNormAux\n    description: |\n      Compute an elemental field variable (single value per element) equal to the Lp-norm of a coupled Variable.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: coupled_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable to compute the norm of.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: p\n      required: No\n      default: !!str 2\n      cpp_type: double\n      group_name: \n      description: |\n        The exponent used in the norm.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementLpNormAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/EulerAngleProvider2RGBAux\n    description: |\n      Output RGB representation of crystal orientation from user object to an AuxVariable. The entire domain must have the same crystal structure.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: crystal_structure\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: triclinic monoclinic orthorhombic trigonal tetragonal cubic hexagonal\n      description: |\n        Crystal structure of the material\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: euler_angle_provider\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Name of Euler angle provider user object\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: grain_tracker\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The GrainTracker UserObject to get values from.\n    - name: no_grain_color\n      required: No\n      default: !!str 0 0 0\n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        RGB value of color used to represent area with no grains, defaults to black\n    - name: output_type\n      required: No\n      default: !!str scalar\n      cpp_type: MooseEnum\n      group_name: \n      options: red green blue scalar\n      description: |\n        Type of value that will be outputted\n    - name: sd\n      required: No\n      default: !!str 001\n      cpp_type: MooseEnum\n      group_name: \n      options: 100 010 001\n      description: |\n        Reference sample direction\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str EulerAngleProvider2RGBAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/EulerAngleVariables2RGBAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: output_type\n      required: No\n      default: !!str scalar\n      cpp_type: MooseEnum\n      group_name: \n      options: red green blue scalar\n      description: |\n        Type of value that will be outputted\n    - name: phase\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Grain phase index\n    - name: phi\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Euler angle 2\n    - name: phi1\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Euler angle 1\n    - name: phi2\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Euler angle 3\n    - name: sd\n      required: No\n      default: !!str 001\n      cpp_type: MooseEnum\n      group_name: \n      options: 100 010 001\n      description: |\n        Reference sample direction\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: symmetry\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Grain symmetry indentifier\n    - name: type\n      required: No\n      default: !!str EulerAngleVariables2RGBAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/FeatureFloodCountAux\n    description: |\n      Feature detection by connectivity analysis\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bubble_object\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The FeatureFloodCount UserObject to get values from.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str initial timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: field_display\n      required: No\n      default: !!str UNIQUE_REGION\n      cpp_type: MooseEnum\n      group_name: \n      options: UNIQUE_REGION VARIABLE_COLORING GHOSTED_ENTITIES HALOS CENTROID ACTIVE_BOUNDS\n      description: |\n        Determines how the auxilary field should be colored. (UNIQUE_REGION and VARIABLE_COLORING are nodal, CENTROID is elemental, default: UNIQUE_REGION)\n    - name: flood_counter\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The FeatureFloodCount UserObject to get values from.\n    - name: map_index\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index of which map to retrieve values from when using FeatureFloodCount with multiple maps.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str FeatureFloodCountAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/FunctionAux\n    description: |\n      Auxiliary Kernel that creates and updates a field variable by sampling a function through space and time.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The function to use as the value\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str FunctionAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/GapValueAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: normal_smoothing_distance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Distance from edge in parametric coordinates over which to smooth contact normal\n    - name: normal_smoothing_method\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Method to use to smooth normals (edge_based|nodal_normal_based)\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: FIRST SECOND THIRD FOURTH\n      description: |\n        The finite element order\n    - name: paired_boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary on the other side of a gap.\n    - name: paired_variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to get the value of.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: tangential_tolerance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Tangential distance to extend edges of contact surfaces\n    - name: type\n      required: No\n      default: !!str GapValueAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: warnings\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to output warning messages concerning nodes not being found\n    subblocks:\n  - name: /AuxKernels/GrainAdvectionAux\n    description: |\n      Calculates the advection velocity of grain due to rigid body translation and rotation\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z\n      description: |\n        The gradient component to compute\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: grain_force\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        userobject for getting force and torque acting on grains\n    - name: grain_tracker_object\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        userobject for getting volume and center of mass of grains\n    - name: grain_volumes\n      required: No\n      default: !!str \n      cpp_type: VectorPostprocessorName\n      group_name: \n      description: |\n        The feature volume VectorPostprocessorValue.\n    - name: rotation_constant\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        constant value characterizing grain rotation\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: translation_constant\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        constant value characterizing grain translation\n    - name: type\n      required: No\n      default: !!str GrainAdvectionAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/KKSGlobalFreeEnergy\n    description: |\n      Total free energy in KKS system, including chemical, barrier and gradient terms\n    parameters:\n    - name: additional_free_energy\n      required: No\n      default: !!str 0\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled variable holding additional free energy contributions to be summed up\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: fa_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function F (f_name in the corresponding derivative function material)\n    - name: fb_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function F (f_name in the corresponding derivative function material)\n    - name: g_name\n      required: No\n      default: !!str g\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name for the double well function g(eta)\n    - name: h_name\n      required: No\n      default: !!str h\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name for the switching function h(eta)\n    - name: interfacial_vars\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variable names that contribute to interfacial energy\n    - name: kappa_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Vector of kappa names corresponding to each variable name in interfacial_vars in the same order. For basic KKS, there is 1 kappa, 1 interfacial_var.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str KKSGlobalFreeEnergy\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: w\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Double well height parameter\n    subblocks:\n  - name: /AuxKernels/KKSMultiFreeEnergy\n    description: |\n      Total free energy in multi-phase KKS system, including chemical, barrier and gradient terms\n    parameters:\n    - name: Fj_names\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        List of free energies for each phase. Place in same order as hj_names and gj_names!\n    - name: additional_free_energy\n      required: No\n      default: !!str 0\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled variable holding additional free energy contributions to be summed up\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: gj_names\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Barrier Function Materials that provide g. Place in same order as Fj_names and hj_names!\n    - name: hj_names\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Switching Function Materials that provide h. Place in same order as Fj_names and gj_names!\n    - name: interfacial_vars\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variable names that contribute to interfacial energy\n    - name: kappa_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Vector of kappa names corresponding to each variable name in interfacial_vars in the same order.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str KKSMultiFreeEnergy\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: w\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Double well height parameter\n    subblocks:\n  - name: /AuxKernels/MatVecRealGradAuxKernel\n    description: |\n      \n    parameters:\n    - name: dim\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        the dimensions of the mesh\n    - name: divergence_property\n      required: No\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Scalar material property name for divergence variable\n    - name: divergence_variable\n      required: No\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        Name of divergence variable to generate kernels for\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: op_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Value that specifies the number of grains to create\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        the scalar material property names\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to use displaced mesh in the kernels\n    - name: var_name_base\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector specifies the base name of the variables\n    subblocks:\n  - name: /AuxKernels/MaterialRealAux\n    description: |\n      Outputs element volume-averaged material properties\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The factor by which to multiply your material property for visualization\n    - name: offset\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The offset to add to your material property for visualization\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The scalar material property name\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialRealAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/MaterialRealDenseMatrixAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: column\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The column component to consider for this kernel\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The factor by which to multiply your material property for visualization\n    - name: offset\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The offset to add to your material property for visualization\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The scalar material property name\n    - name: row\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The row component to consider for this kernel\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialRealDenseMatrixAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/MaterialRealTensorValueAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: column\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The column component to consider for this kernel\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The factor by which to multiply your material property for visualization\n    - name: offset\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The offset to add to your material property for visualization\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The scalar material property name\n    - name: row\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The row component to consider for this kernel\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialRealTensorValueAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/MaterialRealVectorValueAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The vector component to consider for this kernel\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The factor by which to multiply your material property for visualization\n    - name: offset\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The offset to add to your material property for visualization\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The scalar material property name\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialRealVectorValueAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/MaterialStdVectorAux\n    description: |\n      Extracts a component of a material type std::vector<Real> to an aux variable.  If the std::vector is not of sufficient size then zero is returned\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The factor by which to multiply your material property for visualization\n    - name: index\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index to consider for this kernel\n    - name: offset\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The offset to add to your material property for visualization\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The scalar material property name\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: selected_qp\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        Evaluate the std::vector<Real> at this quadpoint.  This only needs to be used if you are interested in a particular quadpoint in each element: otherwise do not include this parameter in your input file\n    - name: type\n      required: No\n      default: !!str MaterialStdVectorAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/MaterialStdVectorRealGradientAux\n    description: |\n      Extracts a component of a material\'s std::vector<RealGradient> to an aux variable.  If the std::vector is not of sufficient size then zero is returned\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The gradient component to be extracted for this kernel\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The factor by which to multiply your material property for visualization\n    - name: index\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index to consider for this kernel\n    - name: offset\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The offset to add to your material property for visualization\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The scalar material property name\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialStdVectorRealGradientAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/MaterialVectorAuxKernel\n    description: |\n      \n    parameters:\n    - name: grain_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Value that specifies the number of grains to create aux kernels for.\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        The material property names.\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to use displaced mesh in the kernels.\n    - name: variable_base\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector specifies the base name of the variables.\n    subblocks:\n  - name: /AuxKernels/MaterialVectorGradAuxKernel\n    description: |\n      \n    parameters:\n    - name: grain_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Value that specifies the number of grains to create aux kernels for.\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        The material property names.\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to use displaced mesh in the kernels.\n    - name: variable_base\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector specifies the base name of the variables.\n    subblocks:\n  - name: /AuxKernels/NearestNodeDistanceAux\n    description: |\n      Stores the distance between a block and boundary or between two boundaries.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: paired_boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary to find the distance to.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NearestNodeDistanceAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/NearestNodeValueAux\n    description: |\n      Retrieves a field value from the closest node on the paired boundary and stores it on this boundary or block.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: paired_boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary to get the value from.\n    - name: paired_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable to get the value of.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NearestNodeValueAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/NewmarkAccelAux\n    description: |\n      \n    parameters:\n    - name: beta\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        beta parameter\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: displacement\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        displacement variable\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NewmarkAccelAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: velocity\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        velocity variable\n    subblocks:\n  - name: /AuxKernels/NewmarkVelAux\n    description: |\n      \n    parameters:\n    - name: acceleration\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        acceleration variable\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        gamma parameter\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NewmarkVelAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/NormalizationAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: normal_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The normalization factor\n    - name: normalization\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The postprocessor on the source\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: source_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable to be normalized\n    - name: type\n      required: No\n      default: !!str NormalizationAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/OutputEulerAngles\n    description: |\n      Output euler angles from user object to an AuxVariable.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: euler_angle_provider\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Name of Euler angle provider user object\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: grain_tracker\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The GrainTracker UserObject to get values from.\n    - name: output_euler_angle\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: phi1 Phi phi2\n      description: |\n        Euler angle to output\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str OutputEulerAngles\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/PFCEnergyDensity\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PFCEnergyDensity\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variables\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/PFCRFFEnergyDensity\n    description: |\n      \n    parameters:\n    - name: a\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Modified Coefficent in Taylor Series Expanstion\n    - name: b\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Modified Coefficent in Taylor Series Expanstion\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Modified Coefficent in Taylor Series Expanstion\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: log_approach\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: tolerance cancelation expansion nothing\n      description: |\n        Which approach will be used to handle the natural log\n    - name: num_exp_terms\n      required: No\n      default: !!str 4\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        This is the number of terms to use in the taylor series expansion\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: tol\n      required: No\n      default: !!str 1e-09\n      cpp_type: double\n      group_name: \n      description: |\n        Tolerance used when the tolerance approach is chosen\n    - name: type\n      required: No\n      default: !!str PFCRFFEnergyDensity\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variables\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/ParsedAux\n    description: |\n      Parsed function AuxKernel.\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        coupled variables\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: constant_expressions\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector of values for the constants in constant_names (can be an FParser expression)\n    - name: constant_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector of constants used in the parsed function (use this for kB etc.)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: disable_fpoptimizer\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Disable the function parser algebraic optimizer\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: enable_ad_cache\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable cacheing of function derivatives for faster startup time\n    - name: enable_auto_optimize\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable automatic immediate optimization of derivatives\n    - name: enable_jit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable just-in-time compilation of function expressions for faster evaluation\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: fail_on_evalerror\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionExpression\n      group_name: \n      description: |\n        function expression\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ParsedAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/PenetrationAux\n    description: |\n      Auxililary Kernel for computing several geometry related quantities between two contacting bodies.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: normal_smoothing_distance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Distance from edge in parametric coordinates over which to smooth contact normal\n    - name: normal_smoothing_method\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Method to use to smooth normals (edge_based|nodal_normal_based)\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: FIRST SECOND THIRD FOURTH\n      description: |\n        The finite element order\n    - name: paired_boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary to be penetrated\n    - name: quantity\n      required: No\n      default: !!str distance\n      cpp_type: MooseEnum\n      group_name: \n      options: distance tangential_distance normal_x normal_y normal_z closest_point_x closest_point_y closest_point_z element_id side incremental_slip_magnitude incremental_slip_x incremental_slip_y incremental_slip_z accumulated_slip force_x force_y force_z normal_force_magnitude normal_force_x normal_force_y normal_force_z tangential_force_magnitude tangential_force_x tangential_force_y tangential_force_z frictional_energy lagrange_multiplier mechanical_status\n      description: |\n        The quantity to recover from the available penetration information\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: tangential_tolerance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Tangential distance to extend edges of contact surfaces\n    - name: type\n      required: No\n      default: !!str PenetrationAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/ProcessorIDAux\n    description: |\n      Creates a field showing the processors and partitioning.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ProcessorIDAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/QuotientAux\n    description: |\n      Divides two coupled variables.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: denominator\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The downstairs of the quotient variable\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: numerator\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The upstairs of the quotient variable\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str QuotientAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/RadialDisplacementCylinderAux\n    description: |\n      Compute the radial component of the displacement vector for cylindrical models.\n    parameters:\n    - name: axis_vector\n      required: No\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Vector defining direction of cylindrical axis (3D Cartesian models)\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: origin\n      required: No\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Origin of cylinder axis of rotation for 2D and 3D Cartesian models\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str RadialDisplacementCylinderAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/RadialDisplacementSphereAux\n    description: |\n      Compute the radial component of the displacement vector for spherical models.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: origin\n      required: No\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Sphere origin for 3D Cartesian and 2D axisymmetric models\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str RadialDisplacementSphereAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/RankFourAux\n    description: |\n      Access a component of a RankFourTensor\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: index_i\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index i of ijkl for the tensor to output (0, 1, 2)\n    - name: index_j\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index j of ijkl for the tensor to output (0, 1, 2)\n    - name: index_k\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index k of ijkl for the tensor to output (0, 1, 2)\n    - name: index_l\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index l of ijkl for the tensor to output (0, 1, 2)\n    - name: rank_four_tensor\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The rank four material tensor name\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str RankFourAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/RankTwoAux\n    description: |\n      Access a component of a RankTwoTensor\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: index_i\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index i of ij for the tensor to output (0, 1, 2)\n    - name: index_j\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index j of ij for the tensor to output (0, 1, 2)\n    - name: rank_two_tensor\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The rank two material tensor name\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: selected_qp\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        Evaluate the tensor at this specific quadpoint\n    - name: type\n      required: No\n      default: !!str RankTwoAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/RankTwoScalarAux\n    description: |\n      Compute a scalar property of a RankTwoTensor\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: No\n      default: !!str 0 0 1\n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        Direction vector\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: point1\n      required: No\n      default: !!str 0 0 0\n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        Start point for axis used to calculate some cylinderical material tensor quantities\n    - name: point2\n      required: No\n      default: !!str 0 1 0\n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        End point for axis used to calculate some material tensor quantities\n    - name: rank_two_tensor\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The rank two material tensor name\n    - name: scalar_type\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: VonMisesStress EffectiveStrain Hydrostatic L2norm MaxPrincipal MidPrincipal MinPrincipal VolumetricStrain FirstInvariant SecondInvariant ThirdInvariant AxialStress HoopStress RadialStress TriaxialityStress Direction\n      description: |\n        Type of scalar output\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: selected_qp\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        Evaluate the tensor at this quadpoint.  This option only needs to be used if you are interested in a particular quadpoint in each element: otherwise do not include this parameter in your input file\n    - name: type\n      required: No\n      default: !!str RankTwoScalarAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/SelfAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SelfAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/SolutionAux\n    description: |\n      Creates fields by using information from a SolutionUserObject.\n    parameters:\n    - name: add_factor\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Add this value (b) to the solution (x): ax+b, where a is the \'scale_factor\'\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direct\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true the meshes must be the same and then the values are simply copied over.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: from_variable\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The name of the variable to extract from the file\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Scale factor (a)  to be applied to the solution (x): ax+b, where b is the \'add_factor\'\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: solution\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The name of the SolutionUserObject\n    - name: type\n      required: No\n      default: !!str SolutionAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/SpatialUserObjectAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SpatialUserObjectAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: user_object\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The UserObject UserObject to get values from.  Note that the UserObject _must_ implement the spatialValue() virtual function!\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/TotalFreeEnergy\n    description: |\n      Total free energy (both the bulk and gradient parts), where the bulk free energy has been defined in a material\n    parameters:\n    - name: additional_free_energy\n      required: No\n      default: !!str 0\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled variable holding additional free energy contributions to be summed up\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: f_name\n      required: No\n      default: !!str F\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n         Base name of the free energy function\n    - name: interfacial_vars\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variable names that contribute to interfacial energy\n    - name: kappa_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Vector of kappa names corresponding to each variable name in interfacial_vars in the same order.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str TotalFreeEnergy\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/VariableGradientComponent\n    description: |\n      Creates a field with consisting of one component of a coupled variable.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z\n      description: |\n        The gradient component to compute\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: gradient_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable from which to compute the gradient component\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str VariableGradientComponent\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/VariableTimeIntegrationAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: coefficient\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        A simple coefficient\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: order\n      required: No\n      default: !!str 2\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The order of global truncation error: midpoint=1, trapazoidal=2, Simpson=3\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str VariableTimeIntegrationAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: variable_to_integrate\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable to be integrated\n    subblocks:\n  - name: /AuxKernels/VectorMagnitudeAux\n    description: |\n      Creates a field representing the magnitude of three coupled variables using an Euclidean norm.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str VectorMagnitudeAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-component of the vector\n    - name: y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-component of the vector\n    - name: z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-component of the vector\n    subblocks:\n- name: /AuxScalarKernels\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /AuxScalarKernels/*\n    description: |\n      \n    parameters:\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: isObjectAction\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates that this is a MooseObjectAction.\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /AuxScalarKernels/ConstantScalarAux\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: type\n      required: No\n      default: !!str ConstantScalarAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The value to be set to the scalar variable.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this kernel operates on\n    subblocks:\n  - name: /AuxScalarKernels/FunctionScalarAux\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        The functions to set the scalar variable components.\n    - name: type\n      required: No\n      default: !!str FunctionScalarAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this kernel operates on\n    subblocks:\n  - name: /AuxScalarKernels/QuotientScalarAux\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: denominator\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The downstairs of the quotient variable\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: numerator\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The upstairs of the quotient variable\n    - name: type\n      required: No\n      default: !!str QuotientScalarAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this kernel operates on\n    subblocks:\n- name: /AuxVariables\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /AuxVariables/*\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The block id where this variable lives\n    - name: family\n      required: No\n      default: !!str LAGRANGE\n      cpp_type: MooseEnum\n      group_name: \n      options: LAGRANGE MONOMIAL SCALAR\n      description: |\n        Specifies the family of FE shape functions to use for this variable\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: initial_condition\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Specifies the initial condition for this variable\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH\n      description: |\n        Specifies the order of the FE shape function to use for this variable (additional orders not listed are allowed)\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: initial_from_file_timestep\n      required: No\n      default: !!str LATEST\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \'Initial From File\'\n      description: |\n        Gives the timestep (or "LATEST") for which to read a solution from a file for a given variable. (Default: LATEST)\n    - name: initial_from_file_var\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \'Initial From File\'\n      description: |\n        Gives the name of a variable for which to read an initial condition from a mesh file\n    subblocks:\n    - name: /AuxVariables/*/InitialCondition\n      description: |\n        \n      parameters:\n      - name: inactive\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          If specified blocks matching these identifiers will be skipped.\n      - name: isObjectAction\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          Indicates that this is a MooseObjectAction.\n      - name: type\n        required: Yes\n        default: !!str \n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          A string representing the Moose Object that will be built by this Action\n      subblocks:\n      - name: /AuxVariables/*/InitialCondition/<type>\n        description: |\n          \n        parameters:\n        subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/BimodalInverseSuperellipsoidsIC\n          description: |\n            Bimodal size distribution of large particles (specified in input file, value invalue) and small particles (placed randomly inside the larger particles, value outvalue)\n          parameters:\n          - name: as\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Semiaxis a for each superellipsoid\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: bs\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Semiaxis b for each superellipsoid\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: cs\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Semiaxis c for each superellipsoid\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the superellipsoid\n          - name: large_spac\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              minimum spacing between large and small particles, measured from closest edge to closest edge\n          - name: nestedvalue\n            required: No\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value for nested particles inside the superellipsoid in inverse configuration\n          - name: npart\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The number of random (small) particles to place\n          - name: ns\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Exponent n for each superellipsoid\n          - name: numtries\n            required: No\n            default: !!str 1000\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The number of tries to place the random particles\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the superellipsoid\n          - name: rand_seed\n            required: No\n            default: !!str 12345\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: size_variation\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Plus or minus fraction of random variation in the semiaxes for uniform, standard deviation for normal\n          - name: size_variation_type\n            required: No\n            default: !!str none\n            cpp_type: MooseEnum\n            group_name: \n            options: uniform normal none\n            description: |\n              Type of distribution that random semiaxes will follow\n          - name: small_a\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Mean semiaxis a value for the randomly placed (small) superellipsoids\n          - name: small_b\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Mean semiaxis b value for the randomly placed (small) superellipsoids\n          - name: small_c\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Mean semiaxis c value for the randomly placed (small) superellipsoids\n          - name: small_n\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Exponent n for the randomly placed (small) superellipsoids\n          - name: small_spac\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              minimum spacing between small particles, measured from closest edge to closest edge\n          - name: type\n            required: No\n            default: !!str BimodalInverseSuperellipsoidsIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x_positions\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The x-coordinate for each superellipsoid center\n          - name: y_positions\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The y-coordinate for each superellipsoid center\n          - name: z_positions\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The z-coordinate for each superellipsoid center\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/BimodalSuperellipsoidsIC\n          description: |\n            Bimodal size distribution of large particles (specified in input file) and small particles (placed randomly outside the larger particles)\n          parameters:\n          - name: as\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Semiaxis a for each superellipsoid\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: bs\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Semiaxis b for each superellipsoid\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: cs\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Semiaxis c for each superellipsoid\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the superellipsoid\n          - name: large_spac\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              minimum spacing between large and small particles, measured from closest edge to closest edge\n          - name: nestedvalue\n            required: No\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value for nested particles inside the superellipsoid in inverse configuration\n          - name: npart\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The number of random (small) particles to place\n          - name: ns\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Exponent n for each superellipsoid\n          - name: numtries\n            required: No\n            default: !!str 1000\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The number of tries to place the random particles\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the superellipsoid\n          - name: rand_seed\n            required: No\n            default: !!str 12345\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: size_variation\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Plus or minus fraction of random variation in the semiaxes for uniform, standard deviation for normal\n          - name: size_variation_type\n            required: No\n            default: !!str none\n            cpp_type: MooseEnum\n            group_name: \n            options: uniform normal none\n            description: |\n              Type of distribution that random semiaxes will follow\n          - name: small_a\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Mean semiaxis a value for the randomly placed (small) superellipsoids\n          - name: small_b\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Mean semiaxis b value for the randomly placed (small) superellipsoids\n          - name: small_c\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Mean semiaxis c value for the randomly placed (small) superellipsoids\n          - name: small_n\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Exponent n for the randomly placed (small) superellipsoids\n          - name: small_spac\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              minimum spacing between small particles, measured from closest edge to closest edge\n          - name: type\n            required: No\n            default: !!str BimodalSuperellipsoidsIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x_positions\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The x-coordinate for each superellipsoid center\n          - name: y_positions\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The y-coordinate for each superellipsoid center\n          - name: z_positions\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The z-coordinate for each superellipsoid center\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/BoundingBoxIC\n          description: |\n            \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: inside\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The value of the variable inside the box\n          - name: outside\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The value of the variable outside the box\n          - name: type\n            required: No\n            default: !!str BoundingBoxIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the lower left-hand corner of the box\n          - name: x2\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the upper right-hand corner of the box\n          - name: y1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the lower left-hand corner of the box\n          - name: y2\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the upper right-hand corner of the box\n          - name: z1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the lower left-hand corner of the box\n          - name: z2\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the upper right-hand corner of the box\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/ClosePackIC\n          description: |\n            Close packed arrangement of smooth circles\n          parameters:\n          - name: 3D_spheres\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              in 3D, whether the objects are spheres or columns\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: radius\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The radius of a circle\n          - name: rand_seed\n            required: No\n            default: !!str 12345\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str ClosePackIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/ConstantIC\n          description: |\n            \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: type\n            required: No\n            default: !!str ConstantIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: value\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The value to be set in IC\n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/CrossIC\n          description: |\n            Cross-shaped initial condition\n          parameters:\n          - name: amplitude\n            required: No\n            default: !!str 1\n            cpp_type: double\n            group_name: \n            description: |\n              The amplitude\n          - name: average\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The average value\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: buffer\n            required: No\n            default: !!str 0.03125\n            cpp_type: double\n            group_name: \n            description: |\n              A small area between the max value and the interface\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: interface\n            required: No\n            default: !!str 0.03125\n            cpp_type: double\n            group_name: \n            description: |\n              The interface width\n          - name: length\n            required: No\n            default: !!str 0.75\n            cpp_type: double\n            group_name: \n            description: |\n              The length\n          - name: type\n            required: No\n            default: !!str CrossIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: width\n            required: No\n            default: !!str 0.125\n            cpp_type: double\n            group_name: \n            description: |\n              The width\n          - name: x1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the lower left-hand corner of the box\n          - name: x2\n            required: No\n            default: !!str 1\n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the upper right-hand corner of the box\n          - name: y1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the lower left-hand corner of the box\n          - name: y2\n            required: No\n            default: !!str 1\n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the upper right-hand corner of the box\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/FunctionIC\n          description: |\n            \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: function\n            required: Yes\n            default: !!str \n            cpp_type: FunctionName\n            group_name: \n            description: |\n              The initial condition function.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: type\n            required: No\n            default: !!str FunctionIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/FunctionScalarIC\n          description: |\n            \n          parameters:\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: function\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n            group_name: \n            description: |\n              The initial condition function.\n          - name: type\n            required: No\n            default: !!str FunctionScalarIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: No\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/LatticeSmoothCircleIC\n          description: |\n            Perturbed square lattice of smooth circles\n          parameters:\n          - name: 3D_spheres\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              in 3D, whether the objects are spheres or columns\n          - name: Rnd_variation\n            required: No\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Variation from central lattice position\n          - name: avoid_bounds\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              Don\'t place any bubbles on the simulation cell boundaries\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: circles_per_side\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n            group_name: \n            description: |\n              Vector containing the number of bubbles along each side\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: pos_variation\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Variation from central lattice position\n          - name: radius\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Mean radius value for the circels\n          - name: radius_variation\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Plus or minus fraction of random variation in the bubble radius\n          - name: radius_variation_type\n            required: No\n            default: !!str none\n            cpp_type: MooseEnum\n            group_name: \n            options: uniform normal none\n            description: |\n              Type of distribution that random circle radii will follow\n          - name: rand_seed\n            required: No\n            default: !!str 2000\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              random seed\n          - name: type\n            required: No\n            default: !!str LatticeSmoothCircleIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/MultiBoundingBoxIC\n          description: |\n            Specify variable values inside and outside a list of box shaped axis-aligned regions defined by pairs of opposing corners\n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: corners\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<libMesh::Point, std::allocator<libMesh::Point> >\n            group_name: \n            description: |\n              The corner coordinates boxes\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: inside\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The value of the variable inside each box (one value per box or a single value for all boxes)\n          - name: opposite_corners\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<libMesh::Point, std::allocator<libMesh::Point> >\n            group_name: \n            description: |\n              The coordinates of the opposite corners of the boxes\n          - name: outside\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The value of the variable outside the box\n          - name: type\n            required: No\n            default: !!str MultiBoundingBoxIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/MultiSmoothCircleIC\n          description: |\n            Random distribution of smooth circles with given minimum spacing\n          parameters:\n          - name: 3D_spheres\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              in 3D, whether the objects are spheres or columns\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: bubspac\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              minimum spacing of bubbles, measured from center to center\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: numbub\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The number of bubbles to place\n          - name: numtries\n            required: No\n            default: !!str 1000\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The number of tries\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: radius\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Mean radius value for the circles\n          - name: radius_variation\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Plus or minus fraction of random variation in the bubble radius for uniform, standard deviation for normal\n          - name: radius_variation_type\n            required: No\n            default: !!str none\n            cpp_type: MooseEnum\n            group_name: \n            options: uniform normal none\n            description: |\n              Type of distribution that random circle radii will follow\n          - name: rand_seed\n            required: No\n            default: !!str 12345\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str MultiSmoothCircleIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/MultiSmoothSuperellipsoidIC\n          description: |\n            Random distribution of smooth ellipse with given minimum spacing\n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: bubspac\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Vector of the minimum spacing of bubbles of one type, measured from center to center\n          - name: check_extremes\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Check all Superellipsoid extremes (center +- each semiaxis) for overlap, must have prevent_overlap set to True.\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: exponent\n            required: No\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Vector of exponents for each superellipsoid, n=2 is a normal ellipse\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the superellipsoid\n          - name: max_num_tries\n            required: No\n            default: !!str 1000\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The number of tries\n          - name: nestedvalue\n            required: No\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value for nested particles inside the superellipsoid in inverse configuration\n          - name: numbub\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n            group_name: \n            description: |\n              Vector of the number of bubbles to place\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the superellipsoid\n          - name: prevent_overlap\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Check all Superellipsoid centers for overlap with other Superellipsoids.\n          - name: rand_seed\n            required: No\n            default: !!str 12345\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: semiaxis_a\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Vector of mean semiaxis values in the x direction for the ellipse\n          - name: semiaxis_a_variation\n            required: No\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Vector of plus or minus fractions of random variation in the bubble semiaxis in the x direction for uniform, standard deviation for normal\n          - name: semiaxis_b\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Vector of mean semiaxis values in the y direction for the ellipse\n          - name: semiaxis_b_variation\n            required: No\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Vector of plus or minus fractions of random variation in the bubble semiaxis in the y direction for uniform, standard deviation for normal\n          - name: semiaxis_c\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Vector of mean semiaxis values in the z direction for the ellipse, must be set to 1 if 2D.\n          - name: semiaxis_c_variation\n            required: No\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Vector of plus or minus fractions of random variation in the bubble semiaxis in the z direction for uniform, standard deviation for normal. Must be set to 0 if 2D.\n          - name: semiaxis_variation_type\n            required: No\n            default: !!str none\n            cpp_type: MooseEnum\n            group_name: \n            options: uniform normal none\n            description: |\n              Type of distribution that random superellipsoid semiaxes will follow\n          - name: type\n            required: No\n            default: !!str MultiSmoothSuperellipsoidIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: vary_axes_independently\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              If true the length of each semiaxis is randomly chosen within the provided parameters, if false then one random number is generated and applied to all semiaxes.\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/PFCFreezingIC\n          description: |\n            \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: crystal_structure\n            required: No\n            default: !!str \n            cpp_type: MooseEnum\n            group_name: \n            options: FCC BCC\n            description: |\n              The type of crystal structure\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: inside\n            required: No\n            default: !!str 1\n            cpp_type: double\n            group_name: \n            description: |\n              Value inside sinusoids\n          - name: lc\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The lattice constant off the crystal structure\n          - name: max\n            required: No\n            default: !!str 1\n            cpp_type: double\n            group_name: \n            description: |\n              Upper bound of the randomly generated values\n          - name: min\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Lower bound of the randomly generated values\n          - name: outside\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Value outside sinusoids\n          - name: seed\n            required: No\n            default: !!str 0\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str PFCFreezingIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the lower left-hand corner of the frozen box\n          - name: x2\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the upper right-hand corner of the box\n          - name: y1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the lower left-hand corner of the frozen box\n          - name: y2\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the upper right-hand corner of the box\n          - name: z1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the lower left-hand corner of the box\n          - name: z2\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the upper right-hand corner of the box\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/PolycrystalColoringIC\n          description: |\n            Random Voronoi tesselation polycrystal (used by PolycrystalVoronoiICAction)\n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: op_index\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The index for the current order parameter\n          - name: polycrystal_ic_uo\n            required: Yes\n            default: !!str \n            cpp_type: UserObjectName\n            group_name: \n            description: |\n              TODO\n          - name: type\n            required: No\n            default: !!str PolycrystalColoringIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/PolycrystalRandomIC\n          description: |\n            Random initial condition for a polycrystalline material\n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: op_index\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The index for the current order parameter\n          - name: op_num\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Number of order parameters\n          - name: typ\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Type of random grain structure\n          - name: type\n            required: No\n            default: !!str PolycrystalRandomIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/PolycrystalVoronoiVoidIC\n          description: |\n            Random distribution of smooth circles with given minimum spacing\n          parameters:\n          - name: 3D_spheres\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              in 3D, whether the objects are spheres or columns\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: bubspac\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              minimum spacing of bubbles, measured from center to center\n          - name: columnar_3D\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              3D microstructure will be columnar in the z-direction?\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: grain_num\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Number of grains being represented by the order parameters\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: numbub\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The number of bubbles to place\n          - name: numtries\n            required: No\n            default: !!str 1000\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The number of tries\n          - name: op_index\n            required: No\n            default: !!str 0\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The index for the current order parameter, not needed if structure_type = voids\n          - name: op_num\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Number of order parameters\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: radius\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Mean radius value for the circles\n          - name: radius_variation\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Plus or minus fraction of random variation in the bubble radius for uniform, standard deviation for normal\n          - name: radius_variation_type\n            required: No\n            default: !!str none\n            cpp_type: MooseEnum\n            group_name: \n            options: uniform normal none\n            description: |\n              Type of distribution that random circle radii will follow\n          - name: rand_seed\n            required: No\n            default: !!str 12444\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The random seed\n          - name: structure_type\n            required: Yes\n            default: !!str \n            cpp_type: MooseEnum\n            group_name: \n            options: grains voids\n            description: |\n              Which structure type is being initialized, grains or voids\n          - name: type\n            required: No\n            default: !!str PolycrystalVoronoiVoidIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/RampIC\n          description: |\n            Linear ramp along the x-axis with given values at the left and right extreme points.\n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: type\n            required: No\n            default: !!str RampIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: value_left\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The value on left (xmin) boundary.\n          - name: value_right\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The value on right (xmax) boundary.\n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/RandomIC\n          description: |\n            \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: max\n            required: No\n            default: !!str 1\n            cpp_type: double\n            group_name: \n            description: |\n              Upper bound of the randomly generated values\n          - name: min\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Lower bound of the randomly generated values\n          - name: seed\n            required: No\n            default: !!str 0\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str RandomIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/ReconPhaseVarIC\n          description: |\n            \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: ebsd_reader\n            required: Yes\n            default: !!str \n            cpp_type: UserObjectName\n            group_name: \n            description: |\n              The EBSDReader object holding the EBSD data\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: phase\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              EBSD phase number this variable is to represent\n          - name: type\n            required: No\n            default: !!str ReconPhaseVarIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/RndBoundingBoxIC\n          description: |\n            Random noise with different min/max inside/outside of a bounding box\n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: mn_invalue\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The min value of the variable invalue the box\n          - name: mn_outvalue\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The min value of the variable outvalue the box\n          - name: mx_invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The max value of the variable invalue the box\n          - name: mx_outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The max value of the variable outvalue the box\n          - name: type\n            required: No\n            default: !!str RndBoundingBoxIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the lower left-hand corner of the box\n          - name: x2\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the upper right-hand corner of the box\n          - name: y1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the lower left-hand corner of the box\n          - name: y2\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the upper right-hand corner of the box\n          - name: z1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the lower left-hand corner of the box\n          - name: z2\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the upper right-hand corner of the box\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/RndSmoothCircleIC\n          description: |\n            Random noise with different min/max inside/outside of a smooth circle\n          parameters:\n          - name: 3D_spheres\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              in 3D, whether the objects are spheres or columns\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: radius\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The radius of a circle\n          - name: rand_seed\n            required: No\n            default: !!str 12345\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str RndSmoothCircleIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: variation_invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Plus or minus this amount on the invalue\n          - name: variation_outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Plus or minus this amount on the outvalue\n          - name: x1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the circle center\n          - name: y1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the circle center\n          - name: z1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the circle center\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/ScalarComponentIC\n          description: |\n            \n          parameters:\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: type\n            required: No\n            default: !!str ScalarComponentIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: values\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Initial values to initialize the scalar variable.\n          - name: variable\n            required: No\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/ScalarConstantIC\n          description: |\n            \n          parameters:\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: type\n            required: No\n            default: !!str ScalarConstantIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: value\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              \n          - name: variable\n            required: No\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/SmoothCircleFromFileIC\n          description: |\n            Multiple smooth circles read from a text file\n          parameters:\n          - name: 3D_spheres\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              in 3D, whether the objects are spheres or columns\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: file_name\n            required: Yes\n            default: !!str \n            cpp_type: FileName\n            group_name: \n            description: |\n              File containing circle centers and radii\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: rand_seed\n            required: No\n            default: !!str 12345\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str SmoothCircleFromFileIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/SmoothCircleIC\n          description: |\n            Circle with a smooth interface\n          parameters:\n          - name: 3D_spheres\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              in 3D, whether the objects are spheres or columns\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: radius\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The radius of a circle\n          - name: rand_seed\n            required: No\n            default: !!str 12345\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str SmoothCircleIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the circle center\n          - name: y1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the circle center\n          - name: z1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the circle center\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/SmoothSuperellipsoidIC\n          description: |\n            Superellipsoid with a smooth interface\n          parameters:\n          - name: a\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Semiaxis a of the superellipsoid\n          - name: b\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Semiaxis b of the superellipsoid\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: c\n            required: No\n            default: !!str 1\n            cpp_type: double\n            group_name: \n            description: |\n              Semiaxis c of the superellipsoid\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the superellipsoid\n          - name: n\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Exponent n of the superellipsoid\n          - name: nestedvalue\n            required: No\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value for nested particles inside the superellipsoid in inverse configuration\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the superellipsoid\n          - name: rand_seed\n            required: No\n            default: !!str 12345\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str SmoothSuperellipsoidIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the superellipsoid center\n          - name: y1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the superellipsoid center\n          - name: z1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the superellipsoid center\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/SpecifiedSmoothCircleIC\n          description: |\n            Multiple smooth circles with manually specified radii and center points\n          parameters:\n          - name: 3D_spheres\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              in 3D, whether the objects are spheres or columns\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: radii\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The radius for each circle\n          - name: rand_seed\n            required: No\n            default: !!str 12345\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str SpecifiedSmoothCircleIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x_positions\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The x-coordinate for each circle center\n          - name: y_positions\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The y-coordinate for each circle center\n          - name: z_positions\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The z-coordinate for each circle center\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/SpecifiedSmoothSuperellipsoidIC\n          description: |\n            Multiple smooth superellipsoids with manually specified center points; semiaxes a,b,c; and exponents n\n          parameters:\n          - name: as\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Semiaxis a for each superellipsoid\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: bs\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Semiaxis b for each superellipsoid\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: cs\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Semiaxis c for each superellipsoid\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the superellipsoid\n          - name: nestedvalue\n            required: No\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value for nested particles inside the superellipsoid in inverse configuration\n          - name: ns\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Exponent n for each superellipsoid\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the superellipsoid\n          - name: rand_seed\n            required: No\n            default: !!str 12345\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str SpecifiedSmoothSuperellipsoidIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x_positions\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The x-coordinate for each superellipsoid center\n          - name: y_positions\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The y-coordinate for each superellipsoid center\n          - name: z_positions\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The z-coordinate for each superellipsoid center\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/ThumbIC\n          description: |\n            Thumb shaped bicrystal for grain boundary mobility tests\n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: height\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the circle center\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: type\n            required: No\n            default: !!str ThumbIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: width\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the circle center\n          - name: xcoord\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the circle center\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/Tricrystal2CircleGrainsIC\n          description: |\n            Tricrystal with two circles/bubbles\n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: op_index\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Index for the current grain order parameter\n          - name: op_num\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Number of grain order parameters\n          - name: type\n            required: No\n            default: !!str Tricrystal2CircleGrainsIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/TricrystalTripleJunctionIC\n          description: |\n            Tricrystal with a triple junction\n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: junction\n            required: No\n            default: !!str \n            cpp_type: libMesh::Point\n            group_name: \n            description: |\n              The point where the triple junction is located. Default is the center of the mesh\n          - name: op_index\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Index for the current grain order parameter\n          - name: op_num\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Number of grain order parameters\n          - name: theta1\n            required: No\n            default: !!str 135\n            cpp_type: double\n            group_name: \n            description: |\n              Angle of first grain at triple junction in degrees\n          - name: theta2\n            required: No\n            default: !!str 135\n            cpp_type: double\n            group_name: \n            description: |\n              Angle of second grain at triple junction in degrees\n          - name: type\n            required: No\n            default: !!str TricrystalTripleJunctionIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n  - name: /AuxVariables/MultiAuxVariables\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The block id where this variable lives\n    - name: data_type\n      required: Yes\n      default: !!str Real\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: Real RealGradient\n      description: |\n        Specifying data type of the materials property, variables are created accordingly\n    - name: family\n      required: No\n      default: !!str LAGRANGE\n      cpp_type: MooseEnum\n      group_name: \n      options: LAGRANGE MONOMIAL SCALAR\n      description: |\n        Specifies the family of FE shape functions to use for this variable\n    - name: grain_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Specifies the number of grains to create the aux varaivles for.\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: initial_condition\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Specifies the initial condition for this variable\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH\n      description: |\n        Specifies the order of the FE shape function to use for this variable (additional orders not listed are allowed)\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: variable_base\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector that specifies the base name of the variables.\n    subblocks:\n- name: /BCs\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /BCs/*\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: isObjectAction\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates that this is a MooseObjectAction.\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/CahnHilliardAnisoFluxBC\n    description: |\n      Cahn-Hilliard fixed flux boundary condition using a tensorial (anisotropic) mobility\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the mobility\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: flux\n      required: No\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        The flux set at the boundary\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str M\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CahnHilliardAnisoFluxBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/CahnHilliardFluxBC\n    description: |\n      Cahn-Hilliard fixed flux boundary condition using a scalar (isotropic) mobility\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the mobility\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: flux\n      required: No\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        The flux set at the boundary\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str M\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CahnHilliardFluxBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/CavityPressure\n    description: |\n      \n    parameters:\n    subblocks:\n    - name: /BCs/CavityPressure/*\n      description: |\n        \n      parameters:\n      - name: boundary\n        required: Yes\n        default: !!str \n        cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n        group_name: \n        description: |\n          The list of boundary IDs from the mesh where the pressure will be applied\n      - name: displacements\n        required: Yes\n        default: !!str \n        cpp_type: std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >\n        group_name: \n        description: |\n          The nonlinear displacement variables\n      - name: inactive\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          If specified blocks matching these identifiers will be skipped.\n      - name: output\n        required: No\n        default: !!str \n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          The name to use for the plenum pressure value\n      - name: save_in\n        required: No\n        default: !!str \n        cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n        group_name: \n        description: |\n          Auxiliary variables to save the displacement residuals\n      - name: use_displaced_mesh\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          Whether to use displaced mesh in the boundary condition\n      - name: output_initial_moles\n        required: No\n        default: !!str \n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          The name to use when reporting the initial moles of gas\n      - name: R\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The universal gas constant for the units used\n      - name: execute_on\n        required: No\n        default: !!str linear\n        cpp_type: MultiMooseEnum\n        group_name: \n        options: none initial linear nonlinear timestep_end timestep_begin custom\n        description: |\n          Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n      - name: initial_pressure\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          The initial pressure in the cavity\n      - name: initial_temperature\n        required: No\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          Initial temperature (optional)\n      - name: material_input\n        required: No\n        default: !!str \n        cpp_type: std::vector<PostprocessorName, std::allocator<PostprocessorName> >\n        group_name: \n        description: |\n          The name of the postprocessor(s) that holds the amount of material injected into the cavity\n      - name: startup_time\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          The amount of time during which the pressure will ramp from zero to its true value\n      - name: temperature\n        required: Yes\n        default: !!str \n        cpp_type: PostprocessorName\n        group_name: \n        description: |\n          The name of the average temperature postprocessor value\n      - name: volume\n        required: Yes\n        default: !!str \n        cpp_type: PostprocessorName\n        group_name: \n        description: |\n          The name of the internal volume postprocessor value\n      subblocks:\n  - name: /BCs/ConvectiveFluxBC\n    description: |\n      Determines boundary values via the initial and final values, flux, and exposure duration\n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: duration\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: final\n      required: No\n      default: !!str 500\n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: initial\n      required: No\n      default: !!str 500\n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: rate\n      required: No\n      default: !!str 7500\n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ConvectiveFluxBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/DGFunctionDiffusionDirichletBC\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: diff\n      required: No\n      default: !!str 1\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The diffusion (or thermal conductivity or viscosity) coefficient.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: epsilon\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Epsilon\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The forcing function.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: sigma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Sigma\n    - name: type\n      required: No\n      default: !!str DGFunctionDiffusionDirichletBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The value the variable should have on the boundary\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/DashpotBC\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: coefficient\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The viscosity coefficient\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The displacement component corresponding the variable this BC acts on.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: disp_x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Displacement in the x direction\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Displacement in the y direction\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Displacement in the z direction\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str DashpotBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/DiffusionFluxBC\n    description: |\n      Computes a boundary residual contribution consistent with the Diffusion Kernel. Does not impose a boundary condition; instead computes the boundary contribution corresponding to the current value of grad(u) and accumulates it in the residual vector.\n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str DiffusionFluxBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/DirichletBC\n    description: |\n      Imposes the essential boundary condition $u=g$, where $g$ is a constant, controllable value.\n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str DirichletBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Value of the BC\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/DisplacementAboutAxis\n    description: |\n      \n    parameters:\n    - name: angle_units\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: degrees radians\n      description: |\n        The units of the angle of rotation. Choices are:degrees radians\n    - name: axis_direction\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Direction of the axis of rotation\n    - name: axis_origin\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Origin of the axis of rotation\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: int\n      group_name: \n      description: |\n        The component for the rotational displacement\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The function providing the angle of rotation.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str DisplacementAboutAxis\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/FunctionDirichletBC\n    description: |\n      Imposes the essential boundary condition $u=g(t,\\vec{x})$, where $g$ is a (possibly) time and space-dependent MOOSE Function.\n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The forcing function.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str FunctionDirichletBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/FunctionNeumannBC\n    description: |\n      Imposes the integrated boundary condition $\\frac{\\partial u}{\\partial n}=h(t,\\vec{x})$, where $h$ is a (possibly) time and space-dependent MOOSE Function.\n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The function.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str FunctionNeumannBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/FunctionPenaltyDirichletBC\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Forcing function\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: penalty\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Penalty scalar\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str FunctionPenaltyDirichletBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/FunctionPresetBC\n    description: |\n      The same as FunctionDirichletBC except the value is applied before the solve begins\n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The forcing function.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str FunctionPresetBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/InteractionIntegralBenchmarkBC\n    description: |\n      \n    parameters:\n    - name: KIII_function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Function describing the Mode III stress intensity factor.\n    - name: KII_function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Function describing the Mode II stress intensity factor.\n    - name: KI_function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Function describing the Mode I stress intensity factor.\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z\n      description: |\n        The component of the displacement to apply BC on.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: crack_front_definition\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The CrackFrontDefinition user object name\n    - name: crack_front_point_index\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index of the point on the crack front.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: poissons_ratio\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Poisson\'s ratio for the material.\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str InteractionIntegralBenchmarkBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    - name: youngs_modulus\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Young\'s modulus of the material.\n    subblocks:\n  - name: /BCs/MatchedValueBC\n    description: |\n      Implements a NodalBC which equates two different Variables\' values on a specified boundary.\n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MatchedValueBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable whose value we are to match.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/NeumannBC\n    description: |\n      Imposes the integrated boundary condition $\\frac{\\partial u}{\\partial n}=h$, where $h$ is a constant, controllable value.\n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NeumannBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The value of the gradient on the boundary.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/OneDEqualValueConstraintBC\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Component of the Lagrange multiplier\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: lambda\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Lagrange multiplier\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str OneDEqualValueConstraintBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    - name: vg\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Variation of the constraint g wrt this surface (+1 or -1). Note: g = value1 - value2 = 0 \n    subblocks:\n  - name: /BCs/PenaltyDirichletBC\n    description: |\n      Enforces a Dirichlet boundary condition in a weak sense by penalizing differences between the current solution and the Dirichlet data.\n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: penalty\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Penalty scalar\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PenaltyDirichletBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Boundary value of the variable\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/Periodic\n    description: |\n      \n    parameters:\n    subblocks:\n    - name: /BCs/Periodic/*\n      description: |\n        \n      parameters:\n      - name: auto_direction\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          If using a generated mesh, you can specifiy just the dimension(s) you want to mark as periodic\n      - name: inactive\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          If specified blocks matching these identifiers will be skipped.\n      - name: inv_transform_func\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Functions that specify the inverse transformation\n      - name: primary\n        required: No\n        default: !!str \n        cpp_type: BoundaryName\n        group_name: \n        description: |\n          Boundary ID associated with the primary boundary.\n      - name: secondary\n        required: No\n        default: !!str \n        cpp_type: BoundaryName\n        group_name: \n        description: |\n          Boundary ID associated with the secondary boundary.\n      - name: transform_func\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Functions that specify the transformation\n      - name: translation\n        required: No\n        default: !!str \n        cpp_type: libMesh::VectorValue<double>\n        group_name: \n        description: |\n          Vector that translates coordinates on the primary boundary to coordinates on the secondary boundary.\n      - name: variable\n        required: No\n        default: !!str \n        cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n        group_name: \n        description: |\n          Variable for the periodic boundary\n      subblocks:\n  - name: /BCs/PostprocessorDirichletBC\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: postprocessor\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The postprocessor to set the value to on the boundary.\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PostprocessorDirichletBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/PostprocessorNeumannBC\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: postprocessor\n      required: No\n      default: !!str 0\n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The postprocessor to use for value of the gradient on the boundary.\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PostprocessorNeumannBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/PresetAcceleration\n    description: |\n      Prescribe acceleration on a given boundary in a given direction\n    parameters:\n    - name: acceleration\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The acceleration variable.\n    - name: beta\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        beta parameter for Newmark time integration.\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: function\n      required: No\n      default: !!str 1\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Function describing the velocity.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Scale factor if function is given.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PresetAcceleration\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    - name: velocity\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The velocity variable.\n    subblocks:\n  - name: /BCs/PresetBC\n    description: |\n      Similar to DirichletBC except the value is applied before the solve begins\n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PresetBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Value of the BC\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/PresetDisplacement\n    description: |\n      Prescribe the displacement on a given boundary in a given direction.\n    parameters:\n    - name: acceleration\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The acceleration variable.\n    - name: beta\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        beta parameter for Newmark time integration.\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: function\n      required: No\n      default: !!str 1\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Function describing the displacement.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Scale factor if function is given.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PresetDisplacement\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    - name: velocity\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The velocity variable.\n    subblocks:\n  - name: /BCs/PresetVelocity\n    description: |\n      \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: function\n      required: No\n      default: !!str 1\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Function describing the velocity.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PresetVelocity\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    - name: velocity\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Value of the velocity.  Used as scale factor if function is given.\n    subblocks:\n  - name: /BCs/Pressure\n    description: |\n      Applies a pressure on a given boundary in a given direction\n    parameters:\n    - name: alpha\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        alpha parameter required for HHT time integration scheme\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The component for the pressure\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The magnitude to use in computing the pressure\n    - name: function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The function that describes the pressure\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: postprocessor\n      required: No\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        Postprocessor that will supply the pressure value\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str Pressure\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n    - name: /BCs/Pressure/*\n      description: |\n        \n      parameters:\n      - name: alpha\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          alpha parameter for HHT time integration\n      - name: boundary\n        required: Yes\n        default: !!str \n        cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n        group_name: \n        description: |\n          The list of boundary IDs from the mesh where the pressure will be applied\n      - name: disp_x\n        required: No\n        default: !!str \n        cpp_type: NonlinearVariableName\n        group_name: \n        description: |\n          The x displacement\n      - name: disp_y\n        required: No\n        default: !!str \n        cpp_type: NonlinearVariableName\n        group_name: \n        description: |\n          The y displacement\n      - name: disp_z\n        required: No\n        default: !!str \n        cpp_type: NonlinearVariableName\n        group_name: \n        description: |\n          The z displacement\n      - name: displacements\n        required: No\n        default: !!str \n        cpp_type: std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >\n        group_name: \n        description: |\n          The displacements appropriate for the simulation geometry and coordinate system\n      - name: factor\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          The factor to use in computing the pressure\n      - name: function\n        required: No\n        default: !!str \n        cpp_type: FunctionName\n        group_name: \n        description: |\n          The function that describes the pressure\n      - name: inactive\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          If specified blocks matching these identifiers will be skipped.\n      - name: save_in_disp_x\n        required: No\n        default: !!str \n        cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n        group_name: \n        description: |\n          The save_in variables for x displacement\n      - name: save_in_disp_y\n        required: No\n        default: !!str \n        cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n        group_name: \n        description: |\n          The save_in variables for y displacement\n      - name: save_in_disp_z\n        required: No\n        default: !!str \n        cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n        group_name: \n        description: |\n          The save_in variables for z displacement\n      subblocks:\n  - name: /BCs/SinDirichletBC\n    description: |\n      Imposes a time-varying essential boundary condition $u=g(t)$, where $g(t)$ varies from an given initial value at time $t=0$ to a given final value over a specified duration.\n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: duration\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: final\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: initial\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SinDirichletBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/SinNeumannBC\n    description: |\n      Imposes a time-varying flux boundary condition $\\frac{\\partial u}{\\partial n}=g(t)$, where $g(t)$ varies from an given initial value at time $t=0$ to a given final value over a specified duration.\n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: duration\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The duration of the ramp\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: final\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The final value of the gradient on the boundary\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: initial\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The initial value of the gradient on the boundary\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SinNeumannBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/VacuumBC\n    description: |\n      \n    parameters:\n    - name: alpha\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        No idea.\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str VacuumBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/VectorNeumannBC\n    description: |\n      Imposes the integrated boundary condition $\\frac{\\partial u}{\\partial n}=\\vec{V}\\cdot\\hat{n}$, where $\\vec{V}$ is a user-defined, constant vector.\n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str VectorNeumannBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    - name: vector_value\n      required: No\n      default: !!str 0 0 0\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        vector this BC should act in\n    subblocks:\n  - name: /BCs/WeakGradientBC\n    description: |\n      Computes a boundary residual contribution consistent with the Diffusion Kernel. Does not impose a boundary condition; instead computes the boundary contribution corresponding to the current value of grad(u) and accumulates it in the residual vector.\n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str WeakGradientBC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n- name: /Bounds\n  description: |\n    \n  parameters:\n  - name: inactive\n    required: No\n    default: !!str \n    cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n    group_name: \n    description: |\n      If specified blocks matching these identifiers will be skipped.\n  subblocks:\n  - name: /Bounds/*\n    description: |\n      \n    parameters:\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: isObjectAction\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates that this is a MooseObjectAction.\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /Bounds/AccumulateAux\n    description: |\n      \n    parameters:\n    - name: accumulate_from_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variable whose values are to be accumulated into the current variable\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str AccumulateAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/BndsCalcAux\n    description: |\n      Calculate location of grain boundaries in a polycrystalline sample\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Array of coupled variables (num_name)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str BndsCalcAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variables\n    - name: var_name_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Array of coupled variables (base_name)\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/BoundsAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bounded_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable to be bounded\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: lower\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The lower bound for the variable\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str BoundsAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: upper\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The upper bound for the variable\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/ConstantAux\n    description: |\n      Creates a constant field in the domain.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ConstantAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Some constant value that can be read from the input file\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/CrossTermGradientFreeEnergy\n    description: |\n      Free energy contribution from the cross terms in ACMultiInetrface\n    parameters:\n    - name: additional_free_energy\n      required: No\n      default: !!str 0\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled variable holding additional free energy contributions to be summed up\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: interfacial_vars\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variable names that contribute to interfacial energy\n    - name: kappa_names\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Matrix of kappa names with rows and columns corresponding to each variable name in interfacial_vars in the same order (should be symmetric).\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CrossTermGradientFreeEnergy\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/CrystalPlasticityRotationOutAux\n    description: |\n      Output updated rotation tensor to a file: Use for stereographic plots\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: output_frequency\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Frequency of Output\n    - name: rotout_file_name\n      required: No\n      default: !!str rot.out\n      cpp_type: FileName\n      group_name: \n      description: |\n        Name of rotation output file: Default rot.out\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CrystalPlasticityRotationOutAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/CylindricalRankTwoAux\n    description: |\n      Takes RankTwoTensor material and outputs component in cylindrical coordinates\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: center_point\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        Location of the center point of the cylindrical coordinates\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: index_i\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index i of ij for the tensor to output (0, 1, 2)\n    - name: index_j\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index j of ij for the tensor to output (0, 1, 2)\n    - name: rank_two_tensor\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The rank two material tensor name\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CylindricalRankTwoAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/DebugResidualAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: debug_variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The variable that is being debugged.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str DebugResidualAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/DomainIntegralQFunction\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: crack_front_definition\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The CrackFrontDefinition user object name\n    - name: crack_front_point_index\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index of the point on the crack front corresponding to this q function\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: j_integral_radius_inner\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Radius for J-Integral calculation\n    - name: j_integral_radius_outer\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Radius for J-Integral calculation\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str DomainIntegralQFunction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/DomainIntegralTopologicalQFunction\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: crack_front_definition\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The CrackFrontDefinition user object name\n    - name: crack_front_point_index\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index of the point on the crack front corresponding to this q function\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: ring_index\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The ring of elements that defines the integration domain\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str DomainIntegralTopologicalQFunction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/EBSDReaderAvgDataAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: data_name\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: phi1 phi phi2 phase symmetry local_id feature_id\n      description: |\n        The averaged data to be extracted from the EBSD data by this AuxKernel\n    - name: ebsd_reader\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The EBSDReader GeneralUserObject\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: grain_tracker\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The GrainTracker UserObject\n    - name: invalid\n      required: No\n      default: !!str -1\n      cpp_type: double\n      group_name: \n      description: |\n        Value to return for points without active grains.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str EBSDReaderAvgDataAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/EBSDReaderPointDataAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: data_name\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: phi1 phi phi2 feature_id phase symmetry\n      description: |\n        The data to be extracted from the EBSD data by this AuxKernel\n    - name: ebsd_reader\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The EBSDReader GeneralUserObject\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str EBSDReaderPointDataAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/ElasticEnergyAux\n    description: |\n      Compute the local elastic energy\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Mechanical property base name\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElasticEnergyAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/ElementH1ErrorFunctionAux\n    description: |\n      Computes the H1 or W^{1,p} error between an exact function and a coupled variable.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: coupled_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable to compute the norm of.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Function representing the exact solution\n    - name: p\n      required: No\n      default: !!str 2\n      cpp_type: double\n      group_name: \n      description: |\n        The exponent used in the norm.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementH1ErrorFunctionAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/ElementL2ErrorFunctionAux\n    description: |\n      A class for computing the element-wise L^2 (Euclidean) error between a function and a coupled variable.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: coupled_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable to compute the norm of.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Function representing the exact solution\n    - name: p\n      required: No\n      default: !!str 2\n      cpp_type: double\n      group_name: \n      description: |\n        The exponent used in the norm.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementL2ErrorFunctionAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/ElementLengthAux\n    description: |\n      Compute the element size using Elem::hmin() or Elem::hmax() from libMesh.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: method\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: min max\n      description: |\n        The size calculation to perform (\'min\' or \'max\').\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementLengthAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/ElementLpNormAux\n    description: |\n      Compute an elemental field variable (single value per element) equal to the Lp-norm of a coupled Variable.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: coupled_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable to compute the norm of.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: p\n      required: No\n      default: !!str 2\n      cpp_type: double\n      group_name: \n      description: |\n        The exponent used in the norm.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementLpNormAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/EulerAngleProvider2RGBAux\n    description: |\n      Output RGB representation of crystal orientation from user object to an AuxVariable. The entire domain must have the same crystal structure.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: crystal_structure\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: triclinic monoclinic orthorhombic trigonal tetragonal cubic hexagonal\n      description: |\n        Crystal structure of the material\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: euler_angle_provider\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Name of Euler angle provider user object\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: grain_tracker\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The GrainTracker UserObject to get values from.\n    - name: no_grain_color\n      required: No\n      default: !!str 0 0 0\n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        RGB value of color used to represent area with no grains, defaults to black\n    - name: output_type\n      required: No\n      default: !!str scalar\n      cpp_type: MooseEnum\n      group_name: \n      options: red green blue scalar\n      description: |\n        Type of value that will be outputted\n    - name: sd\n      required: No\n      default: !!str 001\n      cpp_type: MooseEnum\n      group_name: \n      options: 100 010 001\n      description: |\n        Reference sample direction\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str EulerAngleProvider2RGBAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/EulerAngleVariables2RGBAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: output_type\n      required: No\n      default: !!str scalar\n      cpp_type: MooseEnum\n      group_name: \n      options: red green blue scalar\n      description: |\n        Type of value that will be outputted\n    - name: phase\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Grain phase index\n    - name: phi\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Euler angle 2\n    - name: phi1\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Euler angle 1\n    - name: phi2\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Euler angle 3\n    - name: sd\n      required: No\n      default: !!str 001\n      cpp_type: MooseEnum\n      group_name: \n      options: 100 010 001\n      description: |\n        Reference sample direction\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: symmetry\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Grain symmetry indentifier\n    - name: type\n      required: No\n      default: !!str EulerAngleVariables2RGBAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/FeatureFloodCountAux\n    description: |\n      Feature detection by connectivity analysis\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bubble_object\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The FeatureFloodCount UserObject to get values from.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str initial timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: field_display\n      required: No\n      default: !!str UNIQUE_REGION\n      cpp_type: MooseEnum\n      group_name: \n      options: UNIQUE_REGION VARIABLE_COLORING GHOSTED_ENTITIES HALOS CENTROID ACTIVE_BOUNDS\n      description: |\n        Determines how the auxilary field should be colored. (UNIQUE_REGION and VARIABLE_COLORING are nodal, CENTROID is elemental, default: UNIQUE_REGION)\n    - name: flood_counter\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The FeatureFloodCount UserObject to get values from.\n    - name: map_index\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index of which map to retrieve values from when using FeatureFloodCount with multiple maps.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str FeatureFloodCountAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/FunctionAux\n    description: |\n      Auxiliary Kernel that creates and updates a field variable by sampling a function through space and time.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The function to use as the value\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str FunctionAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/GapValueAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: normal_smoothing_distance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Distance from edge in parametric coordinates over which to smooth contact normal\n    - name: normal_smoothing_method\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Method to use to smooth normals (edge_based|nodal_normal_based)\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: FIRST SECOND THIRD FOURTH\n      description: |\n        The finite element order\n    - name: paired_boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary on the other side of a gap.\n    - name: paired_variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to get the value of.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: tangential_tolerance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Tangential distance to extend edges of contact surfaces\n    - name: type\n      required: No\n      default: !!str GapValueAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: warnings\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to output warning messages concerning nodes not being found\n    subblocks:\n  - name: /Bounds/GrainAdvectionAux\n    description: |\n      Calculates the advection velocity of grain due to rigid body translation and rotation\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z\n      description: |\n        The gradient component to compute\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: grain_force\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        userobject for getting force and torque acting on grains\n    - name: grain_tracker_object\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        userobject for getting volume and center of mass of grains\n    - name: grain_volumes\n      required: No\n      default: !!str \n      cpp_type: VectorPostprocessorName\n      group_name: \n      description: |\n        The feature volume VectorPostprocessorValue.\n    - name: rotation_constant\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        constant value characterizing grain rotation\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: translation_constant\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        constant value characterizing grain translation\n    - name: type\n      required: No\n      default: !!str GrainAdvectionAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/KKSGlobalFreeEnergy\n    description: |\n      Total free energy in KKS system, including chemical, barrier and gradient terms\n    parameters:\n    - name: additional_free_energy\n      required: No\n      default: !!str 0\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled variable holding additional free energy contributions to be summed up\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: fa_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function F (f_name in the corresponding derivative function material)\n    - name: fb_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function F (f_name in the corresponding derivative function material)\n    - name: g_name\n      required: No\n      default: !!str g\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name for the double well function g(eta)\n    - name: h_name\n      required: No\n      default: !!str h\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name for the switching function h(eta)\n    - name: interfacial_vars\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variable names that contribute to interfacial energy\n    - name: kappa_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Vector of kappa names corresponding to each variable name in interfacial_vars in the same order. For basic KKS, there is 1 kappa, 1 interfacial_var.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str KKSGlobalFreeEnergy\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: w\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Double well height parameter\n    subblocks:\n  - name: /Bounds/KKSMultiFreeEnergy\n    description: |\n      Total free energy in multi-phase KKS system, including chemical, barrier and gradient terms\n    parameters:\n    - name: Fj_names\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        List of free energies for each phase. Place in same order as hj_names and gj_names!\n    - name: additional_free_energy\n      required: No\n      default: !!str 0\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled variable holding additional free energy contributions to be summed up\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: gj_names\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Barrier Function Materials that provide g. Place in same order as Fj_names and hj_names!\n    - name: hj_names\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Switching Function Materials that provide h. Place in same order as Fj_names and gj_names!\n    - name: interfacial_vars\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variable names that contribute to interfacial energy\n    - name: kappa_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Vector of kappa names corresponding to each variable name in interfacial_vars in the same order.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str KKSMultiFreeEnergy\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: w\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Double well height parameter\n    subblocks:\n  - name: /Bounds/MaterialRealAux\n    description: |\n      Outputs element volume-averaged material properties\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The factor by which to multiply your material property for visualization\n    - name: offset\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The offset to add to your material property for visualization\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The scalar material property name\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialRealAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/MaterialRealDenseMatrixAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: column\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The column component to consider for this kernel\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The factor by which to multiply your material property for visualization\n    - name: offset\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The offset to add to your material property for visualization\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The scalar material property name\n    - name: row\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The row component to consider for this kernel\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialRealDenseMatrixAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/MaterialRealTensorValueAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: column\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The column component to consider for this kernel\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The factor by which to multiply your material property for visualization\n    - name: offset\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The offset to add to your material property for visualization\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The scalar material property name\n    - name: row\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The row component to consider for this kernel\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialRealTensorValueAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/MaterialRealVectorValueAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The vector component to consider for this kernel\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The factor by which to multiply your material property for visualization\n    - name: offset\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The offset to add to your material property for visualization\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The scalar material property name\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialRealVectorValueAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/MaterialStdVectorAux\n    description: |\n      Extracts a component of a material type std::vector<Real> to an aux variable.  If the std::vector is not of sufficient size then zero is returned\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The factor by which to multiply your material property for visualization\n    - name: index\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index to consider for this kernel\n    - name: offset\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The offset to add to your material property for visualization\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The scalar material property name\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: selected_qp\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        Evaluate the std::vector<Real> at this quadpoint.  This only needs to be used if you are interested in a particular quadpoint in each element: otherwise do not include this parameter in your input file\n    - name: type\n      required: No\n      default: !!str MaterialStdVectorAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/MaterialStdVectorRealGradientAux\n    description: |\n      Extracts a component of a material\'s std::vector<RealGradient> to an aux variable.  If the std::vector is not of sufficient size then zero is returned\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The gradient component to be extracted for this kernel\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The factor by which to multiply your material property for visualization\n    - name: index\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index to consider for this kernel\n    - name: offset\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The offset to add to your material property for visualization\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The scalar material property name\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialStdVectorRealGradientAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/NearestNodeDistanceAux\n    description: |\n      Stores the distance between a block and boundary or between two boundaries.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: paired_boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary to find the distance to.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NearestNodeDistanceAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/NearestNodeValueAux\n    description: |\n      Retrieves a field value from the closest node on the paired boundary and stores it on this boundary or block.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: paired_boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary to get the value from.\n    - name: paired_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable to get the value of.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NearestNodeValueAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/NewmarkAccelAux\n    description: |\n      \n    parameters:\n    - name: beta\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        beta parameter\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: displacement\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        displacement variable\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NewmarkAccelAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: velocity\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        velocity variable\n    subblocks:\n  - name: /Bounds/NewmarkVelAux\n    description: |\n      \n    parameters:\n    - name: acceleration\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        acceleration variable\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        gamma parameter\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NewmarkVelAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/NormalizationAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: normal_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The normalization factor\n    - name: normalization\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The postprocessor on the source\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: source_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable to be normalized\n    - name: type\n      required: No\n      default: !!str NormalizationAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/OutputEulerAngles\n    description: |\n      Output euler angles from user object to an AuxVariable.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: euler_angle_provider\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Name of Euler angle provider user object\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: grain_tracker\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The GrainTracker UserObject to get values from.\n    - name: output_euler_angle\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: phi1 Phi phi2\n      description: |\n        Euler angle to output\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str OutputEulerAngles\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/PFCEnergyDensity\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PFCEnergyDensity\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variables\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/PFCRFFEnergyDensity\n    description: |\n      \n    parameters:\n    - name: a\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Modified Coefficent in Taylor Series Expanstion\n    - name: b\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Modified Coefficent in Taylor Series Expanstion\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Modified Coefficent in Taylor Series Expanstion\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: log_approach\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: tolerance cancelation expansion nothing\n      description: |\n        Which approach will be used to handle the natural log\n    - name: num_exp_terms\n      required: No\n      default: !!str 4\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        This is the number of terms to use in the taylor series expansion\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: tol\n      required: No\n      default: !!str 1e-09\n      cpp_type: double\n      group_name: \n      description: |\n        Tolerance used when the tolerance approach is chosen\n    - name: type\n      required: No\n      default: !!str PFCRFFEnergyDensity\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variables\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/ParsedAux\n    description: |\n      Parsed function AuxKernel.\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        coupled variables\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: constant_expressions\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector of values for the constants in constant_names (can be an FParser expression)\n    - name: constant_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector of constants used in the parsed function (use this for kB etc.)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: disable_fpoptimizer\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Disable the function parser algebraic optimizer\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: enable_ad_cache\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable cacheing of function derivatives for faster startup time\n    - name: enable_auto_optimize\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable automatic immediate optimization of derivatives\n    - name: enable_jit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable just-in-time compilation of function expressions for faster evaluation\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: fail_on_evalerror\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionExpression\n      group_name: \n      description: |\n        function expression\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ParsedAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/PenetrationAux\n    description: |\n      Auxililary Kernel for computing several geometry related quantities between two contacting bodies.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: normal_smoothing_distance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Distance from edge in parametric coordinates over which to smooth contact normal\n    - name: normal_smoothing_method\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Method to use to smooth normals (edge_based|nodal_normal_based)\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: FIRST SECOND THIRD FOURTH\n      description: |\n        The finite element order\n    - name: paired_boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary to be penetrated\n    - name: quantity\n      required: No\n      default: !!str distance\n      cpp_type: MooseEnum\n      group_name: \n      options: distance tangential_distance normal_x normal_y normal_z closest_point_x closest_point_y closest_point_z element_id side incremental_slip_magnitude incremental_slip_x incremental_slip_y incremental_slip_z accumulated_slip force_x force_y force_z normal_force_magnitude normal_force_x normal_force_y normal_force_z tangential_force_magnitude tangential_force_x tangential_force_y tangential_force_z frictional_energy lagrange_multiplier mechanical_status\n      description: |\n        The quantity to recover from the available penetration information\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: tangential_tolerance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Tangential distance to extend edges of contact surfaces\n    - name: type\n      required: No\n      default: !!str PenetrationAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/ProcessorIDAux\n    description: |\n      Creates a field showing the processors and partitioning.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ProcessorIDAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/QuotientAux\n    description: |\n      Divides two coupled variables.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: denominator\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The downstairs of the quotient variable\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: numerator\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The upstairs of the quotient variable\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str QuotientAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/RadialDisplacementCylinderAux\n    description: |\n      Compute the radial component of the displacement vector for cylindrical models.\n    parameters:\n    - name: axis_vector\n      required: No\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Vector defining direction of cylindrical axis (3D Cartesian models)\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: origin\n      required: No\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Origin of cylinder axis of rotation for 2D and 3D Cartesian models\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str RadialDisplacementCylinderAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/RadialDisplacementSphereAux\n    description: |\n      Compute the radial component of the displacement vector for spherical models.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: origin\n      required: No\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Sphere origin for 3D Cartesian and 2D axisymmetric models\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str RadialDisplacementSphereAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/RankFourAux\n    description: |\n      Access a component of a RankFourTensor\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: index_i\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index i of ijkl for the tensor to output (0, 1, 2)\n    - name: index_j\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index j of ijkl for the tensor to output (0, 1, 2)\n    - name: index_k\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index k of ijkl for the tensor to output (0, 1, 2)\n    - name: index_l\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index l of ijkl for the tensor to output (0, 1, 2)\n    - name: rank_four_tensor\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The rank four material tensor name\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str RankFourAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/RankTwoAux\n    description: |\n      Access a component of a RankTwoTensor\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: index_i\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index i of ij for the tensor to output (0, 1, 2)\n    - name: index_j\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index j of ij for the tensor to output (0, 1, 2)\n    - name: rank_two_tensor\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The rank two material tensor name\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: selected_qp\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        Evaluate the tensor at this specific quadpoint\n    - name: type\n      required: No\n      default: !!str RankTwoAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/RankTwoScalarAux\n    description: |\n      Compute a scalar property of a RankTwoTensor\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: No\n      default: !!str 0 0 1\n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        Direction vector\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: point1\n      required: No\n      default: !!str 0 0 0\n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        Start point for axis used to calculate some cylinderical material tensor quantities\n    - name: point2\n      required: No\n      default: !!str 0 1 0\n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        End point for axis used to calculate some material tensor quantities\n    - name: rank_two_tensor\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The rank two material tensor name\n    - name: scalar_type\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: VonMisesStress EffectiveStrain Hydrostatic L2norm MaxPrincipal MidPrincipal MinPrincipal VolumetricStrain FirstInvariant SecondInvariant ThirdInvariant AxialStress HoopStress RadialStress TriaxialityStress Direction\n      description: |\n        Type of scalar output\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: selected_qp\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        Evaluate the tensor at this quadpoint.  This option only needs to be used if you are interested in a particular quadpoint in each element: otherwise do not include this parameter in your input file\n    - name: type\n      required: No\n      default: !!str RankTwoScalarAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/SelfAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SelfAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/SolutionAux\n    description: |\n      Creates fields by using information from a SolutionUserObject.\n    parameters:\n    - name: add_factor\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Add this value (b) to the solution (x): ax+b, where a is the \'scale_factor\'\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direct\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true the meshes must be the same and then the values are simply copied over.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: from_variable\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The name of the variable to extract from the file\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Scale factor (a)  to be applied to the solution (x): ax+b, where b is the \'add_factor\'\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: solution\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The name of the SolutionUserObject\n    - name: type\n      required: No\n      default: !!str SolutionAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/SpatialUserObjectAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SpatialUserObjectAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: user_object\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The UserObject UserObject to get values from.  Note that the UserObject _must_ implement the spatialValue() virtual function!\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/TotalFreeEnergy\n    description: |\n      Total free energy (both the bulk and gradient parts), where the bulk free energy has been defined in a material\n    parameters:\n    - name: additional_free_energy\n      required: No\n      default: !!str 0\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled variable holding additional free energy contributions to be summed up\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: f_name\n      required: No\n      default: !!str F\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n         Base name of the free energy function\n    - name: interfacial_vars\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variable names that contribute to interfacial energy\n    - name: kappa_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Vector of kappa names corresponding to each variable name in interfacial_vars in the same order.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str TotalFreeEnergy\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/VariableGradientComponent\n    description: |\n      Creates a field with consisting of one component of a coupled variable.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z\n      description: |\n        The gradient component to compute\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: gradient_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable from which to compute the gradient component\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str VariableGradientComponent\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/VariableTimeIntegrationAux\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: coefficient\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        A simple coefficient\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: order\n      required: No\n      default: !!str 2\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The order of global truncation error: midpoint=1, trapazoidal=2, Simpson=3\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str VariableTimeIntegrationAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: variable_to_integrate\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable to be integrated\n    subblocks:\n  - name: /Bounds/VectorMagnitudeAux\n    description: |\n      Creates a field representing the magnitude of three coupled variables using an Euclidean norm.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str VectorMagnitudeAux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-component of the vector\n    - name: y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-component of the vector\n    - name: z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-component of the vector\n    subblocks:\n- name: /Constraints\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /Constraints/*\n    description: |\n      \n    parameters:\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: isObjectAction\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates that this is a MooseObjectAction.\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /Constraints/CoupledTiedValueConstraint\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: master\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary ID associated with the master side\n    - name: master_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable on the master side of the domain\n    - name: normal_smoothing_distance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Distance from edge in parametric coordinates over which to smooth contact normal\n    - name: normal_smoothing_method\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Method to use to smooth normals (edge_based|nodal_normal_based)\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: FIRST SECOND THIRD FOURTH\n      description: |\n        The finite element order used for projections\n    - name: scaling\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        scaling factor to be applied to constraint equations\n    - name: slave\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary ID associated with the slave side\n    - name: tangential_tolerance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Tangential distance to extend edges of contact surfaces\n    - name: type\n      required: No\n      default: !!str CoupledTiedValueConstraint\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this constraint is applied to.\n    subblocks:\n  - name: /Constraints/EqualGradientConstraint\n    description: |\n      \n    parameters:\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Gradient component to constrain\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: interface\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The name of the interface.\n    - name: master_variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        Variable on master surface\n    - name: slave_variable\n      required: No\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        Variable on master surface\n    - name: type\n      required: No\n      default: !!str EqualGradientConstraint\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this constraint is applied to.\n    subblocks:\n  - name: /Constraints/EqualValueBoundaryConstraint\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: formulation\n      required: No\n      default: !!str penalty\n      cpp_type: MooseEnum\n      group_name: \n      options: penalty kinematic\n      description: |\n        Formulation used to calculate constraint - penalty or kinematic.\n    - name: master\n      required: No\n      default: !!str 4294967295\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The ID of the master node. If no ID is provided, first node of slave set is chosen.\n    - name: penalty\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The penalty used for the boundary term\n    - name: slave\n      required: No\n      default: !!str NaN\n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary ID associated with the slave side\n    - name: slave_node_ids\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        The IDs of the slave node\n    - name: type\n      required: No\n      default: !!str EqualValueBoundaryConstraint\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this constraint is applied to.\n    subblocks:\n  - name: /Constraints/EqualValueConstraint\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: interface\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The name of the interface.\n    - name: master_variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        Variable on master surface\n    - name: slave_variable\n      required: No\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        Variable on master surface\n    - name: type\n      required: No\n      default: !!str EqualValueConstraint\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this constraint is applied to.\n    subblocks:\n  - name: /Constraints/LinearNodalConstraint\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: formulation\n      required: No\n      default: !!str penalty\n      cpp_type: MooseEnum\n      group_name: \n      options: penalty kinematic\n      description: |\n        Formulation used to calculate constraint - penalty or kinematic.\n    - name: master\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        The master node IDs.\n    - name: penalty\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The penalty used for the boundary term\n    - name: slave_node_ids\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        The list of slave node ids\n    - name: slave_node_set\n      required: No\n      default: !!str NaN\n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary ID associated with the slave side\n    - name: type\n      required: No\n      default: !!str LinearNodalConstraint\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this constraint is applied to.\n    - name: weights\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The weights associated with the master node ids. Must be of the same size as master nodes\n    subblocks:\n  - name: /Constraints/TiedValueConstraint\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: master\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary ID associated with the master side\n    - name: master_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable on the master side of the domain\n    - name: normal_smoothing_distance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Distance from edge in parametric coordinates over which to smooth contact normal\n    - name: normal_smoothing_method\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Method to use to smooth normals (edge_based|nodal_normal_based)\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: FIRST SECOND THIRD FOURTH\n      description: |\n        The finite element order used for projections\n    - name: scaling\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        scaling factor to be applied to constraint equations\n    - name: slave\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary ID associated with the slave side\n    - name: tangential_tolerance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Tangential distance to extend edges of contact surfaces\n    - name: type\n      required: No\n      default: !!str TiedValueConstraint\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this constraint is applied to.\n    subblocks:\n- name: /Controls\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /Controls/*\n    description: |\n      \n    parameters:\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: isObjectAction\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates that this is a MooseObjectAction.\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /Controls/RealFunctionControl\n    description: |\n      Sets the value of a \'Real\' input parameters to the value of a provided function.\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The Controls that this control relies upon (i.e. must execute before this one)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str initial timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom subdomain\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The function to use for controlling the specified parameter.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: parameter\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The input parameter(s) to control. Specify a single parameter name and all parameters in all objects matching the name will be updated\n    - name: type\n      required: No\n      default: !!str RealFunctionControl\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Controls/TimePeriod\n    description: |\n      Control the enabled/disabled state of objects with time.\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The Controls that this control relies upon (i.e. must execute before this one)\n    - name: disable_objects\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        A list of object tags to disable.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: enable_objects\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        A list of object tags to enable.\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The time at which the objects are to be enable/disabled.\n    - name: execute_on\n      required: No\n      default: !!str initial timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom subdomain\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: set_outside_of_range\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When true the disable/enable lists are set to opposite values when outside of the given time range.\n    - name: set_sync_times\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set the start and end time as execute sync times.\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The time at which the objects are to be enabled/disabled.\n    - name: type\n      required: No\n      default: !!str TimePeriod\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n- name: /DGKernels\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /DGKernels/*\n    description: |\n      \n    parameters:\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: isObjectAction\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates that this is a MooseObjectAction.\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /DGKernels/DGConvection\n    description: |\n      DG upwinding for the convection\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: type\n      required: No\n      default: !!str DGConvection\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    - name: velocity\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Velocity vector\n    subblocks:\n  - name: /DGKernels/DGDiffusion\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: diff\n      required: No\n      default: !!str 1\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The diffusion (or thermal conductivity or viscosity) coefficient.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: epsilon\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        epsilon\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: sigma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        sigma\n    - name: type\n      required: No\n      default: !!str DGDiffusion\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n- name: /Dampers\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /Dampers/*\n    description: |\n      \n    parameters:\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: isObjectAction\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates that this is a MooseObjectAction.\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /Dampers/BoundingValueElementDamper\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: max_value\n      required: No\n      default: !!str 1.79769e+308\n      cpp_type: double\n      group_name: \n      description: |\n        The maximum permissible iterative value for the variable.\n    - name: min_damping\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Minimum value of computed damping. Damping lower than this will result in an exception being thrown and cutting the time step\n    - name: min_value\n      required: No\n      default: !!str -1.79769e+308\n      cpp_type: double\n      group_name: \n      description: |\n        The minimum permissible iterative value for the variable.\n    - name: type\n      required: No\n      default: !!str BoundingValueElementDamper\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this damper operates on\n    subblocks:\n  - name: /Dampers/BoundingValueNodalDamper\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: max_value\n      required: No\n      default: !!str 1.79769e+308\n      cpp_type: double\n      group_name: \n      description: |\n        The maximum permissible iterative value for the variable.\n    - name: min_damping\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Minimum value of computed damping. Damping lower than this will result in an exception being thrown and cutting the time step\n    - name: min_value\n      required: No\n      default: !!str -1.79769e+308\n      cpp_type: double\n      group_name: \n      description: |\n        The minimum permissible iterative value for the variable.\n    - name: type\n      required: No\n      default: !!str BoundingValueNodalDamper\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this damper operates on\n    subblocks:\n  - name: /Dampers/ConstantDamper\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: damping\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The percentage (between 0 and 1) of the newton update to take.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: min_damping\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Minimum value of computed damping. Damping lower than this will result in an exception being thrown and cutting the time step\n    - name: type\n      required: No\n      default: !!str ConstantDamper\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Dampers/ElementJacobianDamper\n    description: |\n      Damper that limits the change in element Jacobians\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: displacements\n      required: No\n      default: !!str \n      cpp_type: std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >\n      group_name: \n      description: |\n        The nonlinear displacement variables\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: max_increment\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        The maximum permissible relative increment in the Jacobian per Newton iteration\n    - name: min_damping\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Minimum value of computed damping. Damping lower than this will result in an exception being thrown and cutting the time step\n    - name: type\n      required: No\n      default: !!str ElementJacobianDamper\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Dampers/MaxIncrement\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: max_increment\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The maximum newton increment for the variable.\n    - name: min_damping\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Minimum value of computed damping. Damping lower than this will result in an exception being thrown and cutting the time step\n    - name: type\n      required: No\n      default: !!str MaxIncrement\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this damper operates on\n    subblocks:\n- name: /Debug\n  description: |\n    \n  parameters:\n  - name: inactive\n    required: No\n    default: !!str \n    cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n    group_name: \n    description: |\n      If specified blocks matching these identifiers will be skipped.\n  - name: show_actions\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Print out the actions being executed\n  - name: show_material_props\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Print out the material properties supplied for each block, face, neighbor, and/or sideset\n  - name: show_parser\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Shows parser block extraction and debugging information\n  - name: show_top_residuals\n    required: No\n    default: !!str 0\n    cpp_type: unsigned int\n    group_name: \n    description: |\n      The number of top residuals to print out (0 = no output)\n  - name: show_var_residual_norms\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Print the residual norms of the individual solution variables at each nonlinear iteration\n  - name: show_var_residual\n    required: No\n    default: !!str \n    cpp_type: std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >\n    group_name: \n    description: |\n      Variables for which residuals will be sent to the output file\n  subblocks:\n  - name: /Debug/MaterialDerivativeTest\n    description: |\n      \n    parameters:\n    subblocks:\n    - name: /Debug/MaterialDerivativeTest/*\n      description: |\n        \n      parameters:\n      - name: args\n        required: No\n        default: !!str \n        cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n        group_name: \n        description: |\n          Variables the tested material property depends on.\n      - name: derivative_order\n        required: No\n        default: !!str 0\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Highest order derivative to test derivatives of.\n      - name: inactive\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          If specified blocks matching these identifiers will be skipped.\n      - name: prop_name\n        required: Yes\n        default: !!str \n        cpp_type: MaterialPropertyName\n        group_name: \n        description: |\n          Name of the material property to test the derivatives of.\n      - name: prop_type\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: Real RankTwoTensor RankFourTensor\n        description: |\n          Type of the material property to test the derivatives of.\n      subblocks:\n- name: /DeprecatedBlock\n  description: |\n    \n  parameters:\n  - name: DEPRECATED\n    required: No\n    default: !!str \n    cpp_type: bool\n    group_name: \n    description: |\n      *** WARNING: This block is deprecated - DO NOT USE ***\n  - name: inactive\n    required: No\n    default: !!str \n    cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n    group_name: \n    description: |\n      If specified blocks matching these identifiers will be skipped.\n  subblocks:\n- name: /DiracKernels\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /DiracKernels/*\n    description: |\n      \n    parameters:\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: isObjectAction\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates that this is a MooseObjectAction.\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /DiracKernels/ConstantPointSource\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: drop_duplicate_points\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        By default points added to a DiracKernel are dropped if a point at the same locationhas been added before. If this option is set to false duplicate points are retainedand contribute to residual and Jacobian.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: point\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The x,y,z coordinates of the point\n    - name: type\n      required: No\n      default: !!str ConstantPointSource\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The value of the point source\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this kernel operates on\n    subblocks:\n  - name: /DiracKernels/FunctionDiracSource\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: drop_duplicate_points\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        By default points added to a DiracKernel are dropped if a point at the same locationhas been added before. If this option is set to false duplicate points are retainedand contribute to residual and Jacobian.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The function to use for controlling the specified dirac source.\n    - name: point\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        The x,y,z coordinates of the point\n    - name: type\n      required: No\n      default: !!str FunctionDiracSource\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this kernel operates on\n    subblocks:\n- name: /Distributions\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /Distributions/*\n    description: |\n      \n    parameters:\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: isObjectAction\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates that this is a MooseObjectAction.\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n- name: /DomainIntegral\n  description: |\n    \n  parameters:\n  - name: 2d\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Treat body as two-dimensional\n  - name: axis_2d\n    required: No\n    default: !!str 2\n    cpp_type: unsigned int\n    group_name: \n    description: |\n      Out of plane axis for models treated as two-dimensional (0=x, 1=y, 2=z)\n  - name: block\n    required: No\n    default: !!str \n    cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n    group_name: \n    description: |\n      The block ids where integrals are defined\n  - name: boundary\n    required: No\n    default: !!str \n    cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n    group_name: \n    description: |\n      The list of boundary IDs from the mesh where this boundary condition applies\n  - name: closed_loop\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Set of points forms forms a closed loop\n  - name: convert_J_to_K\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Convert J-integral to stress intensity factor K.\n  - name: crack_direction_method\n    required: Yes\n    default: !!str \n    cpp_type: MooseEnum\n    group_name: \n    options: CrackDirectionVector CrackMouth CurvedCrackFront\n    description: |\n      Method to determine direction of crack propagation.  Choices are: CrackDirectionVector CrackMouth CurvedCrackFront\n  - name: crack_direction_vector\n    required: No\n    default: !!str \n    cpp_type: libMesh::VectorValue<double>\n    group_name: \n    description: |\n      Direction of crack propagation\n  - name: crack_direction_vector_end_1\n    required: No\n    default: !!str \n    cpp_type: libMesh::VectorValue<double>\n    group_name: \n    description: |\n      Direction of crack propagation for the node at end 1 of the crack\n  - name: crack_direction_vector_end_2\n    required: No\n    default: !!str \n    cpp_type: libMesh::VectorValue<double>\n    group_name: \n    description: |\n      Direction of crack propagation for the node at end 2 of the crack\n  - name: crack_end_direction_method\n    required: No\n    default: !!str NoSpecialTreatment\n    cpp_type: MooseEnum\n    group_name: \n    options: NoSpecialTreatment CrackDirectionVector\n    description: |\n      Method to determine direction of crack propagation at ends of crack.  Choices are: NoSpecialTreatment CrackDirectionVector\n  - name: crack_front_points\n    required: No\n    default: !!str \n    cpp_type: std::vector<libMesh::Point, std::allocator<libMesh::Point> >\n    group_name: \n    description: |\n      Set of points to define crack front\n  - name: crack_mouth_boundary\n    required: No\n    default: !!str \n    cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n    group_name: \n    description: |\n      Boundaries whose average coordinate defines the crack mouth\n  - name: disp_x\n    required: No\n    default: !!str \n    cpp_type: VariableName\n    group_name: \n    description: |\n      The x displacement\n  - name: disp_y\n    required: No\n    default: !!str \n    cpp_type: VariableName\n    group_name: \n    description: |\n      The y displacement\n  - name: disp_z\n    required: No\n    default: !!str \n    cpp_type: VariableName\n    group_name: \n    description: |\n      The z displacement\n  - name: displacements\n    required: No\n    default: !!str \n    cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n    group_name: \n    description: |\n      The displacements appropriate for the simulation geometry and coordinate system\n  - name: eigenstrain_names\n    required: No\n    default: !!str \n    cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n    group_name: \n    description: |\n      List of eigenstrains applied in the strain calculation\n  - name: equivalent_k\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Calculate an equivalent K from KI, KII and KIII, assuming self-similar crack growth.\n  - name: family\n    required: No\n    default: !!str LAGRANGE\n    cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n    group_name: \n    description: |\n      Specifies the family of FE shape functions to use for q AuxVariables\n  - name: first_ring\n    required: No\n    default: !!str \n    cpp_type: unsigned int\n    group_name: \n    description: |\n      The number of rings of nodes to generate\n  - name: inactive\n    required: No\n    default: !!str \n    cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n    group_name: \n    description: |\n      If specified blocks matching these identifiers will be skipped.\n  - name: integrals\n    required: Yes\n    default: !!str \n    cpp_type: MultiMooseEnum\n    group_name: \n    options: JIntegral InteractionIntegralKI InteractionIntegralKII InteractionIntegralKIII InteractionIntegralT\n    description: |\n      Domain integrals to calculate.  Choices are: JIntegral InteractionIntegralKI InteractionIntegralKII InteractionIntegralKIII InteractionIntegralT\n  - name: intersecting_boundary\n    required: No\n    default: !!str \n    cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n    group_name: \n    description: |\n      Boundaries intersected by ends of crack\n  - name: j_integral_radius_inner\n    required: No\n    default: !!str \n    cpp_type: std::vector<double, std::allocator<double> >\n    group_name: \n    description: |\n      Radius for J-Integral calculation\n  - name: j_integral_radius_outer\n    required: No\n    default: !!str \n    cpp_type: std::vector<double, std::allocator<double> >\n    group_name: \n    description: |\n      Radius for J-Integral calculation\n  - name: last_ring\n    required: No\n    default: !!str \n    cpp_type: unsigned int\n    group_name: \n    description: |\n      The number of rings of nodes to generate\n  - name: order\n    required: No\n    default: !!str FIRST\n    cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n    group_name: \n    description: |\n      Specifies the order of the FE shape function to use for q AuxVariables\n  - name: output_q\n    required: No\n    default: !!str 1\n    cpp_type: bool\n    group_name: \n    description: |\n      Output q\n  - name: output_variable\n    required: No\n    default: !!str \n    cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n    group_name: \n    description: |\n      Variable values to be reported along the crack front\n  - name: poissons_ratio\n    required: No\n    default: !!str \n    cpp_type: double\n    group_name: \n    description: |\n      Poisson\'s ratio\n  - name: position_type\n    required: No\n    default: !!str Distance\n    cpp_type: MooseEnum\n    group_name: \n    options: Angle Distance\n    description: |\n      The method used to calculate position along crack front.  Options are: Angle Distance\n  - name: q_function_rings\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Generate rings of nodes for q-function\n  - name: q_function_type\n    required: No\n    default: !!str Geometry\n    cpp_type: MooseEnum\n    group_name: \n    options: Geometry Topology\n    description: |\n      The method used to define the integration domain. Options are: Geometry Topology\n  - name: radius_inner\n    required: No\n    default: !!str \n    cpp_type: std::vector<double, std::allocator<double> >\n    group_name: \n    description: |\n      Inner radius for volume integral domain\n  - name: radius_outer\n    required: No\n    default: !!str \n    cpp_type: std::vector<double, std::allocator<double> >\n    group_name: \n    description: |\n      Outer radius for volume integral domain\n  - name: ring_first\n    required: No\n    default: !!str \n    cpp_type: unsigned int\n    group_name: \n    description: |\n      The first ring of elements for volume integral domain\n  - name: ring_last\n    required: No\n    default: !!str \n    cpp_type: unsigned int\n    group_name: \n    description: |\n      The last ring of elements for volume integral domain\n  - name: solid_mechanics\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Set to true if the solid_mechanics system is used. This option is only needed for interaction integrals.\n  - name: symmetry_plane\n    required: No\n    default: !!str \n    cpp_type: unsigned int\n    group_name: \n    description: |\n      Account for a symmetry plane passing through the plane of the crack, normal to the specified axis (0=x, 1=y, 2=z)\n  - name: t_stress\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Calculate T-stress\n  - name: temp\n    required: No\n    default: !!str \n    cpp_type: VariableName\n    group_name: \n    description: |\n      The temperature\n  - name: youngs_modulus\n    required: No\n    default: !!str \n    cpp_type: double\n    group_name: \n    description: |\n      Young\'s modulus\n  subblocks:\n- name: /Executioner\n  description: |\n    \n  parameters:\n  - name: inactive\n    required: No\n    default: !!str \n    cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n    group_name: \n    description: |\n      If specified blocks matching these identifiers will be skipped.\n  - name: isObjectAction\n    required: No\n    default: !!str 1\n    cpp_type: bool\n    group_name: \n    description: |\n      Indicates that this is a MooseObjectAction.\n  - name: type\n    required: Yes\n    default: !!str \n    cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n    group_name: \n    description: |\n      A string representing the Moose Object that will be built by this Action\n  subblocks:\n  - name: /Executioner/<type>\n    description: |\n      \n    parameters:\n    subblocks:\n    - name: /Executioner/<type>/Eigenvalue\n      description: |\n        Eigenvalue solves a standard/generalized eigenvaue problem\n      parameters:\n      - name: compute_initial_residual_before_preset_bcs\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Solver\'\n        description: |\n          Use the residual norm computed *before* PresetBCs are imposed in relative convergence check\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \'Advanced\'\n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: enable\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Set the enabled status of the MooseObject.\n      - name: l_abs_step_tol\n        required: No\n        default: !!str -1\n        cpp_type: double\n        group_name: \'Solver\'\n        description: |\n          Linear Absolute Step Tolerance\n      - name: l_max_its\n        required: No\n        default: !!str 10000\n        cpp_type: unsigned int\n        group_name: \'Solver\'\n        description: |\n          Max Linear Iterations\n      - name: l_tol\n        required: No\n        default: !!str 1e-05\n        cpp_type: double\n        group_name: \'Solver\'\n        description: |\n          Linear Tolerance\n      - name: line_search\n        required: No\n        default: !!str default\n        cpp_type: MooseEnum\n        group_name: \n        options: default shell none basic l2 bt cp\n        description: |\n          Specifies the line search type (Note: none = basic)\n      - name: mffd_type\n        required: No\n        default: !!str wp\n        cpp_type: MooseEnum\n        group_name: \n        options: wp ds\n        description: |\n          Specifies the finite differencing type for Jacobian-free solve types. Note that the default is wp (for Walker and Pernice).\n      - name: nl_abs_step_tol\n        required: No\n        default: !!str 1e-50\n        cpp_type: double\n        group_name: \'Solver\'\n        description: |\n          Nonlinear Absolute step Tolerance\n      - name: nl_abs_tol\n        required: No\n        default: !!str 1e-50\n        cpp_type: double\n        group_name: \'Solver\'\n        description: |\n          Nonlinear Absolute Tolerance\n      - name: nl_max_funcs\n        required: No\n        default: !!str 10000\n        cpp_type: unsigned int\n        group_name: \'Solver\'\n        description: |\n          Max Nonlinear solver function evaluations\n      - name: nl_max_its\n        required: No\n        default: !!str 50\n        cpp_type: unsigned int\n        group_name: \'Solver\'\n        description: |\n          Max Nonlinear Iterations\n      - name: nl_rel_step_tol\n        required: No\n        default: !!str 1e-50\n        cpp_type: double\n        group_name: \'Solver\'\n        description: |\n          Nonlinear Relative step Tolerance\n      - name: nl_rel_tol\n        required: No\n        default: !!str 1e-08\n        cpp_type: double\n        group_name: \'Solver\'\n        description: |\n          Nonlinear Relative Tolerance\n      - name: no_fe_reinit\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Specifies whether or not to reinitialize FEs\n      - name: petsc_options\n        required: No\n        default: !!str \n        cpp_type: MultiMooseEnum\n        group_name: \n        options: -dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew\n        description: |\n          Singleton PETSc options\n      - name: petsc_options_iname\n        required: No\n        default: !!str \n        cpp_type: MultiMooseEnum\n        group_name: \n        options: -ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type\n        description: |\n          Names of PETSc name/value pairs\n      - name: petsc_options_value\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n      - name: restart_file_base\n        required: No\n        default: !!str \n        cpp_type: FileNameNoExtension\n        group_name: \'Restart\'\n        description: |\n          File base name used for restart\n      - name: solve_type\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: PJFNK JFNK NEWTON FD LINEAR\n        description: |\n          PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n      - name: splitting\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n      - name: type\n        required: No\n        default: !!str Eigenvalue\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      subblocks:\n    - name: /Executioner/<type>/InversePowerMethod\n      description: |\n        \n      parameters:\n      - name: Chebyshev_acceleration_on\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          If Chebyshev acceleration is turned on\n      - name: auto_initialization\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          True to ask the solver to set initial\n      - name: bx_norm\n        required: Yes\n        default: !!str \n        cpp_type: PostprocessorName\n        group_name: \n        description: |\n          To evaluate |Bx| for the eigenvalue\n      - name: compute_initial_residual_before_preset_bcs\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Solver\'\n        description: |\n          Use the residual norm computed *before* PresetBCs are imposed in relative convergence check\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \'Advanced\'\n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: eig_check_tol\n        required: No\n        default: !!str 1e-06\n        cpp_type: double\n        group_name: \n        description: |\n          Eigenvalue convergence tolerance\n      - name: enable\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Set the enabled status of the MooseObject.\n      - name: k0\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          Initial guess of the eigenvalue\n      - name: l_abs_step_tol\n        required: No\n        default: !!str -1\n        cpp_type: double\n        group_name: \'Solver\'\n        description: |\n          Linear Absolute Step Tolerance\n      - name: l_max_its\n        required: No\n        default: !!str 10000\n        cpp_type: unsigned int\n        group_name: \'Solver\'\n        description: |\n          Max Linear Iterations\n      - name: l_tol\n        required: No\n        default: !!str 1e-05\n        cpp_type: double\n        group_name: \'Solver\'\n        description: |\n          Linear Tolerance\n      - name: line_search\n        required: No\n        default: !!str default\n        cpp_type: MooseEnum\n        group_name: \n        options: default shell none basic l2 bt cp\n        description: |\n          Specifies the line search type (Note: none = basic)\n      - name: max_power_iterations\n        required: No\n        default: !!str 300\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          The maximum number of power iterations\n      - name: mffd_type\n        required: No\n        default: !!str wp\n        cpp_type: MooseEnum\n        group_name: \n        options: wp ds\n        description: |\n          Specifies the finite differencing type for Jacobian-free solve types. Note that the default is wp (for Walker and Pernice).\n      - name: min_power_iterations\n        required: No\n        default: !!str 1\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Minimum number of power iterations\n      - name: nl_abs_step_tol\n        required: No\n        default: !!str 1e-50\n        cpp_type: double\n        group_name: \'Solver\'\n        description: |\n          Nonlinear Absolute step Tolerance\n      - name: nl_abs_tol\n        required: No\n        default: !!str 1e-50\n        cpp_type: double\n        group_name: \'Solver\'\n        description: |\n          Nonlinear Absolute Tolerance\n      - name: nl_max_funcs\n        required: No\n        default: !!str 10000\n        cpp_type: unsigned int\n        group_name: \'Solver\'\n        description: |\n          Max Nonlinear solver function evaluations\n      - name: nl_max_its\n        required: No\n        default: !!str 50\n        cpp_type: unsigned int\n        group_name: \'Solver\'\n        description: |\n          Max Nonlinear Iterations\n      - name: nl_rel_step_tol\n        required: No\n        default: !!str 1e-50\n        cpp_type: double\n        group_name: \'Solver\'\n        description: |\n          Nonlinear Relative step Tolerance\n      - name: nl_rel_tol\n        required: No\n        default: !!str 1e-08\n        cpp_type: double\n        group_name: \'Solver\'\n        description: |\n          Nonlinear Relative Tolerance\n      - name: no_fe_reinit\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Specifies whether or not to reinitialize FEs\n      - name: normal_factor\n        required: No\n        default: !!str \n        cpp_type: double\n        group_name: \'Normalization\'\n        description: |\n          Normalize x to make |x| equal to this factor\n      - name: normalization\n        required: No\n        default: !!str \n        cpp_type: PostprocessorName\n        group_name: \'Normalization\'\n        description: |\n          To evaluate |x| for normalization\n      - name: output_before_normalization\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Normalization\'\n        description: |\n          True to output a step before normalization\n      - name: petsc_options\n        required: No\n        default: !!str \n        cpp_type: MultiMooseEnum\n        group_name: \n        options: -dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew\n        description: |\n          Singleton PETSc options\n      - name: petsc_options_iname\n        required: No\n        default: !!str \n        cpp_type: MultiMooseEnum\n        group_name: \n        options: -ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type\n        description: |\n          Names of PETSc name/value pairs\n      - name: petsc_options_value\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n      - name: pfactor\n        required: No\n        default: !!str 0.01\n        cpp_type: double\n        group_name: \n        description: |\n          Reduce residual norm per power iteration by this factor\n      - name: restart_file_base\n        required: No\n        default: !!str \n        cpp_type: FileNameNoExtension\n        group_name: \'Restart\'\n        description: |\n          File base name used for restart\n      - name: sol_check_tol\n        required: No\n        default: !!str 1.79769e+308\n        cpp_type: double\n        group_name: \n        description: |\n          Convergence tolerance on |x-x_previous| when provided\n      - name: solve_type\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: PJFNK JFNK NEWTON FD LINEAR\n        description: |\n          PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n      - name: splitting\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n      - name: time\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \'Advanced\'\n        description: |\n          System time\n      - name: type\n        required: No\n        default: !!str InversePowerMethod\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: xdiff\n        required: No\n        default: !!str \n        cpp_type: PostprocessorName\n        group_name: \n        description: |\n          To evaluate |x-x_previous| for power iterations\n      subblocks:\n    - name: /Executioner/<type>/NonlinearEigen\n      description: |\n        \n      parameters:\n      - name: auto_initialization\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          True to ask the solver to set initial\n      - name: bx_norm\n        required: Yes\n        default: !!str \n        cpp_type: PostprocessorName\n        group_name: \n        description: |\n          To evaluate |Bx| for the eigenvalue\n      - name: compute_initial_residual_before_preset_bcs\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Solver\'\n        description: |\n          Use the residual norm computed *before* PresetBCs are imposed in relative convergence check\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \'Advanced\'\n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: enable\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Set the enabled status of the MooseObject.\n      - name: free_power_iterations\n        required: No\n        default: !!str 4\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          The number of free power iterations\n      - name: k0\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          Initial guess of the eigenvalue\n      - name: l_abs_step_tol\n        required: No\n        default: !!str -1\n        cpp_type: double\n        group_name: \'Solver\'\n        description: |\n          Linear Absolute Step Tolerance\n      - name: l_max_its\n        required: No\n        default: !!str 10000\n        cpp_type: unsigned int\n        group_name: \'Solver\'\n        description: |\n          Max Linear Iterations\n      - name: l_tol\n        required: No\n        default: !!str 1e-05\n        cpp_type: double\n        group_name: \'Solver\'\n        description: |\n          Linear Tolerance\n      - name: line_search\n        required: No\n        default: !!str default\n        cpp_type: MooseEnum\n        group_name: \n        options: default shell none basic l2 bt cp\n        description: |\n          Specifies the line search type (Note: none = basic)\n      - name: mffd_type\n        required: No\n        default: !!str wp\n        cpp_type: MooseEnum\n        group_name: \n        options: wp ds\n        description: |\n          Specifies the finite differencing type for Jacobian-free solve types. Note that the default is wp (for Walker and Pernice).\n      - name: nl_abs_step_tol\n        required: No\n        default: !!str 1e-50\n        cpp_type: double\n        group_name: \'Solver\'\n        description: |\n          Nonlinear Absolute step Tolerance\n      - name: nl_abs_tol\n        required: No\n        default: !!str 1e-50\n        cpp_type: double\n        group_name: \'Solver\'\n        description: |\n          Nonlinear Absolute Tolerance\n      - name: nl_max_funcs\n        required: No\n        default: !!str 10000\n        cpp_type: unsigned int\n        group_name: \'Solver\'\n        description: |\n          Max Nonlinear solver function evaluations\n      - name: nl_max_its\n        required: No\n        default: !!str 50\n        cpp_type: unsigned int\n        group_name: \'Solver\'\n        description: |\n          Max Nonlinear Iterations\n      - name: nl_rel_step_tol\n        required: No\n        default: !!str 1e-50\n        cpp_type: double\n        group_name: \'Solver\'\n        description: |\n          Nonlinear Relative step Tolerance\n      - name: nl_rel_tol\n        required: No\n        default: !!str 1e-08\n        cpp_type: double\n        group_name: \'Solver\'\n        description: |\n          Nonlinear Relative Tolerance\n      - name: no_fe_reinit\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Specifies whether or not to reinitialize FEs\n      - name: normal_factor\n        required: No\n        default: !!str \n        cpp_type: double\n        group_name: \'Normalization\'\n        description: |\n          Normalize x to make |x| equal to this factor\n      - name: normalization\n        required: No\n        default: !!str \n        cpp_type: PostprocessorName\n        group_name: \'Normalization\'\n        description: |\n          To evaluate |x| for normalization\n      - name: output_after_power_iterations\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          True to output solution after free power iterations\n      - name: output_before_normalization\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Normalization\'\n        description: |\n          True to output a step before normalization\n      - name: petsc_options\n        required: No\n        default: !!str \n        cpp_type: MultiMooseEnum\n        group_name: \n        options: -dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew\n        description: |\n          Singleton PETSc options\n      - name: petsc_options_iname\n        required: No\n        default: !!str \n        cpp_type: MultiMooseEnum\n        group_name: \n        options: -ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type\n        description: |\n          Names of PETSc name/value pairs\n      - name: petsc_options_value\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n      - name: pfactor\n        required: No\n        default: !!str 0.01\n        cpp_type: double\n        group_name: \n        description: |\n          The factor of residual to be reduced per free power iteration or per nonlinear step\n      - name: restart_file_base\n        required: No\n        default: !!str \n        cpp_type: FileNameNoExtension\n        group_name: \'Restart\'\n        description: |\n          File base name used for restart\n      - name: solve_type\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: PJFNK JFNK NEWTON FD LINEAR\n        description: |\n          PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n      - name: source_abs_tol\n        required: No\n        default: !!str 1e-06\n        cpp_type: double\n        group_name: \n        description: |\n          Absolute tolernance on residual norm\n      - name: source_rel_tol\n        required: No\n        default: !!str 1e-50\n        cpp_type: double\n        group_name: \n        description: |\n          Relative tolernance on residual norm after free power iterations\n      - name: splitting\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n      - name: time\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \'Advanced\'\n        description: |\n          System time\n      - name: type\n        required: No\n        default: !!str NonlinearEigen\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      subblocks:\n    - name: /Executioner/<type>/Steady\n      description: |\n        \n      parameters:\n      - name: compute_initial_residual_before_preset_bcs\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Solver\'\n        description: |\n          Use the residual norm computed *before* PresetBCs are imposed in relative convergence check\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \'Advanced\'\n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: enable\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Set the enabled status of the MooseObject.\n      - name: l_abs_step_tol\n        required: No\n        default: !!str -1\n        cpp_type: double\n        group_name: \'Solver\'\n        description: |\n          Linear Absolute Step Tolerance\n      - name: l_max_its\n        required: No\n        default: !!str 10000\n        cpp_type: unsigned int\n        group_name: \'Solver\'\n        description: |\n          Max Linear Iterations\n      - name: l_tol\n        required: No\n        default: !!str 1e-05\n        cpp_type: double\n        group_name: \'Solver\'\n        description: |\n          Linear Tolerance\n      - name: line_search\n        required: No\n        default: !!str default\n        cpp_type: MooseEnum\n        group_name: \n        options: default shell none basic l2 bt cp\n        description: |\n          Specifies the line search type (Note: none = basic)\n      - name: mffd_type\n        required: No\n        default: !!str wp\n        cpp_type: MooseEnum\n        group_name: \n        options: wp ds\n        description: |\n          Specifies the finite differencing type for Jacobian-free solve types. Note that the default is wp (for Walker and Pernice).\n      - name: nl_abs_step_tol\n        required: No\n        default: !!str 1e-50\n        cpp_type: double\n        group_name: \'Solver\'\n        description: |\n          Nonlinear Absolute step Tolerance\n      - name: nl_abs_tol\n        required: No\n        default: !!str 1e-50\n        cpp_type: double\n        group_name: \'Solver\'\n        description: |\n          Nonlinear Absolute Tolerance\n      - name: nl_max_funcs\n        required: No\n        default: !!str 10000\n        cpp_type: unsigned int\n        group_name: \'Solver\'\n        description: |\n          Max Nonlinear solver function evaluations\n      - name: nl_max_its\n        required: No\n        default: !!str 50\n        cpp_type: unsigned int\n        group_name: \'Solver\'\n        description: |\n          Max Nonlinear Iterations\n      - name: nl_rel_step_tol\n        required: No\n        default: !!str 1e-50\n        cpp_type: double\n        group_name: \'Solver\'\n        description: |\n          Nonlinear Relative step Tolerance\n      - name: nl_rel_tol\n        required: No\n        default: !!str 1e-08\n        cpp_type: double\n        group_name: \'Solver\'\n        description: |\n          Nonlinear Relative Tolerance\n      - name: no_fe_reinit\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Specifies whether or not to reinitialize FEs\n      - name: petsc_options\n        required: No\n        default: !!str \n        cpp_type: MultiMooseEnum\n        group_name: \n        options: -dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew\n        description: |\n          Singleton PETSc options\n      - name: petsc_options_iname\n        required: No\n        default: !!str \n        cpp_type: MultiMooseEnum\n        group_name: \n        options: -ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type\n        description: |\n          Names of PETSc name/value pairs\n      - name: petsc_options_value\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n      - name: restart_file_base\n        required: No\n        default: !!str \n        cpp_type: FileNameNoExtension\n        group_name: \'Restart\'\n        description: |\n          File base name used for restart\n      - name: solve_type\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: PJFNK JFNK NEWTON FD LINEAR\n        description: |\n          PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n      - name: splitting\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n      - name: type\n        required: No\n        default: !!str Steady\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      subblocks:\n    - name: /Executioner/<type>/Transient\n      description: |\n        \n      parameters:\n      - name: abort_on_solve_fail\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          abort if solve not converged rather than cut timestep\n      - name: compute_initial_residual_before_preset_bcs\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Solver\'\n        description: |\n          Use the residual norm computed *before* PresetBCs are imposed in relative convergence check\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \'Advanced\'\n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: dt\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          The timestep size between solves\n      - name: dtmax\n        required: No\n        default: !!str 1e+30\n        cpp_type: double\n        group_name: \'Advanced\'\n        description: |\n          The maximum timestep size in an adaptive run\n      - name: dtmin\n        required: No\n        default: !!str 2e-14\n        cpp_type: double\n        group_name: \'Advanced\'\n        description: |\n          The minimum timestep size in an adaptive run\n      - name: enable\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Set the enabled status of the MooseObject.\n      - name: end_time\n        required: No\n        default: !!str 1e+30\n        cpp_type: double\n        group_name: \n        description: |\n          The end time of the simulation\n      - name: l_abs_step_tol\n        required: No\n        default: !!str -1\n        cpp_type: double\n        group_name: \'Solver\'\n        description: |\n          Linear Absolute Step Tolerance\n      - name: l_max_its\n        required: No\n        default: !!str 10000\n        cpp_type: unsigned int\n        group_name: \'Solver\'\n        description: |\n          Max Linear Iterations\n      - name: l_tol\n        required: No\n        default: !!str 1e-05\n        cpp_type: double\n        group_name: \'Solver\'\n        description: |\n          Linear Tolerance\n      - name: line_search\n        required: No\n        default: !!str default\n        cpp_type: MooseEnum\n        group_name: \n        options: default shell none basic l2 bt cp\n        description: |\n          Specifies the line search type (Note: none = basic)\n      - name: max_xfem_update\n        required: No\n        default: !!str 4294967295\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Maximum number of times to update XFEM crack topology in a step due to evolving cracks\n      - name: mffd_type\n        required: No\n        default: !!str wp\n        cpp_type: MooseEnum\n        group_name: \n        options: wp ds\n        description: |\n          Specifies the finite differencing type for Jacobian-free solve types. Note that the default is wp (for Walker and Pernice).\n      - name: n_startup_steps\n        required: No\n        default: !!str 0\n        cpp_type: int\n        group_name: \'Advanced\'\n        description: |\n          The number of timesteps during startup\n      - name: nl_abs_step_tol\n        required: No\n        default: !!str 1e-50\n        cpp_type: double\n        group_name: \'Solver\'\n        description: |\n          Nonlinear Absolute step Tolerance\n      - name: nl_abs_tol\n        required: No\n        default: !!str 1e-50\n        cpp_type: double\n        group_name: \'Solver\'\n        description: |\n          Nonlinear Absolute Tolerance\n      - name: nl_max_funcs\n        required: No\n        default: !!str 10000\n        cpp_type: unsigned int\n        group_name: \'Solver\'\n        description: |\n          Max Nonlinear solver function evaluations\n      - name: nl_max_its\n        required: No\n        default: !!str 50\n        cpp_type: unsigned int\n        group_name: \'Solver\'\n        description: |\n          Max Nonlinear Iterations\n      - name: nl_rel_step_tol\n        required: No\n        default: !!str 1e-50\n        cpp_type: double\n        group_name: \'Solver\'\n        description: |\n          Nonlinear Relative step Tolerance\n      - name: nl_rel_tol\n        required: No\n        default: !!str 1e-08\n        cpp_type: double\n        group_name: \'Solver\'\n        description: |\n          Nonlinear Relative Tolerance\n      - name: no_fe_reinit\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Specifies whether or not to reinitialize FEs\n      - name: num_steps\n        required: No\n        default: !!str 4294967295\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          The number of timesteps in a transient run\n      - name: petsc_options\n        required: No\n        default: !!str \n        cpp_type: MultiMooseEnum\n        group_name: \n        options: -dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew\n        description: |\n          Singleton PETSc options\n      - name: petsc_options_iname\n        required: No\n        default: !!str \n        cpp_type: MultiMooseEnum\n        group_name: \n        options: -ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type\n        description: |\n          Names of PETSc name/value pairs\n      - name: petsc_options_value\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n      - name: picard_abs_tol\n        required: No\n        default: !!str 1e-50\n        cpp_type: double\n        group_name: \'Picard\'\n        description: |\n          The absolute nonlinear residual to shoot for during Picard iterations.  This check is performed based on the Master app\'s nonlinear residual.\n      - name: picard_max_its\n        required: No\n        default: !!str 1\n        cpp_type: unsigned int\n        group_name: \'Picard\'\n        description: |\n          Number of times each timestep will be solved.  Mainly used when wanting to do Picard iterations with MultiApps that are set to execute_on timestep_end or timestep_begin\n      - name: picard_rel_tol\n        required: No\n        default: !!str 1e-08\n        cpp_type: double\n        group_name: \'Picard\'\n        description: |\n          The relative nonlinear residual drop to shoot for during Picard iterations.  This check is performed based on the Master app\'s nonlinear residual.\n      - name: relaxation_factor\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \'Picard\'\n        description: |\n          Fraction of newly computed value to keep.Set between 0 and 2.\n      - name: relaxed_variables\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \'Picard\'\n        description: |\n          List of variables to relax during Picard Iteration\n      - name: reset_dt\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          Use when restarting a calculation to force a change in dt.\n      - name: restart_file_base\n        required: No\n        default: !!str \n        cpp_type: FileNameNoExtension\n        group_name: \'Restart\'\n        description: |\n          File base name used for restart\n      - name: scheme\n        required: No\n        default: !!str implicit-euler\n        cpp_type: MooseEnum\n        group_name: \n        options: implicit-euler explicit-euler crank-nicolson bdf2 explicit-midpoint dirk explicit-tvd-rk-2\n        description: |\n          Time integration scheme used.\n      - name: solve_type\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: PJFNK JFNK NEWTON FD LINEAR\n        description: |\n          PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n      - name: splitting\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n      - name: ss_check_tol\n        required: No\n        default: !!str 1e-08\n        cpp_type: double\n        group_name: \'Advanced\'\n        description: |\n          Whenever the relative residual changes by less than this the solution will be considered to be at steady state.\n      - name: ss_tmin\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \'Advanced\'\n        description: |\n          Minimum number of timesteps to take before checking for steady state conditions.\n      - name: start_time\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \'Advanced\'\n        description: |\n          The start time of the simulation\n      - name: time_period_ends\n        required: No\n        default: !!str \n        cpp_type: std::vector<double, std::allocator<double> >\n        group_name: \'Time Periods\'\n        description: |\n          The end times of time periods\n      - name: time_period_starts\n        required: No\n        default: !!str \n        cpp_type: std::vector<double, std::allocator<double> >\n        group_name: \'Time Periods\'\n        description: |\n          The start times of time periods\n      - name: time_periods\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \'Time Periods\'\n        description: |\n          The names of periods\n      - name: timestep_tolerance\n        required: No\n        default: !!str 2e-14\n        cpp_type: double\n        group_name: \'Advanced\'\n        description: |\n          the tolerance setting for final timestep size and sync times\n      - name: trans_ss_check\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Whether or not to check for steady state conditions\n      - name: type\n        required: No\n        default: !!str Transient\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: use_multiapp_dt\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          If true then the dt for the simulation will be chosen by the MultiApps.  If false (the default) then the minimum over the master dt and the MultiApps is used\n      - name: verbose\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          Print detailed diagnostics on timestep calculation\n      subblocks:\n  - name: /Executioner/Adaptivity\n    description: |\n      \n    parameters:\n    - name: coarsen_fraction\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The fraction of elements or error to coarsen. Should be between 0 and 1.\n    - name: cycles_per_step\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of adaptivity cycles per step\n    - name: error_estimator\n      required: No\n      default: !!str KellyErrorEstimator\n      cpp_type: MooseEnum\n      group_name: \n      options: KellyErrorEstimator LaplacianErrorEstimator PatchRecoveryErrorEstimator\n      description: |\n        The class name of the error estimator you want to use.\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: initial_adaptivity\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of adaptivity steps to perform using the initial conditions\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of time steps betweeen each adaptivity phase\n    - name: max_h_level\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of times a single element can be refined. If 0 then infinite.\n    - name: print_changed_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Determines whether information about the mesh is printed when adaptivity occurs\n    - name: recompute_markers_during_cycles\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Recompute markers during adaptivity cycles\n    - name: refine_fraction\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The fraction of elements or error to refine. Should be between 0 and 1.\n    - name: show_initial_progress\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Show the progress of the initial adaptivity\n    - name: start_time\n      required: No\n      default: !!str -1.79769e+308\n      cpp_type: double\n      group_name: \n      description: |\n        The time that adaptivity will be active after.\n    - name: steps\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of adaptivity steps to perform at any one time for steady state\n    - name: stop_time\n      required: No\n      default: !!str 1.79769e+308\n      cpp_type: double\n      group_name: \n      description: |\n        The time after which adaptivity will no longer be active.\n    - name: weight_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        List of names of variables that will be associated with weight_values\n    - name: weight_values\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        List of values between 0 and 1 to weight the associated weight_names error by\n    subblocks:\n  - name: /Executioner/Predictor\n    description: |\n      \n    parameters:\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: isObjectAction\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates that this is a MooseObjectAction.\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n    - name: /Executioner/Predictor/<type>\n      description: |\n        \n      parameters:\n      subblocks:\n      - name: /Executioner/Predictor/<type>/AdamsPredictor\n        description: |\n          \n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \'Advanced\'\n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: enable\n          required: No\n          default: !!str 1\n          cpp_type: bool\n          group_name: \'Advanced\'\n          description: |\n            Set the enabled status of the MooseObject.\n        - name: order\n          required: No\n          default: !!str 2\n          cpp_type: int\n          group_name: \n          description: |\n            The maximum reachable order of the Adams-Bashforth Predictor\n        - name: scale\n          required: Yes\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            The scale factor for the predictor (can range from 0 to 1)\n        - name: skip_times\n          required: No\n          default: !!str \n          cpp_type: std::vector<double, std::allocator<double> >\n          group_name: \n          description: |\n            Skip the predictor if the current solution time is in this list of times\n        - name: skip_times_old\n          required: No\n          default: !!str \n          cpp_type: std::vector<double, std::allocator<double> >\n          group_name: \n          description: |\n            Skip the predictor if the previous solution time is in this list of times\n        - name: type\n          required: No\n          default: !!str AdamsPredictor\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/Predictor/<type>/SimplePredictor\n        description: |\n          \n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \'Advanced\'\n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: enable\n          required: No\n          default: !!str 1\n          cpp_type: bool\n          group_name: \'Advanced\'\n          description: |\n            Set the enabled status of the MooseObject.\n        - name: scale\n          required: Yes\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            The scale factor for the predictor (can range from 0 to 1)\n        - name: skip_times\n          required: No\n          default: !!str \n          cpp_type: std::vector<double, std::allocator<double> >\n          group_name: \n          description: |\n            Skip the predictor if the current solution time is in this list of times\n        - name: skip_times_old\n          required: No\n          default: !!str \n          cpp_type: std::vector<double, std::allocator<double> >\n          group_name: \n          description: |\n            Skip the predictor if the previous solution time is in this list of times\n        - name: type\n          required: No\n          default: !!str SimplePredictor\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n  - name: /Executioner/Quadrature\n    description: |\n      \n    parameters:\n    - name: element_order\n      required: No\n      default: !!str AUTO\n      cpp_type: MooseEnum\n      group_name: \n      options: AUTO CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH TENTH ELEVENTH TWELFTH THIRTEENTH FOURTEENTH FIFTEENTH SIXTEENTH SEVENTEENTH EIGHTTEENTH NINTEENTH TWENTIETH\n      description: |\n        Order of the quadrature for elements\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: order\n      required: No\n      default: !!str AUTO\n      cpp_type: MooseEnum\n      group_name: \n      options: AUTO CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH TENTH ELEVENTH TWELFTH THIRTEENTH FOURTEENTH FIFTEENTH SIXTEENTH SEVENTEENTH EIGHTTEENTH NINTEENTH TWENTIETH\n      description: |\n        Order of the quadrature\n    - name: side_order\n      required: No\n      default: !!str AUTO\n      cpp_type: MooseEnum\n      group_name: \n      options: AUTO CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH TENTH ELEVENTH TWELFTH THIRTEENTH FOURTEENTH FIFTEENTH SIXTEENTH SEVENTEENTH EIGHTTEENTH NINTEENTH TWENTIETH\n      description: |\n        Order of the quadrature for sides\n    - name: type\n      required: No\n      default: !!str GAUSS\n      cpp_type: MooseEnum\n      group_name: \n      options: CLOUGH CONICAL GAUSS GRID MONOMIAL SIMPSON TRAP GAUSS_LOBATTO\n      description: |\n        Type of the quadrature rule\n    subblocks:\n  - name: /Executioner/TimeIntegrator\n    description: |\n      \n    parameters:\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: isObjectAction\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates that this is a MooseObjectAction.\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n    - name: /Executioner/TimeIntegrator/<type>\n      description: |\n        \n      parameters:\n      subblocks:\n      - name: /Executioner/TimeIntegrator/<type>/AStableDirk4\n        description: |\n          \n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \'Advanced\'\n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: enable\n          required: No\n          default: !!str 1\n          cpp_type: bool\n          group_name: \'Advanced\'\n          description: |\n            Set the enabled status of the MooseObject.\n        - name: safe_start\n          required: No\n          default: !!str 1\n          cpp_type: bool\n          group_name: \n          description: |\n            If true, use LStableDirk4 to bootstrap this method.\n        - name: type\n          required: No\n          default: !!str AStableDirk4\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeIntegrator/<type>/BDF2\n        description: |\n          \n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \'Advanced\'\n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: enable\n          required: No\n          default: !!str 1\n          cpp_type: bool\n          group_name: \'Advanced\'\n          description: |\n            Set the enabled status of the MooseObject.\n        - name: type\n          required: No\n          default: !!str BDF2\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeIntegrator/<type>/CrankNicolson\n        description: |\n          \n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \'Advanced\'\n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: enable\n          required: No\n          default: !!str 1\n          cpp_type: bool\n          group_name: \'Advanced\'\n          description: |\n            Set the enabled status of the MooseObject.\n        - name: type\n          required: No\n          default: !!str CrankNicolson\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeIntegrator/<type>/ExplicitEuler\n        description: |\n          \n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \'Advanced\'\n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: enable\n          required: No\n          default: !!str 1\n          cpp_type: bool\n          group_name: \'Advanced\'\n          description: |\n            Set the enabled status of the MooseObject.\n        - name: type\n          required: No\n          default: !!str ExplicitEuler\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeIntegrator/<type>/ExplicitMidpoint\n        description: |\n          \n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \'Advanced\'\n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: enable\n          required: No\n          default: !!str 1\n          cpp_type: bool\n          group_name: \'Advanced\'\n          description: |\n            Set the enabled status of the MooseObject.\n        - name: type\n          required: No\n          default: !!str ExplicitMidpoint\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeIntegrator/<type>/ExplicitTVDRK2\n        description: |\n          \n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \'Advanced\'\n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: enable\n          required: No\n          default: !!str 1\n          cpp_type: bool\n          group_name: \'Advanced\'\n          description: |\n            Set the enabled status of the MooseObject.\n        - name: type\n          required: No\n          default: !!str ExplicitTVDRK2\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeIntegrator/<type>/Heun\n        description: |\n          \n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \'Advanced\'\n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: enable\n          required: No\n          default: !!str 1\n          cpp_type: bool\n          group_name: \'Advanced\'\n          description: |\n            Set the enabled status of the MooseObject.\n        - name: type\n          required: No\n          default: !!str Heun\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeIntegrator/<type>/ImplicitEuler\n        description: |\n          \n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \'Advanced\'\n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: enable\n          required: No\n          default: !!str 1\n          cpp_type: bool\n          group_name: \'Advanced\'\n          description: |\n            Set the enabled status of the MooseObject.\n        - name: type\n          required: No\n          default: !!str ImplicitEuler\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeIntegrator/<type>/ImplicitMidpoint\n        description: |\n          \n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \'Advanced\'\n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: enable\n          required: No\n          default: !!str 1\n          cpp_type: bool\n          group_name: \'Advanced\'\n          description: |\n            Set the enabled status of the MooseObject.\n        - name: type\n          required: No\n          default: !!str ImplicitMidpoint\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeIntegrator/<type>/LStableDirk2\n        description: |\n          \n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \'Advanced\'\n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: enable\n          required: No\n          default: !!str 1\n          cpp_type: bool\n          group_name: \'Advanced\'\n          description: |\n            Set the enabled status of the MooseObject.\n        - name: type\n          required: No\n          default: !!str LStableDirk2\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeIntegrator/<type>/LStableDirk3\n        description: |\n          \n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \'Advanced\'\n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: enable\n          required: No\n          default: !!str 1\n          cpp_type: bool\n          group_name: \'Advanced\'\n          description: |\n            Set the enabled status of the MooseObject.\n        - name: type\n          required: No\n          default: !!str LStableDirk3\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeIntegrator/<type>/LStableDirk4\n        description: |\n          \n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \'Advanced\'\n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: enable\n          required: No\n          default: !!str 1\n          cpp_type: bool\n          group_name: \'Advanced\'\n          description: |\n            Set the enabled status of the MooseObject.\n        - name: type\n          required: No\n          default: !!str LStableDirk4\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeIntegrator/<type>/Ralston\n        description: |\n          \n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \'Advanced\'\n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: enable\n          required: No\n          default: !!str 1\n          cpp_type: bool\n          group_name: \'Advanced\'\n          description: |\n            Set the enabled status of the MooseObject.\n        - name: type\n          required: No\n          default: !!str Ralston\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n  - name: /Executioner/TimeStepper\n    description: |\n      \n    parameters:\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: isObjectAction\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates that this is a MooseObjectAction.\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n    - name: /Executioner/TimeStepper/<type>\n      description: |\n        \n      parameters:\n      subblocks:\n      - name: /Executioner/TimeStepper/<type>/AB2PredictorCorrector\n        description: |\n          \n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \'Advanced\'\n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: dt\n          required: Yes\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            Initial time step size\n        - name: e_max\n          required: Yes\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            Maximum acceptable error.\n        - name: e_tol\n          required: Yes\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            Target error tolerance.\n        - name: enable\n          required: No\n          default: !!str 1\n          cpp_type: bool\n          group_name: \'Advanced\'\n          description: |\n            Set the enabled status of the MooseObject.\n        - name: max_increase\n          required: No\n          default: !!str 1e+09\n          cpp_type: double\n          group_name: \n          description: |\n            Maximum ratio that the time step can increase.\n        - name: reset_dt\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \n          description: |\n            Use when restarting a calculation to force a change in dt.\n        - name: scaling_parameter\n          required: No\n          default: !!str 0.8\n          cpp_type: double\n          group_name: \n          description: |\n            scaling parameter for dt selection\n        - name: start_adapting\n          required: No\n          default: !!str 2\n          cpp_type: int\n          group_name: \n          description: |\n            when to start taking adaptive time steps\n        - name: steps_between_increase\n          required: No\n          default: !!str 1\n          cpp_type: int\n          group_name: \n          description: |\n            the number of time steps before recalculating dt\n        - name: type\n          required: No\n          default: !!str AB2PredictorCorrector\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeStepper/<type>/CSVTimeSequenceStepper\n        description: |\n          Solves the Transient problem at a sequence of given time points read in a file.\n        parameters:\n        - name: column_index\n          required: No\n          default: !!str \n          cpp_type: unsigned int\n          group_name: \n          description: |\n            index of the column which contains the time sequence\n        - name: column_name\n          required: No\n          default: !!str time\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            name of the column which contains the time sequence\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \'Advanced\'\n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: delimiter\n          required: No\n          default: !!str ","\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            delimiter used to parse the file\n        - name: enable\n          required: No\n          default: !!str 1\n          cpp_type: bool\n          group_name: \'Advanced\'\n          description: |\n            Set the enabled status of the MooseObject.\n        - name: file_name\n          required: Yes\n          default: !!str \n          cpp_type: FileName\n          group_name: \n          description: |\n            name of the file in which the time sequence is read\n        - name: header\n          required: No\n          default: !!str \n          cpp_type: bool\n          group_name: \n          description: |\n            indicates whether the file contains a header with the column names\n        - name: reset_dt\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \n          description: |\n            Use when restarting a calculation to force a change in dt.\n        - name: type\n          required: No\n          default: !!str CSVTimeSequenceStepper\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeStepper/<type>/ConstantDT\n        description: |\n          Timestepper that takes a constant time step size\n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \'Advanced\'\n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: dt\n          required: Yes\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            Size of the time step\n        - name: enable\n          required: No\n          default: !!str 1\n          cpp_type: bool\n          group_name: \'Advanced\'\n          description: |\n            Set the enabled status of the MooseObject.\n        - name: growth_factor\n          required: No\n          default: !!str 2\n          cpp_type: double\n          group_name: \n          description: |\n            Maximum ratio of new to previous timestep sizes following a step that required the time step to be cut due to a failed solve.\n        - name: reset_dt\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \n          description: |\n            Use when restarting a calculation to force a change in dt.\n        - name: type\n          required: No\n          default: !!str ConstantDT\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeStepper/<type>/DT2\n        description: |\n          \n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \'Advanced\'\n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: dt\n          required: No\n          default: !!str 1\n          cpp_type: double\n          group_name: \n          description: |\n            The initial time step size.\n        - name: e_max\n          required: Yes\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            Maximum acceptable error.\n        - name: e_tol\n          required: Yes\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            Target error tolerance.\n        - name: enable\n          required: No\n          default: !!str 1\n          cpp_type: bool\n          group_name: \'Advanced\'\n          description: |\n            Set the enabled status of the MooseObject.\n        - name: max_increase\n          required: No\n          default: !!str 1e+09\n          cpp_type: double\n          group_name: \n          description: |\n            Maximum ratio that the time step can increase.\n        - name: reset_dt\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \n          description: |\n            Use when restarting a calculation to force a change in dt.\n        - name: type\n          required: No\n          default: !!str DT2\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeStepper/<type>/ExodusTimeSequenceStepper\n        description: |\n          Solves the Transient problem at a sequence of time points taken from a specified exodus file.\n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \'Advanced\'\n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: enable\n          required: No\n          default: !!str 1\n          cpp_type: bool\n          group_name: \'Advanced\'\n          description: |\n            Set the enabled status of the MooseObject.\n        - name: mesh\n          required: Yes\n          default: !!str \n          cpp_type: MeshFileName\n          group_name: \n          description: |\n            The name of the mesh file to extract the time sequence from (must be an exodusII file).\n        - name: reset_dt\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \n          description: |\n            Use when restarting a calculation to force a change in dt.\n        - name: type\n          required: No\n          default: !!str ExodusTimeSequenceStepper\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeStepper/<type>/FunctionDT\n        description: |\n          Timestepper whose steps vary over time according to a user-defined fuction\n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \'Advanced\'\n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: enable\n          required: No\n          default: !!str 1\n          cpp_type: bool\n          group_name: \'Advanced\'\n          description: |\n            Set the enabled status of the MooseObject.\n        - name: growth_factor\n          required: No\n          default: !!str 1.79769e+308\n          cpp_type: double\n          group_name: \n          description: |\n            Maximum ratio of new to previous timestep sizes following a step that required the time step to be cut due to a failed solve.\n        - name: interpolate\n          required: No\n          default: !!str 1\n          cpp_type: bool\n          group_name: \n          description: |\n            Whether or not to interpolate DT between times.  This is true by default for historical reasons.\n        - name: min_dt\n          required: No\n          default: !!str 0\n          cpp_type: double\n          group_name: \n          description: |\n            The minimal dt to take.\n        - name: reset_dt\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \n          description: |\n            Use when restarting a calculation to force a change in dt.\n        - name: time_dt\n          required: Yes\n          default: !!str \n          cpp_type: std::vector<double, std::allocator<double> >\n          group_name: \n          description: |\n            The values of dt\n        - name: time_t\n          required: Yes\n          default: !!str \n          cpp_type: std::vector<double, std::allocator<double> >\n          group_name: \n          description: |\n            The values of t\n        - name: type\n          required: No\n          default: !!str FunctionDT\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeStepper/<type>/IterationAdaptiveDT\n        description: |\n          Adjust the timestep based on the number of iterations\n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \'Advanced\'\n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: cutback_factor\n          required: No\n          default: !!str 0.5\n          cpp_type: double\n          group_name: \n          description: |\n            Factor to apply to timestep if difficult convergence (if \'optimal_iterations\' is specified) or if solution failed\n        - name: dt\n          required: Yes\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            The default timestep size between solves\n        - name: enable\n          required: No\n          default: !!str 1\n          cpp_type: bool\n          group_name: \'Advanced\'\n          description: |\n            Set the enabled status of the MooseObject.\n        - name: force_step_every_function_point\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \n          description: |\n            Forces the timestepper to take a step that is consistent with points defined in the function\n        - name: growth_factor\n          required: No\n          default: !!str 2\n          cpp_type: double\n          group_name: \n          description: |\n            Factor to apply to timestep if easy convergence (if \'optimal_iterations\' is specified) or if recovering from failed solve\n        - name: iteration_window\n          required: No\n          default: !!str \n          cpp_type: int\n          group_name: \n          description: |\n            Attempt to grow/shrink timestep if the iteration count is below/above \'optimal_iterations plus/minus iteration_window\' (default = optimal_iterations/5).\n        - name: linear_iteration_ratio\n          required: No\n          default: !!str \n          cpp_type: unsigned int\n          group_name: \n          description: |\n            The ratio of linear to nonlinear iterations to determine target linear iterations and window for adaptive timestepping (default = 25)\n        - name: max_function_change\n          required: No\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            The absolute value of the maximum change in timestep_limiting_function over a timestep\n        - name: optimal_iterations\n          required: No\n          default: !!str \n          cpp_type: int\n          group_name: \n          description: |\n            The target number of nonlinear iterations for adaptive timestepping\n        - name: postprocessor_dtlim\n          required: No\n          default: !!str \n          cpp_type: PostprocessorName\n          group_name: \n          description: |\n            If specified, the postprocessor value is used as an upper limit for the current time step length\n        - name: reset_dt\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \n          description: |\n            Use when restarting a calculation to force a change in dt.\n        - name: time_dt\n          required: No\n          default: !!str \n          cpp_type: std::vector<double, std::allocator<double> >\n          group_name: \n          description: |\n            The values of dt\n        - name: time_t\n          required: No\n          default: !!str \n          cpp_type: std::vector<double, std::allocator<double> >\n          group_name: \n          description: |\n            The values of t\n        - name: timestep_limiting_function\n          required: No\n          default: !!str \n          cpp_type: FunctionName\n          group_name: \n          description: |\n            A \'Piecewise\' type function used to control the timestep by limiting the change in the function over a timestep\n        - name: type\n          required: No\n          default: !!str IterationAdaptiveDT\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeStepper/<type>/LogConstantDT\n        description: |\n          TimeStepper which imposes a time step constant in the logarithmic space\n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \'Advanced\'\n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: enable\n          required: No\n          default: !!str 1\n          cpp_type: bool\n          group_name: \'Advanced\'\n          description: |\n            Set the enabled status of the MooseObject.\n        - name: first_dt\n          required: Yes\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            Initial time step (in absolute time)\n        - name: growth_factor\n          required: No\n          default: !!str 2\n          cpp_type: double\n          group_name: \n          description: |\n            Maximum ratio of new to previous timestep sizes following a step that required the time step to be cut due to a failed solve.\n        - name: log_dt\n          required: Yes\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            Time step in log10(time)\n        - name: reset_dt\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \n          description: |\n            Use when restarting a calculation to force a change in dt.\n        - name: type\n          required: No\n          default: !!str LogConstantDT\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeStepper/<type>/PostprocessorDT\n        description: |\n          \n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \'Advanced\'\n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: dt\n          required: No\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            Initial value of dt\n        - name: enable\n          required: No\n          default: !!str 1\n          cpp_type: bool\n          group_name: \'Advanced\'\n          description: |\n            Set the enabled status of the MooseObject.\n        - name: factor\n          required: No\n          default: !!str 0\n          cpp_type: double\n          group_name: \n          description: |\n            Add a factor to the supplied postprocessor value.\n        - name: postprocessor\n          required: Yes\n          default: !!str \n          cpp_type: PostprocessorName\n          group_name: \n          description: |\n            The name of the postprocessor that computes the dt\n        - name: reset_dt\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \n          description: |\n            Use when restarting a calculation to force a change in dt.\n        - name: scale\n          required: No\n          default: !!str 1\n          cpp_type: double\n          group_name: \n          description: |\n            Multiple scale and supplied postprocessor value.\n        - name: type\n          required: No\n          default: !!str PostprocessorDT\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeStepper/<type>/SolutionTimeAdaptiveDT\n        description: |\n          \n        parameters:\n        - name: adapt_log\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \n          description: |\n            Output adaptive time step log\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \'Advanced\'\n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: dt\n          required: Yes\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            The timestep size between solves\n        - name: enable\n          required: No\n          default: !!str 1\n          cpp_type: bool\n          group_name: \'Advanced\'\n          description: |\n            Set the enabled status of the MooseObject.\n        - name: initial_direction\n          required: No\n          default: !!str 1\n          cpp_type: int\n          group_name: \n          description: |\n            Direction for the first step.  1 for up... -1 for down. \n        - name: percent_change\n          required: No\n          default: !!str 0.1\n          cpp_type: double\n          group_name: \n          description: |\n            Percentage to change the timestep by.  Should be between 0 and 1\n        - name: reset_dt\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \n          description: |\n            Use when restarting a calculation to force a change in dt.\n        - name: type\n          required: No\n          default: !!str SolutionTimeAdaptiveDT\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeStepper/<type>/TimeSequenceStepper\n        description: |\n          Solves the Transient problem at a sequence of given time points.\n        parameters:\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \'Advanced\'\n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: enable\n          required: No\n          default: !!str 1\n          cpp_type: bool\n          group_name: \'Advanced\'\n          description: |\n            Set the enabled status of the MooseObject.\n        - name: reset_dt\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \n          description: |\n            Use when restarting a calculation to force a change in dt.\n        - name: time_sequence\n          required: Yes\n          default: !!str \n          cpp_type: std::vector<double, std::allocator<double> >\n          group_name: \n          description: |\n            The values of t\n        - name: type\n          required: No\n          default: !!str TimeSequenceStepper\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n- name: /Functions\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /Functions/*\n    description: |\n      \n    parameters:\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: isObjectAction\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates that this is a MooseObjectAction.\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /Functions/Axisymmetric2D3DSolutionFunction\n    description: |\n      Function for reading a 2D axisymmetric solution from file and mapping it to a 3D Cartesian model\n    parameters:\n    - name: 2d_axis_point1\n      required: No\n      default: !!str 0 0 0\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Start point for axis of symmetry for the 2d model\n    - name: 2d_axis_point2\n      required: No\n      default: !!str 0 1 0\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        End point for axis of symmetry for the 2d model\n    - name: 3d_axis_point1\n      required: No\n      default: !!str 0 0 0\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Start point for axis of symmetry for the 3d model\n    - name: 3d_axis_point2\n      required: No\n      default: !!str 0 1 0\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        End point for axis of symmetry for the 3d model\n    - name: add_factor\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Add this value (b) to the solution (x): ax+b, where a is the \'scale_factor\'\n    - name: axial_dimension_ratio\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of the axial dimension in the 3d model to that in the 2d model. Optinally permits the 3d model to be larger than the 2d model in that dimension, and scales vector solutions in that direction by this factor.\n    - name: component\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Component of the variable to be computed if it is a vector\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: from_variables\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The names of the variables in the file that are to be extracted, in x, y order if they are vector components\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Scale factor (a) to be applied to the solution (x): ax+b, where b is the \'add_factor\'\n    - name: solution\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The SolutionUserObject to extract data from.\n    - name: type\n      required: No\n      default: !!str Axisymmetric2D3DSolutionFunction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Functions/BicubicSplineFunction\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: type\n      required: No\n      default: !!str BicubicSplineFunction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: x1\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The first independent coordinate.\n    - name: x2\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The second independent coordinate.\n    - name: y\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The dependent values\n    - name: yx1\n      required: No\n      default: !!str 1e30\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The functional form of the derivative with respect to x1.\n    - name: yx11\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The values of the derivative wrt x1 on the lower interpolation grid points.\n    - name: yx1n\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The values of the derivative wrt x1 on the upper interpolation grid points.\n    - name: yx2\n      required: No\n      default: !!str 1e30\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The functional form of the derivative with respect to x2.\n    - name: yx21\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The values of the derivative wrt x2 on the lower interpolation grid points.\n    - name: yx2n\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The values of the derivative wrt x2 on the upper interpolation grid points.\n    subblocks:\n  - name: /Functions/CompositeFunction\n    description: |\n      Multiplies an arbitrary set of functions together\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: functions\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        The functions to be multiplied together.\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Scale factor to be applied to the ordinate values\n    - name: type\n      required: No\n      default: !!str CompositeFunction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Functions/ConstantFunction\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: type\n      required: No\n      default: !!str ConstantFunction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: value\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The constant value\n    subblocks:\n  - name: /Functions/ImageFunction\n    description: |\n      Function with values sampled from a given image stack\n    parameters:\n    - name: component\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The image RGB-component to return, leaving this blank will result in a greyscale value for the image to be created. The component number is zero based, i.e. 0 returns the first (RED) component of the image.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: dimensions\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        x,y,z dimensions of the image (defaults to mesh dimensions)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: file\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        Name of single image file to extract mesh parameters from.  If provided, a 2D mesh is created.\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: FileNameNoExtension\n      group_name: \n      description: |\n        Image file base to open, use this option when a stack of images must be read (ignored if \'file\' is given)\n    - name: file_range\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        Range of images to analyze, used with \'file_base\' (ignored if \'file\' is given)\n    - name: file_suffix\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Suffix of the file to open, e.g. \'png\'\n    - name: flip_x\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Flip\'\n      description: |\n        Flip the image along the x-axis\n    - name: flip_y\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Flip\'\n      description: |\n        Flip the image along the y-axis\n    - name: flip_z\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Flip\'\n      description: |\n        Flip the image along the z-axis\n    - name: lower_value\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \'Threshold\'\n      description: |\n        The value to set for data less than the threshold value\n    - name: origin\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        Origin of the image (defaults to mesh origin)\n    - name: scale\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \'Rescale\'\n      description: |\n        Multiplier to apply to all pixel values; occurs after shifting\n    - name: shift\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \'Rescale\'\n      description: |\n        Value to add to all pixels; occurs prior to scaling\n    - name: threshold\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'Threshold\'\n      description: |\n        The threshold value\n    - name: type\n      required: No\n      default: !!str ImageFunction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: upper_value\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \'Threshold\'\n      description: |\n        The value to set for data greater than the threshold value\n    subblocks:\n  - name: /Functions/LinearCombinationFunction\n    description: |\n      Returns the linear combination of the functions\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: functions\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        This function will return Sum_over_i(w_i * functions_i)\n    - name: type\n      required: No\n      default: !!str LinearCombinationFunction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: w\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        This function will return Sum_over_i(w_i * functions_i)\n    subblocks:\n  - name: /Functions/ParsedFunction\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: type\n      required: No\n      default: !!str ParsedFunction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: vals\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Constant numeric values or postprocessor names for vars.\n    - name: value\n      required: Yes\n      default: !!str \n      cpp_type: FunctionExpression\n      group_name: \n      description: |\n        The user defined function.\n    - name: vars\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The constant variables (excluding t,x,y,z) in the forcing function.\n    subblocks:\n  - name: /Functions/ParsedGradFunction\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: grad_x\n      required: No\n      default: !!str 0\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Partial with respect to x.\n    - name: grad_y\n      required: No\n      default: !!str 0\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Partial with respect to y.\n    - name: grad_z\n      required: No\n      default: !!str 0\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Partial with respect to z.\n    - name: type\n      required: No\n      default: !!str ParsedGradFunction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: vals\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Constant numeric values or postprocessor names for vars.\n    - name: value\n      required: No\n      default: !!str 0\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        User defined function.\n    - name: vars\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The constant variables (excluding t,x,y,z) in the forcing function.\n    subblocks:\n  - name: /Functions/ParsedVectorFunction\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: type\n      required: No\n      default: !!str ParsedVectorFunction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: vals\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Constant numeric values or postprocessor names for vars.\n    - name: value_x\n      required: No\n      default: !!str 0\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        x-component of function.\n    - name: value_y\n      required: No\n      default: !!str 0\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        y-component of function.\n    - name: value_z\n      required: No\n      default: !!str 0\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        z-component of function.\n    - name: vars\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The constant variables (excluding t,x,y,z) in the forcing function.\n    subblocks:\n  - name: /Functions/PiecewiseBilinear\n    description: |\n      Interpolates values from a csv file\n    parameters:\n    - name: axis\n      required: No\n      default: !!str -1\n      cpp_type: int\n      group_name: \n      description: |\n        The axis used (0, 1, or 2 for x, y, or z).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: data_file\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        File holding csv data for use with PiecewiseBilinear\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: radial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true if you want to interpolate along a radius rather that along a specific axis, and note that you have to define xaxis and yaxis in the input file\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Scale factor to be applied to the axis, yaxis, or xaxis values\n    - name: type\n      required: No\n      default: !!str PiecewiseBilinear\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: x\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The x abscissa values\n    - name: xaxis\n      required: No\n      default: !!str -1\n      cpp_type: int\n      group_name: \n      description: |\n        The coordinate used for x-axis data (0, 1, or 2 for x, y, or z).\n    - name: y\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The y abscissa values\n    - name: yaxis\n      required: No\n      default: !!str -1\n      cpp_type: int\n      group_name: \n      description: |\n        The coordinate used for y-axis data (0, 1, or 2 for x, y, or z).\n    - name: z\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The ordinate values\n    subblocks:\n  - name: /Functions/PiecewiseConstant\n    description: |\n      Defines data using a set of x-y data pairs\n    parameters:\n    - name: axis\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z 0 1 2\n      description: |\n        The axis used (x, y, or z) if this is to be a function of position\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: data_file\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        File holding csv data for use with Piecewise\n    - name: direction\n      required: No\n      default: !!str left\n      cpp_type: MooseEnum\n      group_name: \n      options: left right\n      description: |\n        Direction to look to find value: left right\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: format\n      required: No\n      default: !!str rows\n      cpp_type: MooseEnum\n      group_name: \n      options: columns rows\n      description: |\n        Format of csv data file that is in either in columns or rows\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Scale factor to be applied to the ordinate values\n    - name: type\n      required: No\n      default: !!str PiecewiseConstant\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: x\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The abscissa values\n    - name: x_index_in_file\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The abscissa index in the data file\n    - name: xy_data\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        All function data, supplied in abscissa, ordinate pairs\n    - name: xy_in_file_only\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        If the data file only contains abscissa and ordinate data\n    - name: y\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The ordinate values\n    - name: y_index_in_file\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The ordinate index in the data file\n    subblocks:\n  - name: /Functions/PiecewiseLinear\n    description: |\n      Linearly interpolates between pairs of x-y data\n    parameters:\n    - name: axis\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z 0 1 2\n      description: |\n        The axis used (x, y, or z) if this is to be a function of position\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: data_file\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        File holding csv data for use with Piecewise\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: format\n      required: No\n      default: !!str rows\n      cpp_type: MooseEnum\n      group_name: \n      options: columns rows\n      description: |\n        Format of csv data file that is in either in columns or rows\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Scale factor to be applied to the ordinate values\n    - name: type\n      required: No\n      default: !!str PiecewiseLinear\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: x\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The abscissa values\n    - name: x_index_in_file\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The abscissa index in the data file\n    - name: xy_data\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        All function data, supplied in abscissa, ordinate pairs\n    - name: xy_in_file_only\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        If the data file only contains abscissa and ordinate data\n    - name: y\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The ordinate values\n    - name: y_index_in_file\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The ordinate index in the data file\n    subblocks:\n  - name: /Functions/PiecewiseMultilinear\n    description: |\n      PiecewiseMultilinear performs interpolation on 1D, 2D, 3D or 4D data.  The data_file specifies the axes directions and the function values.  If a point lies outside the data range, the appropriate end value is used.\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: data_file\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        File holding data for use with PiecewiseMultilinear.  Format: any empty line and any line beginning with # are ignored, all other lines are assumed to contain relevant information.  The file must begin with specification of the grid.  This is done through lines containing the keywords: AXIS X; AXIS Y; AXIS Z; or AXIS T.  Immediately following the keyword line must be a space-separated line of real numbers which define the grid along the specified axis.  These data must be monotonically increasing.  After all the axes and their grids have been specified, there must be a line that is DATA.  Following that line, function values are given in the correct order (they may be on indivicual lines, or be space-separated on a number of lines).  When the function is evaluated, f[i,j,k,l] corresponds to the i + j*Ni + k*Ni*Nj + l*Ni*Nj*Nk data value.  Here i>=0 corresponding to the index along the first AXIS, j>=0 corresponding to the index along the second AXIS, etc, and Ni = number of grid points along the first AXIS, etc.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: type\n      required: No\n      default: !!str PiecewiseMultilinear\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Functions/SolutionFunction\n    description: |\n      \n    parameters:\n    - name: add_factor\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Add this value (b) to the solution (x): ax+b, where a is the \'scale_factor\'\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: from_variable\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The name of the variable in the file that is to be extracted\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Scale factor (a) to be applied to the solution (x): ax+b, where b is the \'add_factor\'\n    - name: solution\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The SolutionUserObject to extract data from.\n    - name: type\n      required: No\n      default: !!str SolutionFunction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Functions/SplineFunction\n    description: |\n      \n    parameters:\n    - name: component\n      required: No\n      default: !!str x\n      cpp_type: MooseEnum\n      group_name: \n      options: x y z\n      description: |\n        The component of the geometry point to interpolate with\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: type\n      required: No\n      default: !!str SplineFunction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The abscissa values\n    - name: y\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The ordinate values\n    - name: yp1\n      required: No\n      default: !!str 1e+30\n      cpp_type: double\n      group_name: \n      description: |\n        The value of the first derivative of the interpolating function at point 1\n    - name: ypn\n      required: No\n      default: !!str 1e+30\n      cpp_type: double\n      group_name: \n      description: |\n        The value of the first derivative of the interpolating function at point n\n    subblocks:\n  - name: /Functions/VectorPostprocessorFunction\n    description: |\n      \n    parameters:\n    - name: argument_column\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        VectorPostprocessor column tabulating the abscissa of the sampled function\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Component of the function evaluation point used to sample the VectorPostprocessor\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: type\n      required: No\n      default: !!str VectorPostprocessorFunction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: value_column\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        VectorPostprocessor column tabulating the ordinate (function values) of the sampled function\n    - name: vectorpostprocessor_name\n      required: Yes\n      default: !!str \n      cpp_type: VectorPostprocessorName\n      group_name: \n      description: |\n        The name of the PointValueSampler that you want to use\n    subblocks:\n- name: /GlobalParams\n  description: |\n    \n  parameters:\n  subblocks:\n- name: /ICs\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /ICs/*\n    description: |\n      \n    parameters:\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: isObjectAction\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates that this is a MooseObjectAction.\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /ICs/BimodalInverseSuperellipsoidsIC\n    description: |\n      Bimodal size distribution of large particles (specified in input file, value invalue) and small particles (placed randomly inside the larger particles, value outvalue)\n    parameters:\n    - name: as\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Semiaxis a for each superellipsoid\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bs\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Semiaxis b for each superellipsoid\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: cs\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Semiaxis c for each superellipsoid\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: ignore_uo_dependency\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n    - name: int_width\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The interfacial width of the void surface.  Defaults to sharp interface\n    - name: invalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value inside the superellipsoid\n    - name: large_spac\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        minimum spacing between large and small particles, measured from closest edge to closest edge\n    - name: nestedvalue\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value for nested particles inside the superellipsoid in inverse configuration\n    - name: npart\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of random (small) particles to place\n    - name: ns\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Exponent n for each superellipsoid\n    - name: numtries\n      required: No\n      default: !!str 1000\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of tries to place the random particles\n    - name: outvalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value outside the superellipsoid\n    - name: rand_seed\n      required: No\n      default: !!str 12345\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Seed value for the random number generator\n    - name: size_variation\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Plus or minus fraction of random variation in the semiaxes for uniform, standard deviation for normal\n    - name: size_variation_type\n      required: No\n      default: !!str none\n      cpp_type: MooseEnum\n      group_name: \n      options: uniform normal none\n      description: |\n        Type of distribution that random semiaxes will follow\n    - name: small_a\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Mean semiaxis a value for the randomly placed (small) superellipsoids\n    - name: small_b\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Mean semiaxis b value for the randomly placed (small) superellipsoids\n    - name: small_c\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Mean semiaxis c value for the randomly placed (small) superellipsoids\n    - name: small_n\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Exponent n for the randomly placed (small) superellipsoids\n    - name: small_spac\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        minimum spacing between small particles, measured from closest edge to closest edge\n    - name: type\n      required: No\n      default: !!str BimodalInverseSuperellipsoidsIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: x_positions\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The x-coordinate for each superellipsoid center\n    - name: y_positions\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The y-coordinate for each superellipsoid center\n    - name: z_positions\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The z-coordinate for each superellipsoid center\n    - name: zero_gradient\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n    subblocks:\n  - name: /ICs/BimodalSuperellipsoidsIC\n    description: |\n      Bimodal size distribution of large particles (specified in input file) and small particles (placed randomly outside the larger particles)\n    parameters:\n    - name: as\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Semiaxis a for each superellipsoid\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bs\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Semiaxis b for each superellipsoid\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: cs\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Semiaxis c for each superellipsoid\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: ignore_uo_dependency\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n    - name: int_width\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The interfacial width of the void surface.  Defaults to sharp interface\n    - name: invalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value inside the superellipsoid\n    - name: large_spac\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        minimum spacing between large and small particles, measured from closest edge to closest edge\n    - name: nestedvalue\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value for nested particles inside the superellipsoid in inverse configuration\n    - name: npart\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of random (small) particles to place\n    - name: ns\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Exponent n for each superellipsoid\n    - name: numtries\n      required: No\n      default: !!str 1000\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of tries to place the random particles\n    - name: outvalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value outside the superellipsoid\n    - name: rand_seed\n      required: No\n      default: !!str 12345\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Seed value for the random number generator\n    - name: size_variation\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Plus or minus fraction of random variation in the semiaxes for uniform, standard deviation for normal\n    - name: size_variation_type\n      required: No\n      default: !!str none\n      cpp_type: MooseEnum\n      group_name: \n      options: uniform normal none\n      description: |\n        Type of distribution that random semiaxes will follow\n    - name: small_a\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Mean semiaxis a value for the randomly placed (small) superellipsoids\n    - name: small_b\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Mean semiaxis b value for the randomly placed (small) superellipsoids\n    - name: small_c\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Mean semiaxis c value for the randomly placed (small) superellipsoids\n    - name: small_n\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Exponent n for the randomly placed (small) superellipsoids\n    - name: small_spac\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        minimum spacing between small particles, measured from closest edge to closest edge\n    - name: type\n      required: No\n      default: !!str BimodalSuperellipsoidsIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: x_positions\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The x-coordinate for each superellipsoid center\n    - name: y_positions\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The y-coordinate for each superellipsoid center\n    - name: z_positions\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The z-coordinate for each superellipsoid center\n    - name: zero_gradient\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n    subblocks:\n  - name: /ICs/BoundingBoxIC\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: ignore_uo_dependency\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n    - name: inside\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The value of the variable inside the box\n    - name: outside\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The value of the variable outside the box\n    - name: type\n      required: No\n      default: !!str BoundingBoxIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: x1\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The x coordinate of the lower left-hand corner of the box\n    - name: x2\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The x coordinate of the upper right-hand corner of the box\n    - name: y1\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The y coordinate of the lower left-hand corner of the box\n    - name: y2\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The y coordinate of the upper right-hand corner of the box\n    - name: z1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The z coordinate of the lower left-hand corner of the box\n    - name: z2\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The z coordinate of the upper right-hand corner of the box\n    subblocks:\n  - name: /ICs/ClosePackIC\n    description: |\n      Close packed arrangement of smooth circles\n    parameters:\n    - name: 3D_spheres\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        in 3D, whether the objects are spheres or columns\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: ignore_uo_dependency\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n    - name: int_width\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The interfacial width of the void surface.  Defaults to sharp interface\n    - name: invalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value inside the circle\n    - name: outvalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value outside the circle\n    - name: radius\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The radius of a circle\n    - name: rand_seed\n      required: No\n      default: !!str 12345\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Seed value for the random number generator\n    - name: type\n      required: No\n      default: !!str ClosePackIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: zero_gradient\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n    subblocks:\n  - name: /ICs/ConstantIC\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: ignore_uo_dependency\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n    - name: type\n      required: No\n      default: !!str ConstantIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: value\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The value to be set in IC\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    subblocks:\n  - name: /ICs/CrossIC\n    description: |\n      Cross-shaped initial condition\n    parameters:\n    - name: amplitude\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The amplitude\n    - name: average\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The average value\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: buffer\n      required: No\n      default: !!str 0.03125\n      cpp_type: double\n      group_name: \n      description: |\n        A small area between the max value and the interface\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: ignore_uo_dependency\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n    - name: interface\n      required: No\n      default: !!str 0.03125\n      cpp_type: double\n      group_name: \n      description: |\n        The interface width\n    - name: length\n      required: No\n      default: !!str 0.75\n      cpp_type: double\n      group_name: \n      description: |\n        The length\n    - name: type\n      required: No\n      default: !!str CrossIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: width\n      required: No\n      default: !!str 0.125\n      cpp_type: double\n      group_name: \n      description: |\n        The width\n    - name: x1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The x coordinate of the lower left-hand corner of the box\n    - name: x2\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The x coordinate of the upper right-hand corner of the box\n    - name: y1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The y coordinate of the lower left-hand corner of the box\n    - name: y2\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The y coordinate of the upper right-hand corner of the box\n    subblocks:\n  - name: /ICs/FunctionIC\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The initial condition function.\n    - name: ignore_uo_dependency\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n    - name: type\n      required: No\n      default: !!str FunctionIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    subblocks:\n  - name: /ICs/FunctionScalarIC\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        The initial condition function.\n    - name: type\n      required: No\n      default: !!str FunctionScalarIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    subblocks:\n  - name: /ICs/LatticeSmoothCircleIC\n    description: |\n      Perturbed square lattice of smooth circles\n    parameters:\n    - name: 3D_spheres\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        in 3D, whether the objects are spheres or columns\n    - name: Rnd_variation\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Variation from central lattice position\n    - name: avoid_bounds\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Don\'t place any bubbles on the simulation cell boundaries\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: circles_per_side\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        Vector containing the number of bubbles along each side\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: ignore_uo_dependency\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n    - name: int_width\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The interfacial width of the void surface.  Defaults to sharp interface\n    - name: invalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value inside the circle\n    - name: outvalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value outside the circle\n    - name: pos_variation\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Variation from central lattice position\n    - name: radius\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Mean radius value for the circels\n    - name: radius_variation\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Plus or minus fraction of random variation in the bubble radius\n    - name: radius_variation_type\n      required: No\n      default: !!str none\n      cpp_type: MooseEnum\n      group_name: \n      options: uniform normal none\n      description: |\n        Type of distribution that random circle radii will follow\n    - name: rand_seed\n      required: No\n      default: !!str 2000\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        random seed\n    - name: type\n      required: No\n      default: !!str LatticeSmoothCircleIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: zero_gradient\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n    subblocks:\n  - name: /ICs/MultiBoundingBoxIC\n    description: |\n      Specify variable values inside and outside a list of box shaped axis-aligned regions defined by pairs of opposing corners\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: corners\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<libMesh::Point, std::allocator<libMesh::Point> >\n      group_name: \n      description: |\n        The corner coordinates boxes\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: ignore_uo_dependency\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n    - name: inside\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The value of the variable inside each box (one value per box or a single value for all boxes)\n    - name: opposite_corners\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<libMesh::Point, std::allocator<libMesh::Point> >\n      group_name: \n      description: |\n        The coordinates of the opposite corners of the boxes\n    - name: outside\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The value of the variable outside the box\n    - name: type\n      required: No\n      default: !!str MultiBoundingBoxIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    subblocks:\n  - name: /ICs/MultiSmoothCircleIC\n    description: |\n      Random distribution of smooth circles with given minimum spacing\n    parameters:\n    - name: 3D_spheres\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        in 3D, whether the objects are spheres or columns\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bubspac\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        minimum spacing of bubbles, measured from center to center\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: ignore_uo_dependency\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n    - name: int_width\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The interfacial width of the void surface.  Defaults to sharp interface\n    - name: invalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value inside the circle\n    - name: numbub\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of bubbles to place\n    - name: numtries\n      required: No\n      default: !!str 1000\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of tries\n    - name: outvalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value outside the circle\n    - name: radius\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Mean radius value for the circles\n    - name: radius_variation\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Plus or minus fraction of random variation in the bubble radius for uniform, standard deviation for normal\n    - name: radius_variation_type\n      required: No\n      default: !!str none\n      cpp_type: MooseEnum\n      group_name: \n      options: uniform normal none\n      description: |\n        Type of distribution that random circle radii will follow\n    - name: rand_seed\n      required: No\n      default: !!str 12345\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Seed value for the random number generator\n    - name: type\n      required: No\n      default: !!str MultiSmoothCircleIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: zero_gradient\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n    subblocks:\n  - name: /ICs/MultiSmoothSuperellipsoidIC\n    description: |\n      Random distribution of smooth ellipse with given minimum spacing\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bubspac\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Vector of the minimum spacing of bubbles of one type, measured from center to center\n    - name: check_extremes\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Check all Superellipsoid extremes (center +- each semiaxis) for overlap, must have prevent_overlap set to True.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: exponent\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Vector of exponents for each superellipsoid, n=2 is a normal ellipse\n    - name: ignore_uo_dependency\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n    - name: int_width\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The interfacial width of the void surface.  Defaults to sharp interface\n    - name: invalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value inside the superellipsoid\n    - name: max_num_tries\n      required: No\n      default: !!str 1000\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of tries\n    - name: nestedvalue\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value for nested particles inside the superellipsoid in inverse configuration\n    - name: numbub\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        Vector of the number of bubbles to place\n    - name: outvalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value outside the superellipsoid\n    - name: prevent_overlap\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Check all Superellipsoid centers for overlap with other Superellipsoids.\n    - name: rand_seed\n      required: No\n      default: !!str 12345\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Seed value for the random number generator\n    - name: semiaxis_a\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Vector of mean semiaxis values in the x direction for the ellipse\n    - name: semiaxis_a_variation\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Vector of plus or minus fractions of random variation in the bubble semiaxis in the x direction for uniform, standard deviation for normal\n    - name: semiaxis_b\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Vector of mean semiaxis values in the y direction for the ellipse\n    - name: semiaxis_b_variation\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Vector of plus or minus fractions of random variation in the bubble semiaxis in the y direction for uniform, standard deviation for normal\n    - name: semiaxis_c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Vector of mean semiaxis values in the z direction for the ellipse, must be set to 1 if 2D.\n    - name: semiaxis_c_variation\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Vector of plus or minus fractions of random variation in the bubble semiaxis in the z direction for uniform, standard deviation for normal. Must be set to 0 if 2D.\n    - name: semiaxis_variation_type\n      required: No\n      default: !!str none\n      cpp_type: MooseEnum\n      group_name: \n      options: uniform normal none\n      description: |\n        Type of distribution that random superellipsoid semiaxes will follow\n    - name: type\n      required: No\n      default: !!str MultiSmoothSuperellipsoidIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: vary_axes_independently\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        If true the length of each semiaxis is randomly chosen within the provided parameters, if false then one random number is generated and applied to all semiaxes.\n    - name: zero_gradient\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n    subblocks:\n  - name: /ICs/PFCFreezingIC\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: crystal_structure\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: FCC BCC\n      description: |\n        The type of crystal structure\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: ignore_uo_dependency\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n    - name: inside\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Value inside sinusoids\n    - name: lc\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The lattice constant off the crystal structure\n    - name: max\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Upper bound of the randomly generated values\n    - name: min\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Lower bound of the randomly generated values\n    - name: outside\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Value outside sinusoids\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Seed value for the random number generator\n    - name: type\n      required: No\n      default: !!str PFCFreezingIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: x1\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The x coordinate of the lower left-hand corner of the frozen box\n    - name: x2\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The x coordinate of the upper right-hand corner of the box\n    - name: y1\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The y coordinate of the lower left-hand corner of the frozen box\n    - name: y2\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The y coordinate of the upper right-hand corner of the box\n    - name: z1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The z coordinate of the lower left-hand corner of the box\n    - name: z2\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The z coordinate of the upper right-hand corner of the box\n    subblocks:\n  - name: /ICs/PolycrystalColoringIC\n    description: |\n      Random Voronoi tesselation polycrystal (used by PolycrystalVoronoiICAction)\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: ignore_uo_dependency\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n    - name: op_index\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index for the current order parameter\n    - name: polycrystal_ic_uo\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        TODO\n    - name: type\n      required: No\n      default: !!str PolycrystalColoringIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    subblocks:\n  - name: /ICs/PolycrystalICs\n    description: |\n      \n    parameters:\n    subblocks:\n    - name: /ICs/PolycrystalICs/BicrystalBoundingBoxIC\n      description: |\n        \n      parameters:\n      - name: inactive\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          If specified blocks matching these identifiers will be skipped.\n      - name: op_num\n        required: Yes\n        default: !!str \n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Number of grains, should be 2\n      - name: var_name_base\n        required: Yes\n        default: !!str \n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          specifies the base name of the variables\n      - name: x1\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The x coordinate of the lower left-hand corner of the box\n      - name: x2\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The x coordinate of the upper right-hand corner of the box\n      - name: y1\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The y coordinate of the lower left-hand corner of the box\n      - name: y2\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The y coordinate of the upper right-hand corner of the box\n      - name: z1\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          The z coordinate of the lower left-hand corner of the box\n      - name: z2\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          The z coordinate of the upper right-hand corner of the box\n      subblocks:\n    - name: /ICs/PolycrystalICs/BicrystalCircleGrainIC\n      description: |\n        \n      parameters:\n      - name: 3D_sphere\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          in 3D, whether the smaller grain is a spheres or columnar grain\n      - name: inactive\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          If specified blocks matching these identifiers will be skipped.\n      - name: int_width\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          The interfacial width of the void surface.  Defaults to sharp interface\n      - name: op_num\n        required: Yes\n        default: !!str \n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Number of grains, should be 2\n      - name: radius\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          Void radius\n      - name: var_name_base\n        required: Yes\n        default: !!str \n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          specifies the base name of the variables\n      - name: x\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The x coordinate of the circle grain center\n      - name: y\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The y coordinate of the circle grain center\n      - name: z\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          The z coordinate of the circle grain center\n      subblocks:\n    - name: /ICs/PolycrystalICs/PolycrystalColoringIC\n      description: |\n        \n      parameters:\n      - name: inactive\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          If specified blocks matching these identifiers will be skipped.\n      - name: op_num\n        required: Yes\n        default: !!str \n        cpp_type: unsigned int\n        group_name: \n        description: |\n          number of order parameters to create\n      - name: polycrystal_ic_uo\n        required: Yes\n        default: !!str \n        cpp_type: UserObjectName\n        group_name: \n        description: |\n          Optional: TODO\n      - name: var_name_base\n        required: Yes\n        default: !!str \n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          specifies the base name of the variables\n      subblocks:\n    - name: /ICs/PolycrystalICs/PolycrystalRandomIC\n      description: |\n        \n      parameters:\n      - name: inactive\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          If specified blocks matching these identifiers will be skipped.\n      - name: op_num\n        required: Yes\n        default: !!str \n        cpp_type: unsigned int\n        group_name: \n        description: |\n          number of order parameters to create\n      - name: random_type\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: continuous discrete\n        description: |\n          The type of random polycrystal initial condition. Whether one order parameter is chosen to be 1 at each node or if each order parameter continuously varies from 0 to 1\n      - name: var_name_base\n        required: Yes\n        default: !!str \n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          specifies the base name of the variables\n      subblocks:\n    - name: /ICs/PolycrystalICs/PolycrystalVoronoiVoidIC\n      description: |\n        \n      parameters:\n      - name: 3D_spheres\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          in 3D, whether the objects are spheres or columns\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The list of block ids (SubdomainID) that this object will be applied\n      - name: boundary\n        required: No\n        default: !!str \n        cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n        group_name: \n        description: |\n          The list of boundary IDs from the mesh where this boundary condition applies\n      - name: bubspac\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          minimum spacing of bubbles, measured from center to center\n      - name: columnar_3D\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          3D microstructure will be columnar in the z-direction?\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \'Advanced\'\n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: enable\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Set the enabled status of the MooseObject.\n      - name: grain_num\n        required: Yes\n        default: !!str \n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Number of grains being represented by the order parameters\n      - name: ignore_uo_dependency\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n      - name: inactive\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          If specified blocks matching these identifiers will be skipped.\n      - name: int_width\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          The interfacial width of the void surface.  Defaults to sharp interface\n      - name: invalue\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The variable value inside the circle\n      - name: numbub\n        required: Yes\n        default: !!str \n        cpp_type: unsigned int\n        group_name: \n        description: |\n          The number of bubbles to place\n      - name: numtries\n        required: No\n        default: !!str 1000\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          The number of tries\n      - name: op_num\n        required: Yes\n        default: !!str \n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Number of order parameters\n      - name: outvalue\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The variable value outside the circle\n      - name: radius\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          Mean radius value for the circles\n      - name: radius_variation\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          Plus or minus fraction of random variation in the bubble radius for uniform, standard deviation for normal\n      - name: radius_variation_type\n        required: No\n        default: !!str none\n        cpp_type: MooseEnum\n        group_name: \n        options: uniform normal none\n        description: |\n          Type of distribution that random circle radii will follow\n      - name: rand_seed\n        required: No\n        default: !!str 12444\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          The random seed\n      - name: var_name_base\n        required: Yes\n        default: !!str \n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          specifies the base name of the variables\n      - name: zero_gradient\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n      subblocks:\n    - name: /ICs/PolycrystalICs/Tricrystal2CircleGrainsIC\n      description: |\n        \n      parameters:\n      - name: inactive\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          If specified blocks matching these identifiers will be skipped.\n      - name: op_num\n        required: Yes\n        default: !!str \n        cpp_type: unsigned int\n        group_name: \n        description: |\n          number of order parameters to create\n      - name: var_name_base\n        required: Yes\n        default: !!str \n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          specifies the base name of the variables\n      subblocks:\n  - name: /ICs/PolycrystalRandomIC\n    description: |\n      Random initial condition for a polycrystalline material\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: ignore_uo_dependency\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n    - name: op_index\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index for the current order parameter\n    - name: op_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of order parameters\n    - name: typ\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Type of random grain structure\n    - name: type\n      required: No\n      default: !!str PolycrystalRandomIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    subblocks:\n  - name: /ICs/PolycrystalVoronoiVoidIC\n    description: |\n      Random distribution of smooth circles with given minimum spacing\n    parameters:\n    - name: 3D_spheres\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        in 3D, whether the objects are spheres or columns\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bubspac\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        minimum spacing of bubbles, measured from center to center\n    - name: columnar_3D\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        3D microstructure will be columnar in the z-direction?\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: grain_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of grains being represented by the order parameters\n    - name: ignore_uo_dependency\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n    - name: int_width\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The interfacial width of the void surface.  Defaults to sharp interface\n    - name: invalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value inside the circle\n    - name: numbub\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of bubbles to place\n    - name: numtries\n      required: No\n      default: !!str 1000\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of tries\n    - name: op_index\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index for the current order parameter, not needed if structure_type = voids\n    - name: op_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of order parameters\n    - name: outvalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value outside the circle\n    - name: radius\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Mean radius value for the circles\n    - name: radius_variation\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Plus or minus fraction of random variation in the bubble radius for uniform, standard deviation for normal\n    - name: radius_variation_type\n      required: No\n      default: !!str none\n      cpp_type: MooseEnum\n      group_name: \n      options: uniform normal none\n      description: |\n        Type of distribution that random circle radii will follow\n    - name: rand_seed\n      required: No\n      default: !!str 12444\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The random seed\n    - name: structure_type\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: grains voids\n      description: |\n        Which structure type is being initialized, grains or voids\n    - name: type\n      required: No\n      default: !!str PolycrystalVoronoiVoidIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: zero_gradient\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n    subblocks:\n  - name: /ICs/RampIC\n    description: |\n      Linear ramp along the x-axis with given values at the left and right extreme points.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: ignore_uo_dependency\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n    - name: type\n      required: No\n      default: !!str RampIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: value_left\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The value on left (xmin) boundary.\n    - name: value_right\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The value on right (xmax) boundary.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    subblocks:\n  - name: /ICs/RandomIC\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: ignore_uo_dependency\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n    - name: max\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Upper bound of the randomly generated values\n    - name: min\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Lower bound of the randomly generated values\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Seed value for the random number generator\n    - name: type\n      required: No\n      default: !!str RandomIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    subblocks:\n  - name: /ICs/ReconPhaseVarIC\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: ebsd_reader\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The EBSDReader object holding the EBSD data\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: ignore_uo_dependency\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n    - name: phase\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        EBSD phase number this variable is to represent\n    - name: type\n      required: No\n      default: !!str ReconPhaseVarIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    subblocks:\n  - name: /ICs/RndBoundingBoxIC\n    description: |\n      Random noise with different min/max inside/outside of a bounding box\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: ignore_uo_dependency\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n    - name: mn_invalue\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The min value of the variable invalue the box\n    - name: mn_outvalue\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The min value of the variable outvalue the box\n    - name: mx_invalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The max value of the variable invalue the box\n    - name: mx_outvalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The max value of the variable outvalue the box\n    - name: type\n      required: No\n      default: !!str RndBoundingBoxIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: x1\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The x coordinate of the lower left-hand corner of the box\n    - name: x2\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The x coordinate of the upper right-hand corner of the box\n    - name: y1\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The y coordinate of the lower left-hand corner of the box\n    - name: y2\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The y coordinate of the upper right-hand corner of the box\n    - name: z1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The z coordinate of the lower left-hand corner of the box\n    - name: z2\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The z coordinate of the upper right-hand corner of the box\n    subblocks:\n  - name: /ICs/RndSmoothCircleIC\n    description: |\n      Random noise with different min/max inside/outside of a smooth circle\n    parameters:\n    - name: 3D_spheres\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        in 3D, whether the objects are spheres or columns\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: ignore_uo_dependency\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n    - name: int_width\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The interfacial width of the void surface.  Defaults to sharp interface\n    - name: invalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value inside the circle\n    - name: outvalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value outside the circle\n    - name: radius\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The radius of a circle\n    - name: rand_seed\n      required: No\n      default: !!str 12345\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Seed value for the random number generator\n    - name: type\n      required: No\n      default: !!str RndSmoothCircleIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: variation_invalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Plus or minus this amount on the invalue\n    - name: variation_outvalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Plus or minus this amount on the outvalue\n    - name: x1\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The x coordinate of the circle center\n    - name: y1\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The y coordinate of the circle center\n    - name: z1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The z coordinate of the circle center\n    - name: zero_gradient\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n    subblocks:\n  - name: /ICs/ScalarComponentIC\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: type\n      required: No\n      default: !!str ScalarComponentIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: values\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Initial values to initialize the scalar variable.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    subblocks:\n  - name: /ICs/ScalarConstantIC\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: type\n      required: No\n      default: !!str ScalarConstantIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: value\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    subblocks:\n  - name: /ICs/SmoothCircleFromFileIC\n    description: |\n      Multiple smooth circles read from a text file\n    parameters:\n    - name: 3D_spheres\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        in 3D, whether the objects are spheres or columns\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: file_name\n      required: Yes\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        File containing circle centers and radii\n    - name: ignore_uo_dependency\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n    - name: int_width\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The interfacial width of the void surface.  Defaults to sharp interface\n    - name: invalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value inside the circle\n    - name: outvalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value outside the circle\n    - name: rand_seed\n      required: No\n      default: !!str 12345\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Seed value for the random number generator\n    - name: type\n      required: No\n      default: !!str SmoothCircleFromFileIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: zero_gradient\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n    subblocks:\n  - name: /ICs/SmoothCircleIC\n    description: |\n      Circle with a smooth interface\n    parameters:\n    - name: 3D_spheres\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        in 3D, whether the objects are spheres or columns\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: ignore_uo_dependency\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n    - name: int_width\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The interfacial width of the void surface.  Defaults to sharp interface\n    - name: invalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value inside the circle\n    - name: outvalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value outside the circle\n    - name: radius\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The radius of a circle\n    - name: rand_seed\n      required: No\n      default: !!str 12345\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Seed value for the random number generator\n    - name: type\n      required: No\n      default: !!str SmoothCircleIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: x1\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The x coordinate of the circle center\n    - name: y1\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The y coordinate of the circle center\n    - name: z1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The z coordinate of the circle center\n    - name: zero_gradient\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n    subblocks:\n  - name: /ICs/SmoothSuperellipsoidIC\n    description: |\n      Superellipsoid with a smooth interface\n    parameters:\n    - name: a\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Semiaxis a of the superellipsoid\n    - name: b\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Semiaxis b of the superellipsoid\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Semiaxis c of the superellipsoid\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: ignore_uo_dependency\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n    - name: int_width\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The interfacial width of the void surface.  Defaults to sharp interface\n    - name: invalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value inside the superellipsoid\n    - name: n\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Exponent n of the superellipsoid\n    - name: nestedvalue\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value for nested particles inside the superellipsoid in inverse configuration\n    - name: outvalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value outside the superellipsoid\n    - name: rand_seed\n      required: No\n      default: !!str 12345\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Seed value for the random number generator\n    - name: type\n      required: No\n      default: !!str SmoothSuperellipsoidIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: x1\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The x coordinate of the superellipsoid center\n    - name: y1\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The y coordinate of the superellipsoid center\n    - name: z1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The z coordinate of the superellipsoid center\n    - name: zero_gradient\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n    subblocks:\n  - name: /ICs/SpecifiedSmoothCircleIC\n    description: |\n      Multiple smooth circles with manually specified radii and center points\n    parameters:\n    - name: 3D_spheres\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        in 3D, whether the objects are spheres or columns\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: ignore_uo_dependency\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n    - name: int_width\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The interfacial width of the void surface.  Defaults to sharp interface\n    - name: invalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value inside the circle\n    - name: outvalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value outside the circle\n    - name: radii\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The radius for each circle\n    - name: rand_seed\n      required: No\n      default: !!str 12345\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Seed value for the random number generator\n    - name: type\n      required: No\n      default: !!str SpecifiedSmoothCircleIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: x_positions\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The x-coordinate for each circle center\n    - name: y_positions\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The y-coordinate for each circle center\n    - name: z_positions\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The z-coordinate for each circle center\n    - name: zero_gradient\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n    subblocks:\n  - name: /ICs/SpecifiedSmoothSuperellipsoidIC\n    description: |\n      Multiple smooth superellipsoids with manually specified center points; semiaxes a,b,c; and exponents n\n    parameters:\n    - name: as\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Semiaxis a for each superellipsoid\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bs\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Semiaxis b for each superellipsoid\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: cs\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Semiaxis c for each superellipsoid\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: ignore_uo_dependency\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n    - name: int_width\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The interfacial width of the void surface.  Defaults to sharp interface\n    - name: invalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value inside the superellipsoid\n    - name: nestedvalue\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value for nested particles inside the superellipsoid in inverse configuration\n    - name: ns\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Exponent n for each superellipsoid\n    - name: outvalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value outside the superellipsoid\n    - name: rand_seed\n      required: No\n      default: !!str 12345\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Seed value for the random number generator\n    - name: type\n      required: No\n      default: !!str SpecifiedSmoothSuperellipsoidIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: x_positions\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The x-coordinate for each superellipsoid center\n    - name: y_positions\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The y-coordinate for each superellipsoid center\n    - name: z_positions\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The z-coordinate for each superellipsoid center\n    - name: zero_gradient\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n    subblocks:\n  - name: /ICs/ThumbIC\n    description: |\n      Thumb shaped bicrystal for grain boundary mobility tests\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: height\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The z coordinate of the circle center\n    - name: ignore_uo_dependency\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n    - name: invalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value inside the circle\n    - name: outvalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value outside the circle\n    - name: type\n      required: No\n      default: !!str ThumbIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: width\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The y coordinate of the circle center\n    - name: xcoord\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The x coordinate of the circle center\n    subblocks:\n  - name: /ICs/Tricrystal2CircleGrainsIC\n    description: |\n      Tricrystal with two circles/bubbles\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: ignore_uo_dependency\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n    - name: op_index\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Index for the current grain order parameter\n    - name: op_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of grain order parameters\n    - name: type\n      required: No\n      default: !!str Tricrystal2CircleGrainsIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    subblocks:\n  - name: /ICs/TricrystalTripleJunctionIC\n    description: |\n      Tricrystal with a triple junction\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: ignore_uo_dependency\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n    - name: junction\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        The point where the triple junction is located. Default is the center of the mesh\n    - name: op_index\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Index for the current grain order parameter\n    - name: op_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of grain order parameters\n    - name: theta1\n      required: No\n      default: !!str 135\n      cpp_type: double\n      group_name: \n      description: |\n        Angle of first grain at triple junction in degrees\n    - name: theta2\n      required: No\n      default: !!str 135\n      cpp_type: double\n      group_name: \n      description: |\n        Angle of second grain at triple junction in degrees\n    - name: type\n      required: No\n      default: !!str TricrystalTripleJunctionIC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    subblocks:\n- name: /InterfaceKernels\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /InterfaceKernels/*\n    description: |\n      \n    parameters:\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: isObjectAction\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates that this is a MooseObjectAction.\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /InterfaceKernels/EqualGradientLagrangeInterface\n    description: |\n      Enforce componentwise gradient continuity between two different variables across a subdomain boundary using a Lagrange multiplier\n    parameters:\n    - name: _moose_base\n      required: No\n      default: !!str InterfaceKernel\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Gradient component to constrain\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: diag_save_in_var_side\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: m s\n      description: |\n        This parameter must exist if diag_save_in variables are specified and must have the same length as diag_save_in. This vector specifies whether the corresponding aux_var should save-in jacobian contributions from the master (\'m\') or slave side (\'s\').\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: lambda\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The gradient constrained variable on this side of the interface.\n    - name: neighbor_var\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable on the other side of the interface.\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: save_in_var_side\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: m s\n      description: |\n        This parameter must exist if save_in variables are specified and must have the same length as save_in. This vector specifies whether the corresponding aux_var should save-in residual contributions from the master (\'m\') or slave side (\'s\').\n    - name: type\n      required: No\n      default: !!str EqualGradientLagrangeInterface\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /InterfaceKernels/EqualGradientLagrangeMultiplier\n    description: |\n      Lagrange multiplier kernel for EqualGradientLagrangeInterface.\n    parameters:\n    - name: _moose_base\n      required: No\n      default: !!str InterfaceKernel\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Gradient component to constrain\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: diag_save_in_var_side\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: m s\n      description: |\n        This parameter must exist if diag_save_in variables are specified and must have the same length as diag_save_in. This vector specifies whether the corresponding aux_var should save-in jacobian contributions from the master (\'m\') or slave side (\'s\').\n    - name: element_var\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The gradient constrained variable on this side of the interface.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: jacobian_fill\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Compensate on diagonal Jacobian fill term when using a NullKernel on the Lagrange multiplier variable\n    - name: neighbor_var\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable on the other side of the interface.\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: save_in_var_side\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: m s\n      description: |\n        This parameter must exist if save_in variables are specified and must have the same length as save_in. This vector specifies whether the corresponding aux_var should save-in residual contributions from the master (\'m\') or slave side (\'s\').\n    - name: type\n      required: No\n      default: !!str EqualGradientLagrangeMultiplier\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /InterfaceKernels/InterfaceDiffusionBoundaryTerm\n    description: |\n      Add weak form surface terms of the Diffusion equation for two different variables across a subdomain boundary\n    parameters:\n    - name: D\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Diffusion coefficient\n    - name: D_neighbor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Neighbor variable diffusion coefficient\n    - name: _moose_base\n      required: No\n      default: !!str InterfaceKernel\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: diag_save_in_var_side\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: m s\n      description: |\n        This parameter must exist if diag_save_in variables are specified and must have the same length as diag_save_in. This vector specifies whether the corresponding aux_var should save-in jacobian contributions from the master (\'m\') or slave side (\'s\').\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: neighbor_var\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable on the other side of the interface.\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: save_in_var_side\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: m s\n      description: |\n        This parameter must exist if save_in variables are specified and must have the same length as save_in. This vector specifies whether the corresponding aux_var should save-in residual contributions from the master (\'m\') or slave side (\'s\').\n    - name: type\n      required: No\n      default: !!str InterfaceDiffusionBoundaryTerm\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /InterfaceKernels/InterfaceDiffusionFluxMatch\n    description: |\n      Enforce flux continuity between two different variables across a subdomain boundary\n    parameters:\n    - name: D\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Diffusion coefficient\n    - name: D_neighbor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Neighbor variable diffusion coefficient\n    - name: _moose_base\n      required: No\n      default: !!str InterfaceKernel\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: diag_save_in_var_side\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: m s\n      description: |\n        This parameter must exist if diag_save_in variables are specified and must have the same length as diag_save_in. This vector specifies whether the corresponding aux_var should save-in jacobian contributions from the master (\'m\') or slave side (\'s\').\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: neighbor_var\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable on the other side of the interface.\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: save_in_var_side\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: m s\n      description: |\n        This parameter must exist if save_in variables are specified and must have the same length as save_in. This vector specifies whether the corresponding aux_var should save-in residual contributions from the master (\'m\') or slave side (\'s\').\n    - name: type\n      required: No\n      default: !!str InterfaceDiffusionFluxMatch\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /InterfaceKernels/InterfaceForce_ld\n    description: |\n      \n    parameters:\n    - name: _moose_base\n      required: No\n      default: !!str InterfaceKernel\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: coupled_l_p\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Ln precipitation in liquid\n    - name: coupled_s_p\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Ln precipitation in solid\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: diag_save_in_var_side\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: m s\n      description: |\n        This parameter must exist if diag_save_in variables are specified and must have the same length as diag_save_in. This vector specifies whether the corresponding aux_var should save-in jacobian contributions from the master (\'m\') or slave side (\'s\').\n    - name: diffusivity_in_liquid\n      required: No\n      default: !!str 0\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of diffusivity material in the liquid\n    - name: diffusivity_in_solid\n      required: No\n      default: !!str 0\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of diffusivity material in the solid\n    - name: driving_rate\n      required: No\n      default: !!str 1\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        driving force rate between the interface\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: neighbor_var\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable on the other side of the interface.\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: save_in_var_side\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: m s\n      description: |\n        This parameter must exist if save_in variables are specified and must have the same length as save_in. This vector specifies whether the corresponding aux_var should save-in residual contributions from the master (\'m\') or slave side (\'s\').\n    - name: solubility_in_liquid\n      required: No\n      default: !!str 0\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of solubility material in the liquid\n    - name: solubility_in_solid\n      required: No\n      default: !!str 0\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of solubility material in the solid\n    - name: type\n      required: No\n      default: !!str InterfaceForce_ld\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: unit_scalor\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        unit_scalor for the precipitate\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /InterfaceKernels/InterfaceForce_lp\n    description: |\n      \n    parameters:\n    - name: _moose_base\n      required: No\n      default: !!str InterfaceKernel\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: coupled_s_p\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Ln precipitation in solid\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: diag_save_in_var_side\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: m s\n      description: |\n        This parameter must exist if diag_save_in variables are specified and must have the same length as diag_save_in. This vector specifies whether the corresponding aux_var should save-in jacobian contributions from the master (\'m\') or slave side (\'s\').\n    - name: diffusivity_in_solid_lp\n      required: No\n      default: !!str 1\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of diffusivity material in the Ln precipitate in liquid\n    - name: diffusivity_in_solid_sd\n      required: No\n      default: !!str 1\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of diffusivity material in the solid fuel\n    - name: driving_rate\n      required: No\n      default: !!str 1\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        driving force rate between the interface\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: neighbor_var\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable on the other side of the interface.\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: save_in_var_side\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: m s\n      description: |\n        This parameter must exist if save_in variables are specified and must have the same length as save_in. This vector specifies whether the corresponding aux_var should save-in residual contributions from the master (\'m\') or slave side (\'s\').\n    - name: solubility_in_solid\n      required: No\n      default: !!str 0\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of solubility material in the solid\n    - name: stop_threshold\n      required: No\n      default: !!str 990000\n      cpp_type: double\n      group_name: \n      description: |\n        Ln concentration stoping threshold for such flux\n    - name: type\n      required: No\n      default: !!str InterfaceForce_lp\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: unit_scalor\n      required: No\n      default: !!str 1e+06\n      cpp_type: double\n      group_name: \n      description: |\n        atomic density for the pure Ln\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /InterfaceKernels/InterfaceForce_sp\n    description: |\n      \n    parameters:\n    - name: _moose_base\n      required: No\n      default: !!str InterfaceKernel\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: coupled_l_p\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Ln precipitation in solid\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: diag_save_in_var_side\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: m s\n      description: |\n        This parameter must exist if diag_save_in variables are specified and must have the same length as diag_save_in. This vector specifies whether the corresponding aux_var should save-in jacobian contributions from the master (\'m\') or slave side (\'s\').\n    - name: diffusivity_in_solid_lp\n      required: No\n      default: !!str 1\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of diffusivity material in the Ln precipitate in liquid\n    - name: diffusivity_in_solid_sd\n      required: No\n      default: !!str 1\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of diffusivity material in the solid fuel\n    - name: driving_rate\n      required: No\n      default: !!str 1\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        driving force rate between the interface\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: neighbor_var\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable on the other side of the interface.\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: save_in_var_side\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: m s\n      description: |\n        This parameter must exist if save_in variables are specified and must have the same length as save_in. This vector specifies whether the corresponding aux_var should save-in residual contributions from the master (\'m\') or slave side (\'s\').\n    - name: solubility_in_liquid\n      required: No\n      default: !!str 0\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of solubility material in the liquid\n    - name: stop_threshold\n      required: No\n      default: !!str 990000\n      cpp_type: double\n      group_name: \n      description: |\n        Ln concentration stoping threshold for such flux\n    - name: type\n      required: No\n      default: !!str InterfaceForce_sp\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: unit_scalor\n      required: No\n      default: !!str 1e+06\n      cpp_type: double\n      group_name: \n      description: |\n        atomic density for the pure Ln\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n- name: /Kernels\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /Kernels/*\n    description: |\n      \n    parameters:\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: isObjectAction\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates that this is a MooseObjectAction.\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /Kernels/ACGBPoly\n    description: |\n      Grain-Boundary model concentration dependent residual\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the mobility\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Other species concentration\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: en_ratio\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of surface energy to GB energy\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str L\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ACGBPoly\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/ACGrGrElasticDrivingForce\n    description: |\n      Adds elastic energy contribution to the Allen-Cahn equation\n    parameters:\n    - name: D_tensor_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The elastic tensor derivative for the specific order parameter\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the mobility\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str L\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ACGrGrElasticDrivingForce\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/ACGrGrMulti\n    description: |\n      Multi-phase poly-crystaline Allen-Cahn Kernel\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the mobility\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: gamma_names\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        List of gamma material property names for each other order parameter. Place in same order as order parameters (v)!\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str L\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ACGrGrMulti\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled order paramter names for other order parameters\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/ACGrGrPoly\n    description: |\n      Grain-Boundary model poly-crystaline interface Allen-Cahn Kernel\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the mobility\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str L\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ACGrGrPoly\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled order paramter names for other order parameters\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/ACInterface\n    description: |\n      Gradient energy Allen-Cahn Kernel\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of nonlinear variable arguments this object depends on\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: kappa_name\n      required: No\n      default: !!str kappa_op\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The kappa used with the kernel\n    - name: mob_name\n      required: No\n      default: !!str L\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ACInterface\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: variable_L\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        The mobility is a function of any MOOSE variable (if this is set to false L must be constant over the entire domain!)\n    subblocks:\n  - name: /Kernels/ACInterfaceKobayashi1\n    description: |\n      Anisotropic gradient energy Allen-Cahn Kernel Part 1\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of nonlinear variable arguments this object depends on\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: ddepsdgrad_op_name\n      required: No\n      default: !!str ddepsdgrad_op\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The derivative of deps with respect to grad_op\n    - name: deps_name\n      required: No\n      default: !!str deps\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The derivative of the anisotropic interface parameter with respect to angle\n    - name: depsdgrad_op_name\n      required: No\n      default: !!str depsdgrad_op\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The derivative of the anisotropic interface parameter eps with respect to grad_op\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: eps_name\n      required: No\n      default: !!str eps\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The anisotropic interface parameter\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str L\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ACInterfaceKobayashi1\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/ACInterfaceKobayashi2\n    description: |\n      Anisotropic Gradient energy Allen-Cahn Kernel Part 2\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of nonlinear variable arguments this object depends on\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depsdgrad_op_name\n      required: No\n      default: !!str depsdgrad_op\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The derivative of the anisotropic interface parameter eps with respect to grad_op\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: eps_name\n      required: No\n      default: !!str eps\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The anisotropic parameter\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str L\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ACInterfaceKobayashi2\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/ACInterfaceStress\n    description: |\n      Interface stress driving force Allen-Cahn Kernel\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property base name\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str L\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: op_range\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Range over which order parameters change across an interface. By default order parameters are assumed to vary from 0 to 1\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: stress\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Planar stress\n    - name: type\n      required: No\n      default: !!str ACInterfaceStress\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/ACMultiInterface\n    description: |\n      Gradient energy Allen-Cahn Kernel with cross terms\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: etas\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        All eta_i order parameters of the multiphase problem\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: kappa_names\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        The kappa used with the kernel\n    - name: mob_name\n      required: No\n      default: !!str L\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ACMultiInterface\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/ACSEDGPoly\n    description: |\n      Stored Energy contribution to grain growth\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the mobility\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: deformed_grain_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of OP representing deformed grains\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: grain_tracker\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The GrainTracker UserObject to get values from.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str L\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ACSEDGPoly\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variable names\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/ACSwitching\n    description: |\n      Kernel for Allen-Cahn equation that adds derivatives of switching functions and energies\n    parameters:\n    - name: Fj_names\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        List of free energies for each phase. Place in same order as hj_names!\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the mobility\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: hj_names\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Switching Function Materials that provide h. Place in same order as Fj_names!\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str L\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ACSwitching\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/AllenCahn\n    description: |\n      Allen-Cahn Kernel that uses a DerivativeMaterial Free Energy\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the mobility\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: f_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function F defined in a DerivativeParsedMaterial\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str L\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str AllenCahn\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/AllenCahnPFFracture\n    description: |\n      Kernel to compute bulk energy contribution to damage order parameter residual equation\n    parameters:\n    - name: F_name\n      required: No\n      default: !!str E_el\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of material property storing the elastic energy\n    - name: beta\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variable storing the laplacian of c\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: displacements\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The string of displacements suitable for the problem statement\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: gc\n      required: No\n      default: !!str gc_prop\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Critical fracture energy density\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: l_name\n      required: No\n      default: !!str l\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Interface width\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str AllenCahnPFFracture\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: visco_name\n      required: No\n      default: !!str visco\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Viscosity parameter\n    subblocks:\n  - name: /Kernels/AnisotropicDiffusion\n    description: |\n      Anisotropic diffusion kernel $\\nabla \\cdot -\\widetilde{k} \\nabla u$ with weak form given by $(\\nabla \\psi_i, \\widetilde{k} \\nabla u)$.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: tensor_coeff\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::TensorValue<double>\n      group_name: \n      description: |\n        The Tensor to multiply the Diffusion operator by\n    - name: type\n      required: No\n      default: !!str AnisotropicDiffusion\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/BodyForce\n    description: |\n      Demonstrates the multiple ways that scalar values can be introduced into kernels, e.g. (controllable) constants, functions, and postprocessors. Implements the weak form $(\\psi_i, -f)$.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: function\n      required: No\n      default: !!str 1\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        A function that describes the body force\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: postprocessor\n      required: No\n      default: !!str 1\n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        A postprocessor whose value is multiplied by the body force\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str BodyForce\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Coefficent to multiply by the body force term\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CHBulkPFCTrad\n    description: |\n      Cahn-Hilliard kernel for a polynomial phase field crystal free energy.\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the mobility\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str M\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CHBulkPFCTrad\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CHCpldPFCTrad\n    description: |\n      Split with a variable that holds the Laplacian of a phase field variable.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Field variable to take the Laplacian of\n    - name: coeff_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of coefficient\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CHCpldPFCTrad\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CHInterface\n    description: |\n      Gradient energy Cahn-Hilliard Kernel with a scalar (isotropic) mobility\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the mobility\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: kappa_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The kappa used with the kernel\n    - name: mob_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CHInterface\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CHInterfaceAniso\n    description: |\n      Gradient energy Cahn-Hilliard Kernel with a tensor (anisotropic) mobility\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the mobility\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: kappa_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The kappa used with the kernel\n    - name: mob_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CHInterfaceAniso\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CHMath\n    description: |\n      Simple demonstration Cahn-Hilliard Kernel using an algebraic double-well potential\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the mobility\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str M\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CHMath\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CHPFCRFF\n    description: |\n      Cahn-Hilliard residual for the RFF form of the phase field crystal model\n    parameters:\n    - name: Dmob_name\n      required: No\n      default: !!str DM\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The D mobility used with the kernel\n    - name: a\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Constants on Taylor Series\n    - name: b\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Constants on Taylor Series\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: c\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Constants on Taylor Series\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: has_MJac\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Jacobian information for the mobility is defined\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: log_approach\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: tolerance cancelation expansion nothing\n      description: |\n        Which approach will be used to handle the natural log\n    - name: mob_name\n      required: No\n      default: !!str M\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: n_exp_terms\n      required: No\n      default: !!str 4\n      cpp_type: double\n      group_name: \n      description: |\n        Number of terms used in the Taylor expansion of the natural log term\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: tol\n      required: No\n      default: !!str 1e-09\n      cpp_type: double\n      group_name: \n      description: |\n        Tolerance used when the tolerance approach is chosen\n    - name: type\n      required: No\n      default: !!str CHPFCRFF\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of names of the real parts of the L variables\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CHPFCRFFSplitKernel\n    description: |\n      \n    parameters:\n    - name: L_name_base\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name for the complex L variables\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: log_approach\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: tolerance cancelation expansion\n      description: |\n        Which approach will be used to handle the natural log\n    - name: mob_name\n      required: No\n      default: !!str M\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used for n in this model\n    - name: n_exp_terms\n      required: No\n      default: !!str 4\n      cpp_type: double\n      group_name: \n      description: |\n        Number of terms used in the Taylor expansion of the natural log term\n    - name: n_name\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        Variable name used for the n variable\n    - name: num_L\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        specifies the number of complex L variables will be solved for\n    - name: tol\n      required: No\n      default: !!str 1e-09\n      cpp_type: double\n      group_name: \n      description: |\n        Tolerance used when the tolerance approach is chosen\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to use displaced mesh in the kernels\n    subblocks:\n  - name: /Kernels/CHSplitChemicalPotential\n    description: |\n      Chemical potential kernel in Split Cahn-Hilliard that solves chemical potential in a weak form\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Concentration\n    - name: chemical_potential_prop\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Chemical potential property name\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CHSplitChemicalPotential\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CHSplitConcentration\n    description: |\n      Concentration kernel in Split Cahn-Hilliard that solves chemical potential in a weak form\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: chemical_potential_var\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Chemical potential variable\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mobility\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Mobility property name\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CHSplitConcentration\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CHSplitFlux\n    description: |\n      Computes flux $j$ as nodal variable $j = -M\\nabla\\mu$\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: c\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Concentration\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Flux component\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mobility_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Mobility property name\n    - name: mu\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Chemical Potential\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CHSplitFlux\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CahnHilliard\n    description: |\n      Cahn-Hilliard Kernel that uses a DerivativeMaterial Free Energy and a scalar (isotropic) mobility\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the mobility\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: displacement_gradients\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of displacement gradient variables (see Modules/PhaseField/DisplacementGradients action)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: f_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function F defined in a DerivativeParsedMaterial\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str M\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CahnHilliard\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CahnHilliardAniso\n    description: |\n      Cahn-Hilliard Kernel that uses a DerivativeMaterial Free Energy and a tensor (anisotropic) mobility\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the mobility\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: displacement_gradients\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of displacement gradient variables (see Modules/PhaseField/DisplacementGradients action)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: f_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function F defined in a DerivativeParsedMaterial\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str M\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CahnHilliardAniso\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CoefCoupledTimeDerivative\n    description: |\n      Scaled time derivative Kernel that acts on a coupled variable\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: coef\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Coefficient\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CoefCoupledTimeDerivative\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled variable\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CoefReaction\n    description: |\n      Implements the residual term (p*u, test)\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: coefficient\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Coefficient of the term\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CoefReaction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/ConservativeAdvection\n    description: |\n      Conservative form of $\\nabla \\cdot \\vec{v} u$ which in its weak form is given by: $(-\\nabla \\psi_i, \\vec{v} u)$.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ConservativeAdvection\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: velocity\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Velocity vector\n    subblocks:\n  - name: /Kernels/ConservedLangevinNoise\n    description: |\n      Source term for noise from a ConservativeNoise userobject\n    parameters:\n    - name: amplitude\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Amplitude\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: multiplier\n      required: No\n      default: !!str 1\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Material property to multiply the random numbers with (defaults to 1.0 if omitted)\n    - name: noise\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        ConservativeNoise userobject that produces the random numbers\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ConservedLangevinNoise\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CosseratStressDivergenceTensors\n    description: |\n      Stress divergence kernel for the Cartesian coordinate system\n    parameters:\n    - name: Cosserat_rotations\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The 3 Cosserat rotation variables\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property base name\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The string of displacements suitable for the problem statement\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: temperature\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the temperature variable used in the ComputeThermalExpansionEigenstrain.  (Not required for simulations without temperature coupling.)\n    - name: thermal_eigenstrain_name\n      required: No\n      default: !!str thermal_eigenstrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The eigenstrain_name used in the ComputeThermalExpansionEigenstrain.\n    - name: type\n      required: No\n      default: !!str CosseratStressDivergenceTensors\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_finite_deform_jacobian\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Jacobian for corotational finite strain\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: volumetric_locking_correction\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to false to turn off volumetric locking correction\n    subblocks:\n  - name: /Kernels/CoupledAllenCahn\n    description: |\n      Coupled Allen-Cahn Kernel that uses a DerivativeMaterial Free Energy\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the mobility\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: f_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function F defined in a DerivativeParsedMaterial\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str L\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CoupledAllenCahn\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled variable\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CoupledForce\n    description: |\n      Implements a source term proportional to the value of a coupled variable. Weak form: $(\\psi_i, -\\sigma v)$.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: coef\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Coefficent ($\\sigma$) multiplier for the coupled force term.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CoupledForce\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The coupled variable which provides the force\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CoupledMaterialDerivative\n    description: |\n      Kernel that implements (dFdv, test), where F is a property and v is a coupled variable\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of other nonlinear variables this object depends on\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: f_name\n      required: No\n      default: !!str F\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The free energy material\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CoupledMaterialDerivative\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variable for the parital derivatives of the free energy\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CoupledSusceptibilityTimeDerivative\n    description: |\n      A modified coupled time derivative Kernel that multiplies the time derivative of a coupled variable by a generalized susceptibility\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the susceptibility\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: f_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Susceptibility function F defined in a FunctionMaterial\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CoupledSusceptibilityTimeDerivative\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled variable\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CoupledSwitchingTimeDerivative\n    description: |\n      Coupled time derivative Kernel that multiplies the time derivative by $\\frac{dh_\\alpha}{d\\eta_i} F_\\alpha + \\frac{dh_\\beta}{d\\eta_i} F_\\beta + \\dots)\n    parameters:\n    - name: Fj_names\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        List of functions for each phase. Place in same order as hj_names!\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of Fj and hj\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: hj_names\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Switching Function Materials that provide h. Place in same order as Fj_names!\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CoupledSwitchingTimeDerivative\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled variable\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CoupledTimeDerivative\n    description: |\n      Time derivative Kernel that acts on a coupled variable. Weak form: $(\\psi_i, \\frac{\\partial v_h}{\\partial t})$.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CoupledTimeDerivative\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled variable\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/Diffusion\n    description: |\n      The Laplacian operator ($-\\nabla \\cdot \\nabla u$), with the weak form of $(\\nabla \\phi_i, \\nabla u_h)$.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str Diffusion\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/DynamicStressDivergenceTensors\n    description: |\n      Residual due to stress related Rayleigh damping and HHT time integration terms \n    parameters:\n    - name: alpha\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        alpha parameter for HHT time integration\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property base name\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The string of displacements suitable for the problem statement\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: static_initialization\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true to get the system to equillibrium under gravity by running a quasi-static analysis (by solving Ku = F) in the first time step\n    - name: temperature\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the temperature variable used in the ComputeThermalExpansionEigenstrain.  (Not required for simulations without temperature coupling.)\n    - name: thermal_eigenstrain_name\n      required: No\n      default: !!str thermal_eigenstrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The eigenstrain_name used in the ComputeThermalExpansionEigenstrain.\n    - name: type\n      required: No\n      default: !!str DynamicStressDivergenceTensors\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_finite_deform_jacobian\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Jacobian for corotational finite strain\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: volumetric_locking_correction\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to false to turn off volumetric locking correction\n    - name: zeta\n      required: No\n      default: !!str 0\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of material property or a constant real number defining the zeta parameter for the Rayleigh damping.\n    subblocks:\n  - name: /Kernels/DynamicTensorMechanics\n    description: |\n      \n    parameters:\n    - name: add_variables\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Add the displacement variables\n    - name: additional_generate_output\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \'Output\'\n      options: creep_strain_xx creep_strain_xy creep_strain_xz creep_strain_yx creep_strain_yy creep_strain_yz creep_strain_zx creep_strain_zy creep_strain_zz elastic_strain_xx elastic_strain_xy elastic_strain_xz elastic_strain_yx elastic_strain_yy elastic_strain_yz elastic_strain_zx elastic_strain_zy elastic_strain_zz plastic_strain_xx plastic_strain_xy plastic_strain_xz plastic_strain_yx plastic_strain_yy plastic_strain_yz plastic_strain_zx plastic_strain_zy plastic_strain_zz strain_xx strain_xy strain_xz strain_yx strain_yy strain_yz strain_zx strain_zy strain_zz stress_xx stress_xy stress_xz stress_yx stress_yy stress_yz stress_zx stress_zy stress_zz effective_plastic_strain effective_creep_strain firstinv_stress firstinv_strain hydrostatic_stress max_principal_stress mid_principal_stress min_principal_stress secondinv_stress secondinv_strain thirdinv_stress thirdinv_strain vonmises_stress\n      description: |\n        Add scalar quantity output for stress and/or strain (will be appended to the list in `generate_output`)\n    - name: alpha\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        alpha parameter for HHT time integration\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property base name\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \'Advanced\'\n      description: |\n        The list of ids of the blocks (subdomain) that the stress divergence kernels will be applied to\n    - name: decomposition_method\n      required: No\n      default: !!str TaylorExpansion\n      cpp_type: MooseEnum\n      group_name: \n      options: TaylorExpansion EigenSolution\n      description: |\n        Methods to calculate the finite strain and rotation increments\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The displacement diagonal preconditioner terms\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >\n      group_name: \n      description: |\n        The nonlinear displacement variables for the problem\n    - name: eigenstrain_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        List of eigenstrains to be applied in this strain calculation\n    - name: generate_output\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \'Output\'\n      options: creep_strain_xx creep_strain_xy creep_strain_xz creep_strain_yx creep_strain_yy creep_strain_yz creep_strain_zx creep_strain_zy creep_strain_zz elastic_strain_xx elastic_strain_xy elastic_strain_xz elastic_strain_yx elastic_strain_yy elastic_strain_yz elastic_strain_zx elastic_strain_zy elastic_strain_zz plastic_strain_xx plastic_strain_xy plastic_strain_xz plastic_strain_yx plastic_strain_yy plastic_strain_yz plastic_strain_zx plastic_strain_zy plastic_strain_zz strain_xx strain_xy strain_xz strain_yx strain_yy strain_yz strain_zx strain_zy strain_zz stress_xx stress_xy stress_xz stress_yx stress_yy stress_yz stress_zx stress_zy stress_zz effective_plastic_strain effective_creep_strain firstinv_stress firstinv_strain hydrostatic_stress max_principal_stress mid_principal_stress min_principal_stress secondinv_stress secondinv_strain thirdinv_stress thirdinv_strain vonmises_stress\n      description: |\n        Add scalar quantity output for stress and/or strain\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: incremental\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Use incremental or total strain\n    - name: out_of_plane_pressure\n      required: No\n      default: !!str 0\n      cpp_type: FunctionName\n      group_name: \'Out-of-plane stress/strain\'\n      description: |\n        Function used to prescribe pressure in the out-of-plane direction (y for 1D Axisymmetric or z for 2D Cartesian problems)\n    - name: planar_formulation\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Out-of-plane stress/strain\'\n      options: NONE PLANE_STRAIN GENERALIZED_PLANE_STRAIN\n      description: |\n        Out-of-plane stress/strain formulation\n    - name: pressure_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \'Out-of-plane stress/strain\'\n      description: |\n        Scale factor applied to prescribed pressure\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The displacement residuals\n    - name: scalar_out_of_plane_strain\n      required: No\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \'Out-of-plane stress/strain\'\n      description: |\n        Scalar variable for the out-of-plane strain (in y direction for 1D Axisymmetric or in z direction for 2D Cartesian problems)\n    - name: static_initialization\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true get the system to equillibrium under gravity by running a quasi-static analysis (by solving Ku = F) in the first time step.\n    - name: strain\n      required: No\n      default: !!str SMALL\n      cpp_type: MooseEnum\n      group_name: \n      options: SMALL FINITE\n      description: |\n        Strain formulation\n    - name: temperature\n      required: No\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The temperature\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to use displaced mesh in the kernels\n    - name: use_finite_deform_jacobian\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Jacobian for corrotational finite strain\n    - name: volumetric_locking_correction\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to correct volumetric locking\n    - name: zeta\n      required: No\n      default: !!str 0\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of material property or a constant real number defining the zeta parameter for the Rayleigh damping.\n    subblocks:\n  - name: /Kernels/GeneralizedPlaneStrainOffDiag\n    description: |\n      Generalized Plane Strain kernel to provide contribution of the out-of-plane strain to other kernels\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property base name\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >\n      group_name: \n      description: |\n        Variable for the displacements\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: eigenstrain_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        List of eigenstrains to be applied in this strain calculation\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: scalar_out_of_plane_strain\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Scalar variable for generalized plane strain\n    - name: scalar_out_of_plane_strain_index\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index number of scalar_out_of_plane_strain this kernel acts on\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: subblock_index_provider\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        SubblockIndexProvider user object name\n    - name: temperature\n      required: No\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        Variable for the temperature\n    - name: type\n      required: No\n      default: !!str GeneralizedPlaneStrainOffDiag\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/GradientComponent\n    description: |\n      Set the kernel variable to a specified component of the gradient of a coupled variable.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Component of the gradient of the coupled variable v\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str GradientComponent\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled variable to match gradient component of\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/Gravity\n    description: |\n      Apply gravity. Value is in units of acceleration.\n    parameters:\n    - name: alpha\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        alpha parameter required for HHT time integration scheme\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: function\n      required: No\n      default: !!str 1\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        A function that describes the gravitational force\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str Gravity\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Displaced mesh defaults to true\n    - name: value\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/HHPFCRFF\n    description: |\n      Reaction type kernel for the RFF phase fit crystal model\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: coupled_var\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the coupled variable, if one is used in the kernel\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: positive\n      required: Yes\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        If the kernel is positive, this is true, if negative, it is false\n    - name: prop_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of material property to be used in the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str HHPFCRFF\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/HHPFCRFFSplitKernel\n    description: |\n      \n    parameters:\n    - name: L_name_base\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name for the complex L variables\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: log_approach\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: tolerance cancelation expansion\n      description: |\n        Which approach will be used to handle the natural log\n    - name: mob_name\n      required: No\n      default: !!str M\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used for n in this model\n    - name: n_exp_terms\n      required: No\n      default: !!str 4\n      cpp_type: double\n      group_name: \n      description: |\n        Number of terms used in the Taylor expansion of the natural log term\n    - name: n_name\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        Variable name used for the n variable\n    - name: num_L\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        specifies the number of complex L variables will be solved for\n    - name: tol\n      required: No\n      default: !!str 1e-09\n      cpp_type: double\n      group_name: \n      description: |\n        Tolerance used when the tolerance approach is chosen\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to use displaced mesh in the kernels\n    subblocks:\n  - name: /Kernels/InertialForce\n    description: |\n      Calculates the residual for the interial force (M*accel) and the contribution of mass dependent Rayleigh damping and HHT time integration scheme [eta*M*((1+alpha)vel-alpha*vel_old)]\n    parameters:\n    - name: acceleration\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        acceleration variable\n    - name: alpha\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        alpha parameter for mass dependent numerical damping induced by HHT time integration scheme\n    - name: beta\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        beta parameter for Newmark Time integration\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: density\n      required: No\n      default: !!str density\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of Material Property that provides the density\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: eta\n      required: No\n      default: !!str 0\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of material property or a constant real number defining the eta parameter for the Rayleigh damping.\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        gamma parameter for Newmark Time integration\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str InertialForce\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: velocity\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        velocity variable\n    subblocks:\n  - name: /Kernels/InertialTorque\n    description: |\n      Kernel for interial torque: density * displacement x acceleration\n    parameters:\n    - name: accelerations\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The 3 acceleration variables\n    - name: alpha\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        alpha parameter for mass dependent numerical damping induced by HHT time integration scheme\n    - name: beta\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        beta parameter for Newmark Time integration\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The component of the Cosserat rotation Variable prescribed to this Kernel (0 for x, 1 for y, 2 for z)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: density\n      required: No\n      default: !!str density\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of Material Property that provides the density\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The 3 displacement variables\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: eta\n      required: No\n      default: !!str 0\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of material property or a constant real number defining the eta parameter for the Rayleigh damping.\n    - name: gamma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        gamma parameter for Newmark Time integration\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str InertialTorque\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: velocities\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The 3 velocity variables\n    subblocks:\n  - name: /Kernels/KKSACBulkC\n    description: |\n      KKS model kernel (part 2 of 2) for the Bulk Allen-Cahn. This includes all terms dependent on chemical potential.\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the mobility\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: ca\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        a-phase concentration\n    - name: cb\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        b-phase concentration\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: fa_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function F (f_base in the corresponding KKSBaseMaterial)\n    - name: fb_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function F (f_base in the corresponding KKSBaseMaterial)\n    - name: h_name\n      required: No\n      default: !!str h\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name for the switching function h(eta)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str L\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str KKSACBulkC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/KKSACBulkF\n    description: |\n      KKS model kernel (part 1 of 2) for the Bulk Allen-Cahn. This includes all terms NOT dependent on chemical potential.\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the mobility\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: fa_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function F (f_base in the corresponding KKSBaseMaterial)\n    - name: fb_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function F (f_base in the corresponding KKSBaseMaterial)\n    - name: g_name\n      required: No\n      default: !!str g\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name for the double well function g(eta)\n    - name: h_name\n      required: No\n      default: !!str h\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name for the switching function h(eta)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str L\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str KKSACBulkF\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: w\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Double well height parameter\n    subblocks:\n  - name: /Kernels/KKSCHBulk\n    description: |\n      KKS model kernel for the Bulk Cahn-Hilliard term. This operates on the concentration \'c\' as the non-linear variable\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the mobility\n    - name: args_a\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of additional arguments to Fa\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: ca\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        phase concentration corresponding to the non-linear variable of this kernel\n    - name: cb\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        phase concentration corresponding to the non-linear variable of this kernel\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: fa_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function F (f_name in the corresponding derivative function material)\n    - name: fb_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function F (f_name in the corresponding derivative function material)\n    - name: h_name\n      required: No\n      default: !!str h\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name for the switching function h(eta)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str M\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str KKSCHBulk\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/KKSMultiACBulkC\n    description: |\n      Multi-phase KKS model kernel (part 2 of 2) for the Bulk Allen-Cahn. This includes all terms dependent on chemical potential.\n    parameters:\n    - name: Fj_names\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        List of free energies for each phase. Place in same order as hj_names!\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the mobility\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: cj_names\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of phase concentrations cj. Place in same order as Fj_names!\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: eta_i\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Order parameter that derivatives are taken with respect to\n    - name: hj_names\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Switching Function Materials that provide h. Place in same order as Fj_names!\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str L\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str KKSMultiACBulkC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/KKSMultiACBulkF\n    description: |\n      KKS model kernel (part 1 of 2) for the Bulk Allen-Cahn. This includes all terms NOT dependent on chemical potential.\n    parameters:\n    - name: Fj_names\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        List of free energies for each phase. Place in same order as hj_names!\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the mobility\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: eta_i\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Order parameter that derivatives are taken with respect to\n    - name: gi_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name for the double well function g_i(eta_i)\n    - name: hj_names\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Switching Function Materials that provide h. Place in same order as Fj_names!\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str L\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str KKSMultiACBulkF\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: wi\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Double well height parameter\n    subblocks:\n  - name: /Kernels/KKSMultiPhaseConcentration\n    description: |\n      KKS multi-phase model kernel to enforce $c = h_1c_1 + h_2c_2 + h_3c_3 + \\dots$. The non-linear variable of this kernel is $c_n$, the final phase concentration in the list.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Physical concentration\n    - name: cj\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of phase concentrations cj. Place in same order as hj_names!\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: etas\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Order parameters for all phases\n    - name: hj_names\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Switching Function Materials that provide $h(\\eta_1, \\eta_2,\\dots)$\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str KKSMultiPhaseConcentration\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/KKSPhaseChemicalPotential\n    description: |\n      KKS model kernel to enforce the pointwise equality of phase chemical potentials  dFa/dca = dFb/dcb. The non-linear variable of this kernel is ca.\n    parameters:\n    - name: args_a\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of further parameters to Fa (optional, to add in second cross derivatives of Fa)\n    - name: args_b\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of further parameters to Fb (optional, to add in second cross derivatives of Fb)\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: cb\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Phase b concentration\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: fa_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function Fa (f_name in the corresponding derivative function material)\n    - name: fb_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function Fb (f_name in the corresponding derivative function material)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str KKSPhaseChemicalPotential\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/KKSPhaseConcentration\n    description: |\n      KKS model kernel to enforce the decomposition of concentration into phase concentration  (1-h(eta))*ca + h(eta)*cb - c = 0. The non-linear variable of this kernel is cb.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Real concentration\n    - name: ca\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Phase a concentration\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: eta\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Phase a/b order parameter\n    - name: h_name\n      required: No\n      default: !!str h\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name for the switching function h(eta)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str KKSPhaseConcentration\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/KKSSplitCHCRes\n    description: |\n      KKS model kernel for the split Bulk Cahn-Hilliard term. This operates on the chemical potential \'c\' as the non-linear variable\n    parameters:\n    - name: args_a\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of additional arguments to Fa\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: ca\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        phase concentration corresponding to the non-linear variable of this kernel\n    - name: cb\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        phase concentration corresponding to the non-linear variable of this kernel\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: fa_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function F (f_base in the corresponding KKSBaseMaterial)\n    - name: fb_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function F (f_base in the corresponding KKSBaseMaterial)\n    - name: h_name\n      required: No\n      default: !!str h\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name for the switching function h(eta)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str KKSSplitCHCRes\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: w\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Chemical potenial non-linear helper variable for the split solve\n    subblocks:\n  - name: /Kernels/LangevinNoise\n    description: |\n      Source term for non-conserved Langevin noise\n    parameters:\n    - name: amplitude\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Amplitude\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: multiplier\n      required: No\n      default: !!str 1\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Material property to multiply the random numbers with (defaults to 1.0 if omitted)\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str LangevinNoise\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/LaplacianSplit\n    description: |\n      Split with a variable that holds the Laplacian of a phase field variable.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Field variable to take the Laplacian of\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str LaplacianSplit\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/MaskedBodyForce\n    description: |\n      Kernel that defines a body force modified by a material mask\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: function\n      required: No\n      default: !!str 1\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        A function that describes the body force\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mask\n      required: No\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Material property defining the mask\n    - name: postprocessor\n      required: No\n      default: !!str 1\n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        A postprocessor whose value is multiplied by the body force\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaskedBodyForce\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Coefficent to multiply by the body force term\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/MassEigenKernel\n    description: |\n      An eigenkernel with weak form $\\lambda(\\psi_i, -u_h)$ where $\\lambda$ is the eigenvalue.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Use for eigenvalue problem (true) or source problem (false)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: eigen_postprocessor\n      required: No\n      default: !!str 1\n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the postprocessor that provides the eigenvalue.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MassEigenKernel\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/MassLumpedTimeDerivative\n    description: |\n      Lumped formulation of the time derivative $\\frac{\\partial u}{\\partial t}$. Its corresponding weak form is $\\dot{u_i}(\\psi_i, 1)$ where $\\dot{u_i}$ denotes the time derivative of the solution coefficient associated with node $i$.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MassLumpedTimeDerivative\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/MatAnisoDiffusion\n    description: |\n      Diffusion equation Kernel that takes an anisotropic Diffusivity from a material property\n    parameters:\n    - name: D_name\n      required: No\n      default: !!str D\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The name of the diffusivity\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the diffusivity\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: conc\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled concentration variable for kernel to operate on; if this is not specified, the kernel\'s nonlinear variable will be used as usual\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MatAnisoDiffusion\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/MatDiffusion\n    description: |\n      Diffusion equation Kernel that takes an isotropic Diffusivity from a material property\n    parameters:\n    - name: D_name\n      required: No\n      default: !!str D\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The name of the diffusivity\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the diffusivity\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: conc\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled concentration variable for kernel to operate on; if this is not specified, the kernel\'s nonlinear variable will be used as usual\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MatDiffusion\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/MatReaction\n    description: |\n      Kernel to add -L*v, where L=reaction rate, v=variable\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of nonlinear variable arguments this object depends on\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str L\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The reaction rate used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MatReaction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Set this to make v a coupled variable, otherwise it will use the kernel\'s nonlinear variable for v\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/MaterialDerivativeRankFourTestKernel\n    description: |\n      Class used for testing derivatives of a rank four tensor material property.\n    parameters:\n    - name: args\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        List of variables the material property depends on\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: derivative\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: \n      description: |\n        Select derivative to test derivatives of (leave empty for checking derivatives of the original material property)\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: i\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Tensor component\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: j\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Tensor component\n    - name: k\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Tensor component\n    - name: l\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Tensor component\n    - name: material_property\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of material property for which derivatives are to be tested.\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialDerivativeRankFourTestKernel\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/MaterialDerivativeRankTwoTestKernel\n    description: |\n      Class used for testing derivatives of a rank two tensor material property.\n    parameters:\n    - name: args\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        List of variables the material property depends on\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: derivative\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: \n      description: |\n        Select derivative to test derivatives of (leave empty for checking derivatives of the original material property)\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: i\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Tensor component\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: j\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Tensor component\n    - name: material_property\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of material property for which derivatives are to be tested.\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialDerivativeRankTwoTestKernel\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/MaterialDerivativeTestKernel\n    description: |\n      Class used for testing derivatives of a scalar material property.\n    parameters:\n    - name: args\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        List of variables the material property depends on\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: derivative\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: \n      description: |\n        Select derivative to test derivatives of (leave empty for checking derivatives of the original material property)\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: material_property\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of material property for which derivatives are to be tested.\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialDerivativeTestKernel\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/MomentBalancing\n    description: |\n      \n    parameters:\n    - name: Cosserat_rotations\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The 3 Cosserat rotation variables\n    - name: appended_property_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name appended to material properties to make them unique\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The 3 displacement variables\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MomentBalancing\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/MultiGrainRigidBodyMotion\n    description: |\n      Adds rigid mody motion to grains\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define type of force density under consideration\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Concentration\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: grain_force\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        UserObject for getting force and torque acting on grains\n    - name: grain_tracker_object\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The FeatureFloodCount UserObject to get values from.\n    - name: grain_volumes\n      required: Yes\n      default: !!str \n      cpp_type: VectorPostprocessorName\n      group_name: \n      description: |\n        The feature volume VectorPostprocessorValue.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Array of coupled variable names (num_name)\n    - name: rotation_constant\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        constant value characterizing grain rotation\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: translation_constant\n      required: No\n      default: !!str 500\n      cpp_type: double\n      group_name: \n      description: |\n        constant value characterizing grain translation\n    - name: type\n      required: No\n      default: !!str MultiGrainRigidBodyMotion\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variable names\n    - name: var_name_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Array of coupled variable names (base_name)\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/NullKernel\n    description: |\n      Kernel that sets a zero residual.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: jacobian_fill\n      required: No\n      default: !!str 1e-09\n      cpp_type: double\n      group_name: \n      description: |\n        On diagonal Jacobian fill term to retain an invertable matrix for the preconditioner\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NullKernel\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/OutOfPlanePressure\n    description: |\n      Apply pressure in the out-of-plane direction in 2D plane stress or generalized plane strain models \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Scale factor applied to prescribed pressure\n    - name: function\n      required: No\n      default: !!str 1.0\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Function used to prescribe pressure\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: postprocessor\n      required: No\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        Postprocessor used to prescribe pressure\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str OutOfPlanePressure\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/PFCRFFKernel\n    description: |\n      \n    parameters:\n    - name: L_name_base\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name for the complex L variables\n    - name: a\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Parameter in the Taylor series expansion\n    - name: b\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Parameter in the Taylor series expansion\n    - name: c\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Parameter in the Taylor series expansion\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: log_approach\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: tolerance cancelation expansion\n      description: |\n        Which approach will be used to handle the natural log\n    - name: mob_name\n      required: No\n      default: !!str M\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used for n in this model\n    - name: n_exp_terms\n      required: No\n      default: !!str 4\n      cpp_type: double\n      group_name: \n      description: |\n        Number of terms used in the Taylor expansion of the natural log term\n    - name: n_name\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        Variable name used for the n variable\n    - name: num_L\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        specifies the number of complex L variables will be solved for\n    - name: tol\n      required: No\n      default: !!str 1e-09\n      cpp_type: double\n      group_name: \n      description: |\n        Tolerance used when the tolerance approach is chosen\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to use displaced mesh in the kernels\n    subblocks:\n  - name: /Kernels/PFFracBulkRate\n    description: |\n      Kernel to compute bulk energy contribution to damage order parameter residual equation\n    parameters:\n    - name: G0_var\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Material property name with undamaged strain energy driving damage (G0_pos)\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: beta\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Laplacian of the kernel variable\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: dG0_dstrain_var\n      required: No\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Material property name with derivative of G0_pos with strain\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: displacements\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: gc_prop_var\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Material property which provides the maximum stress/crack stress\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: l\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Width of the smooth crack representation\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PFFracBulkRate\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: visco\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Viscosity parameter, which reflects the transition right at crack stress\n    subblocks:\n  - name: /Kernels/PFFracCoupledInterface\n    description: |\n      Phase-field fracture residual for beta variable: Contribution from gradient of damage order parameter\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Order parameter for damage\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PFFracCoupledInterface\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/PFFractureBulkRate\n    description: |\n      Kernel to compute bulk energy contribution to damage order parameter residual equation\n    parameters:\n    - name: G0\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Material property name with undamaged strain energy driving damage (G0_pos)\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: dG0_dstrain\n      required: No\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Material property name with derivative of G0_pos with strain\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: displacements\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: gc\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Material property which provides the maximum stress/crack stress\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PFFractureBulkRate\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: viscosity\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Viscosity parameter, which reflects the transition right at crack stress\n    - name: width\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Width of the smooth crack representation\n    subblocks:\n  - name: /Kernels/PhaseFieldFractureMechanicsOffDiag\n    description: |\n      Stress divergence kernel for phase-field fracture: Computes off diagonal damage dependent Jacobian components. To be used with StressDivergenceTensors or DynamicStressDivergenceTensors.\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property base name\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: c\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Phase field damage variable: Used to indicate calculation of Off Diagonal Jacobian term\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PhaseFieldFractureMechanicsOffDiag\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/PlasticHeatEnergy\n    description: |\n      Plastic heat energy density = coeff * stress * plastic_strain_rate\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property base name\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: coeff\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Heat energy density = coeff * stress * plastic_strain_rate\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The string of displacements suitable for the problem statement\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PlasticHeatEnergy\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/PolycrystalElasticDrivingForce\n    description: |\n      \n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: op_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        specifies the number of grains to create\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to use displaced mesh in the kernels\n    - name: var_name_base\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        specifies the base name of the variables\n    subblocks:\n  - name: /Kernels/PolycrystalKernel\n    description: |\n      \n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: \n      description: |\n        Vector of variable arguments L depends on\n    - name: c\n      required: No\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        Name of coupled concentration variable\n    - name: en_ratio\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of surface to GB energy\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether kernels are implicit or not\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: ndef\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        specifies the number of deformed grains to create\n    - name: op_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        specifies the total number of grains (deformed + recrystallized) to create\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to use displaced mesh in the kernels\n    - name: var_name_base\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        specifies the base name of the variables\n    - name: variable_mobility\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        The mobility is a function of any MOOSE variable (if this is set to false, L must be constant over the entire domain!)\n    subblocks:\n  - name: /Kernels/PolycrystalStoredEnergy\n    description: |\n      \n    parameters:\n    - name: T\n      required: No\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        Name of temperature variable\n    - name: c\n      required: No\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        Name of coupled concentration variable\n    - name: deformed_grain_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        specifies the number of deformed grains to create\n    - name: grain_tracker\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The GrainTracker UserObject to get values from.\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: op_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        specifies the total number of OPs representing all grains (deformed + undeformed (recrystallized)) to create\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to use displaced mesh in the kernels\n    - name: var_name_base\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        specifies the base name of the variables\n    subblocks:\n  - name: /Kernels/PoroMechanics\n    description: |\n      \n    parameters:\n    - name: add_variables\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Add the displacement variables\n    - name: additional_generate_output\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \'Output\'\n      options: creep_strain_xx creep_strain_xy creep_strain_xz creep_strain_yx creep_strain_yy creep_strain_yz creep_strain_zx creep_strain_zy creep_strain_zz elastic_strain_xx elastic_strain_xy elastic_strain_xz elastic_strain_yx elastic_strain_yy elastic_strain_yz elastic_strain_zx elastic_strain_zy elastic_strain_zz plastic_strain_xx plastic_strain_xy plastic_strain_xz plastic_strain_yx plastic_strain_yy plastic_strain_yz plastic_strain_zx plastic_strain_zy plastic_strain_zz strain_xx strain_xy strain_xz strain_yx strain_yy strain_yz strain_zx strain_zy strain_zz stress_xx stress_xy stress_xz stress_yx stress_yy stress_yz stress_zx stress_zy stress_zz effective_plastic_strain effective_creep_strain firstinv_stress firstinv_strain hydrostatic_stress max_principal_stress mid_principal_stress min_principal_stress secondinv_stress secondinv_strain thirdinv_stress thirdinv_strain vonmises_stress\n      description: |\n        Add scalar quantity output for stress and/or strain (will be appended to the list in `generate_output`)\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property base name\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \'Advanced\'\n      description: |\n        The list of ids of the blocks (subdomain) that the stress divergence kernels will be applied to\n    - name: decomposition_method\n      required: No\n      default: !!str TaylorExpansion\n      cpp_type: MooseEnum\n      group_name: \n      options: TaylorExpansion EigenSolution\n      description: |\n        Methods to calculate the finite strain and rotation increments\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The displacement diagonal preconditioner terms\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >\n      group_name: \n      description: |\n        The nonlinear displacement variables for the problem\n    - name: eigenstrain_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        List of eigenstrains to be applied in this strain calculation\n    - name: generate_output\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \'Output\'\n      options: creep_strain_xx creep_strain_xy creep_strain_xz creep_strain_yx creep_strain_yy creep_strain_yz creep_strain_zx creep_strain_zy creep_strain_zz elastic_strain_xx elastic_strain_xy elastic_strain_xz elastic_strain_yx elastic_strain_yy elastic_strain_yz elastic_strain_zx elastic_strain_zy elastic_strain_zz plastic_strain_xx plastic_strain_xy plastic_strain_xz plastic_strain_yx plastic_strain_yy plastic_strain_yz plastic_strain_zx plastic_strain_zy plastic_strain_zz strain_xx strain_xy strain_xz strain_yx strain_yy strain_yz strain_zx strain_zy strain_zz stress_xx stress_xy stress_xz stress_yx stress_yy stress_yz stress_zx stress_zy stress_zz effective_plastic_strain effective_creep_strain firstinv_stress firstinv_strain hydrostatic_stress max_principal_stress mid_principal_stress min_principal_stress secondinv_stress secondinv_strain thirdinv_stress thirdinv_strain vonmises_stress\n      description: |\n        Add scalar quantity output for stress and/or strain\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: incremental\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Use incremental or total strain\n    - name: out_of_plane_pressure\n      required: No\n      default: !!str 0\n      cpp_type: FunctionName\n      group_name: \'Out-of-plane stress/strain\'\n      description: |\n        Function used to prescribe pressure in the out-of-plane direction (y for 1D Axisymmetric or z for 2D Cartesian problems)\n    - name: planar_formulation\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Out-of-plane stress/strain\'\n      options: NONE PLANE_STRAIN GENERALIZED_PLANE_STRAIN\n      description: |\n        Out-of-plane stress/strain formulation\n    - name: porepressure\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The porepressure variable\n    - name: pressure_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \'Out-of-plane stress/strain\'\n      description: |\n        Scale factor applied to prescribed pressure\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The displacement residuals\n    - name: scalar_out_of_plane_strain\n      required: No\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \'Out-of-plane stress/strain\'\n      description: |\n        Scalar variable for the out-of-plane strain (in y direction for 1D Axisymmetric or in z direction for 2D Cartesian problems)\n    - name: strain\n      required: No\n      default: !!str SMALL\n      cpp_type: MooseEnum\n      group_name: \n      options: SMALL FINITE\n      description: |\n        Strain formulation\n    - name: temperature\n      required: No\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The temperature\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to use displaced mesh in the kernels\n    - name: use_finite_deform_jacobian\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Jacobian for corrotational finite strain\n    - name: volumetric_locking_correction\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to correct volumetric locking\n    subblocks:\n  - name: /Kernels/PoroMechanicsCoupling\n    description: |\n      Adds -BiotCoefficient*porepressure*grad_test[component]\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The gradient direction (0 for x, 1 for y and 2 for z)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: porepressure\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Porepressure.  This kernel adds -BiotCoefficient*porepressure*grad_test[component]\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PoroMechanicsCoupling\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/Precipitation\n    description: |\n      \n    parameters:\n    - name: Ave_l_p\n      required: No\n      default: !!str -1\n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        Test value of l_p average value in the pore from Postprocessors\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: diffusivity\n      required: No\n      default: !!str 1\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of diffusivity material properties\n    - name: dissolve_variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Ln precipitation in liquid redissolve.\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: precipitate_variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Ln solute in liquid precipitate.\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        scale factor of the precipitation\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: solubility\n      required: No\n      default: !!str 0\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Solubility of the Ln solute in corresponding media\n    - name: type\n      required: No\n      default: !!str Precipitation\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/Precipitation_liquid\n    description: |\n      \n    parameters:\n    - name: Ave_l_p\n      required: No\n      default: !!str -1\n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        Test value of l_p average value in the pore from Postprocessors\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: dissolve_variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Ln precipitation in liquid redissolve.\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: precipitate_variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Ln solute in liquid precipitate.\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        scale factor of the precipitation\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: solubility\n      required: No\n      default: !!str 0\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Solubility of the Ln solute in corresponding media\n    - name: type\n      required: No\n      default: !!str Precipitation_liquid\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/Reaction\n    description: |\n      Implements a simple consuming reaction term with weak form $(\\psi_i, u_h)$.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str Reaction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/RigidBodyMultiKernel\n    description: |\n      \n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define type of force density under consideration\n    - name: c\n      required: No\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        Name of coupled concentration variable\n    - name: f_name\n      required: No\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function F defined in a DerivativeParsedMaterial\n    - name: grain_force\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        userobject for getting force and torque acting on grains\n    - name: grain_tracker_object\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The FeatureFloodCount UserObject to get values from.\n    - name: grain_volumes\n      required: Yes\n      default: !!str \n      cpp_type: VectorPostprocessorName\n      group_name: \n      description: |\n        The feature volume VectorPostprocessorValue.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether kernels are implicit or not\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: kappa_name\n      required: No\n      default: !!str kappa_op\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The kappa used with the kernel\n    - name: mob_name\n      required: No\n      default: !!str L\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: op_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        specifies the number of grains to create\n    - name: rotation_constant\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        constant value characterizing grain rotation\n    - name: translation_constant\n      required: No\n      default: !!str 500\n      cpp_type: double\n      group_name: \n      description: |\n        constant value characterizing grain translation\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to use displaced mesh in the kernels\n    - name: var_name_base\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        specifies the base name of the variables\n    subblocks:\n  - name: /Kernels/SimpleACInterface\n    description: |\n      Gradient energy for Allen-Cahn Kernel with constant Mobility and Interfacial parameter\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: kappa_name\n      required: No\n      default: !!str kappa_op\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The kappa used with the kernel\n    - name: mob_name\n      required: No\n      default: !!str L\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SimpleACInterface\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/SimpleCHInterface\n    description: |\n      Gradient energy for Cahn-Hilliard equation with constant Mobility and Interfacial parameter\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: kappa_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The kappa used with the kernel, should be constant value\n    - name: mob_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel, should be constant value\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SimpleCHInterface\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/SimpleCoupledACInterface\n    description: |\n      Gradient energy for Allen-Cahn Kernel with constant Mobility and Interfacial parameter\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: kappa_name\n      required: No\n      default: !!str kappa_op\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The kappa used with the kernel\n    - name: mob_name\n      required: No\n      default: !!str L\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SimpleCoupledACInterface\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled variable that the Laplacian is taken of\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/SimpleSplitCHWRes\n    description: |\n      Gradient energy for split Cahn-Hilliard equation with constant Mobility\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str M\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel, should be a constant value\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SimpleSplitCHWRes\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/SingleGrainRigidBodyMotion\n    description: |\n      Adds rigid mody motion to a single grain\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define type of force density under consideration\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Concentration\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: grain_force\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        UserObject for getting force and torque acting on grains\n    - name: grain_tracker_object\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The FeatureFloodCount UserObject to get values from.\n    - name: grain_volumes\n      required: Yes\n      default: !!str \n      cpp_type: VectorPostprocessorName\n      group_name: \n      description: |\n        The feature volume VectorPostprocessorValue.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: op_index\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Grain number for the kernel to be applied\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Array of coupled variable names (num_name)\n    - name: rotation_constant\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        constant value characterizing grain rotation\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: translation_constant\n      required: No\n      default: !!str 500\n      cpp_type: double\n      group_name: \n      description: |\n        constant value characterizing grain translation\n    - name: type\n      required: No\n      default: !!str SingleGrainRigidBodyMotion\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variable names\n    - name: var_name_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Array of coupled variable names (base_name)\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/SoretDiffusion\n    description: |\n      Add Soret effect to Split formulation Cahn-Hilliard Kernel\n    parameters:\n    - name: Q_name\n      required: No\n      default: !!str Qheat\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The material name for the heat of transport\n    - name: T\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Temperature\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: c\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Concentration\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: diff_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The diffusivity used with the kernel\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SoretDiffusion\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/SplitCHMath\n    description: |\n      Simple demonstration split formulation Cahn-Hilliard Kernel using an algebraic double-well potential\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: kappa_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The kappa used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SplitCHMath\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: w\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        chem poten\n    subblocks:\n  - name: /Kernels/SplitCHParsed\n    description: |\n      Split formulation Cahn-Hilliard Kernel that uses a DerivativeMaterial Free Energy\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of additional arguments to F\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: f_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Base name of the free energy function F defined in a DerivativeParsedMaterial\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: kappa_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The kappa used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SplitCHParsed\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: w\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        chem poten\n    subblocks:\n  - name: /Kernels/SplitCHWRes\n    description: |\n      Split formulation Cahn-Hilliard Kernel for the chemical potential variable with a scalar (isotropic) mobility\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the mobility\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str mobtemp\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SplitCHWRes\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/SplitCHWResAniso\n    description: |\n      Split formulation Cahn-Hilliard Kernel for the chemical potential variable with a tensor (anisotropic) mobility\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the mobility\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mob_name\n      required: No\n      default: !!str mobtemp\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SplitCHWResAniso\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/SplitPFFractureBulkRate\n    description: |\n      Kernel to compute bulk energy contribution to damage order parameter residual equation\n    parameters:\n    - name: G0\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Material property name with undamaged strain energy driving damage (G0_pos)\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: beta\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Laplacian of the kernel variable\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: dG0_dstrain\n      required: No\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Material property name with derivative of G0_pos with strain\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: displacements\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: gc\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Material property which provides the maximum stress/crack stress\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SplitPFFractureBulkRate\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: viscosity\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Viscosity parameter, which reflects the transition right at crack stress\n    - name: width\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Width of the smooth crack representation\n    subblocks:\n  - name: /Kernels/StressDivergenceRSphericalTensors\n    description: |\n      Calculate stress divergence for an spherically symmetric 1D problem in polar coordinates.\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property base name\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z; note in this kernel disp_x refers to the radial displacement and disp_y refers to the axial displacement.)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The string of displacements suitable for the problem statement\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: temperature\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the temperature variable used in the ComputeThermalExpansionEigenstrain.  (Not required for simulations without temperature coupling.)\n    - name: thermal_eigenstrain_name\n      required: No\n      default: !!str thermal_eigenstrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The eigenstrain_name used in the ComputeThermalExpansionEigenstrain.\n    - name: type\n      required: No\n      default: !!str StressDivergenceRSphericalTensors\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_finite_deform_jacobian\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Jacobian for corotational finite strain\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: volumetric_locking_correction\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to false to turn off volumetric locking correction\n    subblocks:\n  - name: /Kernels/StressDivergenceRZTensors\n    description: |\n      Calculate stress divergence for an axisymmetric problem in cylinderical coordinates.\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property base name\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z; note in this kernel disp_x refers to the radial displacement and disp_y refers to the axial displacement.)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The string of displacements suitable for the problem statement\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: temperature\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the temperature variable used in the ComputeThermalExpansionEigenstrain.  (Not required for simulations without temperature coupling.)\n    - name: thermal_eigenstrain_name\n      required: No\n      default: !!str thermal_eigenstrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The eigenstrain_name used in the ComputeThermalExpansionEigenstrain.\n    - name: type\n      required: No\n      default: !!str StressDivergenceRZTensors\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_finite_deform_jacobian\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Jacobian for corotational finite strain\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: volumetric_locking_correction\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to false to turn off volumetric locking correction\n    subblocks:\n  - name: /Kernels/StressDivergenceTensors\n    description: |\n      Stress divergence kernel for the Cartesian coordinate system\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property base name\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The string of displacements suitable for the problem statement\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: temperature\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the temperature variable used in the ComputeThermalExpansionEigenstrain.  (Not required for simulations without temperature coupling.)\n    - name: thermal_eigenstrain_name\n      required: No\n      default: !!str thermal_eigenstrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The eigenstrain_name used in the ComputeThermalExpansionEigenstrain.\n    - name: type\n      required: No\n      default: !!str StressDivergenceTensors\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_finite_deform_jacobian\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Jacobian for corotational finite strain\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: volumetric_locking_correction\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to false to turn off volumetric locking correction\n    subblocks:\n  - name: /Kernels/StressDivergenceTensorsTruss\n    description: |\n      Kernel for truss element\n    parameters:\n    - name: area\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Cross-sectional area of truss element\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property base name\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: component\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        An integer corresponding to the direction the variable this kernel acts in. (0 for x, 1 for y, 2 for z)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: displacements\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The string of displacements suitable for the problem statement\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: temperature\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The temperature\n    - name: type\n      required: No\n      default: !!str StressDivergenceTensorsTruss\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/SusceptibilityTimeDerivative\n    description: |\n      A modified time derivative Kernel that multiplies the time derivative of a variable by a generalized susceptibility\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of arguments of the susceptibility\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: f_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Susceptibility function F defined in a FunctionMaterial\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: lumping\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        True for mass matrix lumping, false otherwise\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SusceptibilityTimeDerivative\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/SwitchingFunctionConstraintEta\n    description: |\n      Lagrange multiplier kernel to constrain the sum of all switching functions in a multiphase system. This kernel acts on a non-conserved order parameter eta_i.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: h_name\n      required: No\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Switching Function Materials that provides h(eta_i)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: lambda\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Lagrange multiplier\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SwitchingFunctionConstraintEta\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/SwitchingFunctionConstraintLagrange\n    description: |\n      Lagrange multiplier kernel to constrain the sum of all switching functions in a multiphase system. This kernel acts on the lagrange multiplier variable.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: epsilon\n      required: No\n      default: !!str 1e-09\n      cpp_type: double\n      group_name: \n      description: |\n        Shift factor to avoid a zero pivot\n    - name: etas\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        eta_i order parameters, one for each h\n    - name: h_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Switching Function Materials that provide h(eta_i)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SwitchingFunctionConstraintLagrange\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/SwitchingFunctionPenalty\n    description: |\n      Penalty kernel to constrain the sum of all switching functions in a multiphase system.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: etas\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        eta_i order parameters, one for each h\n    - name: h_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Switching Function Materials that provide h(eta_i)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: penalty\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Penalty scaling factor\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SwitchingFunctionPenalty\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/TensorMechanics\n    description: |\n      \n    parameters:\n    - name: add_variables\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Add the displacement variables\n    - name: additional_generate_output\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \'Output\'\n      options: creep_strain_xx creep_strain_xy creep_strain_xz creep_strain_yx creep_strain_yy creep_strain_yz creep_strain_zx creep_strain_zy creep_strain_zz elastic_strain_xx elastic_strain_xy elastic_strain_xz elastic_strain_yx elastic_strain_yy elastic_strain_yz elastic_strain_zx elastic_strain_zy elastic_strain_zz plastic_strain_xx plastic_strain_xy plastic_strain_xz plastic_strain_yx plastic_strain_yy plastic_strain_yz plastic_strain_zx plastic_strain_zy plastic_strain_zz strain_xx strain_xy strain_xz strain_yx strain_yy strain_yz strain_zx strain_zy strain_zz stress_xx stress_xy stress_xz stress_yx stress_yy stress_yz stress_zx stress_zy stress_zz effective_plastic_strain effective_creep_strain firstinv_stress firstinv_strain hydrostatic_stress max_principal_stress mid_principal_stress min_principal_stress secondinv_stress secondinv_strain thirdinv_stress thirdinv_strain vonmises_stress\n      description: |\n        Add scalar quantity output for stress and/or strain (will be appended to the list in `generate_output`)\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property base name\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \'Advanced\'\n      description: |\n        The list of ids of the blocks (subdomain) that the stress divergence kernels will be applied to\n    - name: decomposition_method\n      required: No\n      default: !!str TaylorExpansion\n      cpp_type: MooseEnum\n      group_name: \n      options: TaylorExpansion EigenSolution\n      description: |\n        Methods to calculate the finite strain and rotation increments\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The displacement diagonal preconditioner terms\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >\n      group_name: \n      description: |\n        The nonlinear displacement variables for the problem\n    - name: eigenstrain_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        List of eigenstrains to be applied in this strain calculation\n    - name: generate_output\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \'Output\'\n      options: creep_strain_xx creep_strain_xy creep_strain_xz creep_strain_yx creep_strain_yy creep_strain_yz creep_strain_zx creep_strain_zy creep_strain_zz elastic_strain_xx elastic_strain_xy elastic_strain_xz elastic_strain_yx elastic_strain_yy elastic_strain_yz elastic_strain_zx elastic_strain_zy elastic_strain_zz plastic_strain_xx plastic_strain_xy plastic_strain_xz plastic_strain_yx plastic_strain_yy plastic_strain_yz plastic_strain_zx plastic_strain_zy plastic_strain_zz strain_xx strain_xy strain_xz strain_yx strain_yy strain_yz strain_zx strain_zy strain_zz stress_xx stress_xy stress_xz stress_yx stress_yy stress_yz stress_zx stress_zy stress_zz effective_plastic_strain effective_creep_strain firstinv_stress firstinv_strain hydrostatic_stress max_principal_stress mid_principal_stress min_principal_stress secondinv_stress secondinv_strain thirdinv_stress thirdinv_strain vonmises_stress\n      description: |\n        Add scalar quantity output for stress and/or strain\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: incremental\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Use incremental or total strain\n    - name: out_of_plane_pressure\n      required: No\n      default: !!str 0\n      cpp_type: FunctionName\n      group_name: \'Out-of-plane stress/strain\'\n      description: |\n        Function used to prescribe pressure in the out-of-plane direction (y for 1D Axisymmetric or z for 2D Cartesian problems)\n    - name: planar_formulation\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Out-of-plane stress/strain\'\n      options: NONE PLANE_STRAIN GENERALIZED_PLANE_STRAIN\n      description: |\n        Out-of-plane stress/strain formulation\n    - name: pressure_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \'Out-of-plane stress/strain\'\n      description: |\n        Scale factor applied to prescribed pressure\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The displacement residuals\n    - name: scalar_out_of_plane_strain\n      required: No\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \'Out-of-plane stress/strain\'\n      description: |\n        Scalar variable for the out-of-plane strain (in y direction for 1D Axisymmetric or in z direction for 2D Cartesian problems)\n    - name: strain\n      required: No\n      default: !!str SMALL\n      cpp_type: MooseEnum\n      group_name: \n      options: SMALL FINITE\n      description: |\n        Strain formulation\n    - name: temperature\n      required: No\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The temperature\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to use displaced mesh in the kernels\n    - name: use_finite_deform_jacobian\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Jacobian for corrotational finite strain\n    - name: volumetric_locking_correction\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to correct volumetric locking\n    subblocks:\n  - name: /Kernels/TimeDerivative\n    description: |\n      The time derivative operator with the weak form of $(\\psi_i, \\frac{\\partial u_h}{\\partial t})$.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: lumping\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        True for mass matrix lumping, false otherwise\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str TimeDerivative\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/UserForcingFunction\n    description: |\n      Demonstrates the multiple ways that scalar values can be introduced into kernels, e.g. (controllable) constants, functions, and postprocessors. Implements the weak form $(\\psi_i, -f)$.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: function\n      required: No\n      default: !!str 1\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        A function that describes the body force\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: postprocessor\n      required: No\n      default: !!str 1\n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        A postprocessor whose value is multiplied by the body force\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str UserForcingFunction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Coefficent to multiply by the body force term\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/WeakPlaneStress\n    description: |\n      Plane stress kernel to provide out-of-plane strain contribution\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property base name\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: direction\n      required: No\n      default: !!str z\n      cpp_type: MooseEnum\n      group_name: \n      options: x y z\n      description: |\n        The out of plane direction\n    - name: eigen_kernel\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not this kernel will be used as an eigen kernel\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \'Advanced\'\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str WeakPlaneStress\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n- name: /Materials\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /Materials/*\n    description: |\n      \n    parameters:\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: isObjectAction\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates that this is a MooseObjectAction.\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /Materials/AsymmetricCrossTermBarrierFunctionMaterial\n    description: |\n      Free energy contribution asymmetric across interfaces between arbitrary pairs of phases.\n    parameters:\n    - name: W_ij\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Terms controlling barrier height set W=1 in DerivativeMultiPhaseMaterial for these to apply\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: etas\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        eta_i order parameters, one for each h\n    - name: function_name\n      required: No\n      default: !!str g\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        actual name for g(eta_i)\n    - name: g_order\n      required: No\n      default: !!str SIMPLE\n      cpp_type: MooseEnum\n      group_name: \n      options: SIMPLE LOW\n      description: |\n        Polynomial order of the barrier function g(eta)\n    - name: hi_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Switching Function Materials that provide h(eta_i)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str AsymmetricCrossTermBarrierFunctionMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/BarrierFunctionMaterial\n    description: |\n      Helper material to provide g(eta) and its derivative in a polynomial.\\nSIMPLE: eta^2*(1-eta)^2\\nLOW: eta*(1-eta)\\nHIGH: eta^2*(1-eta^2)^2\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: eta\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Order parameter variable\n    - name: function_name\n      required: No\n      default: !!str g\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        actual name for f(eta), i.e. \'h\' or \'g\'\n    - name: g_order\n      required: No\n      default: !!str SIMPLE\n      cpp_type: MooseEnum\n      group_name: \n      options: SIMPLE LOW HIGH\n      description: |\n        Polynomial order of the barrier function g(eta)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str BarrierFunctionMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: well_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Make the g zero in [0:1] so it only contributes to enforcing the eta range and not to the phase transformation berrier.\n    subblocks:\n  - name: /Materials/CappedDruckerPragerCosseratStressUpdate\n    description: |\n      Capped Drucker-Prager plasticity stress calculator for the Cosserat situation where the host medium (ie, the limit where all Cosserat effects are zero) is isotropic.  Note that the return-map flow rule uses an isotropic elasticity tensor built with the \'host\' properties defined by the user.\n    parameters:\n    - name: DP_model\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsPlasticDruckerPrager UserObject that defines the Drucker-Prager parameters (cohesion, friction angle and dilation angle)\n    - name: admissible_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        A single admissible value of the value of the stress parameters for internal parameters = 0.  This is used to initialize the return-mapping algorithm during the first nonlinear iteration.  If not given then it is assumed that stress parameters = 0 is admissible.\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple plastic models on the same block, and the plastic_internal_parameter, plastic_yield_function, plastic_NR_iterations and plastic_linesearch_needed Material Properties will be prepended by this string\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compressive_strength\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the compressive strength.  In physical situations this is positive.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: host_poissons_ratio\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Poisson\'s ratio for the isotropic host medium\n    - name: host_youngs_modulus\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Young\'s modulus for the isotropic host medium\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: max_NR_iterations\n      required: No\n      default: !!str 20\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of Newton-Raphson iterations allowed during the return-map algorithm\n    - name: min_step_size\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        In order to help the Newton-Raphson procedure, the applied strain increment may be applied in sub-increments of size greater than this value.  Usually it is better for Moose\'s nonlinear convergence to increase max_NR_iterations rather than decrease this parameter.\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: perfect_guess\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Provide a guess to the Newton-Raphson proceedure that is the result from perfect plasticity.  With severe hardening/softening this may be suboptimal.\n    - name: perform_finite_strain_rotations\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Tensors are correctly rotated in finite-strain simulations.  For optimal performance you can set this to \'false\' if you are only ever using small strains\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: small_dilation\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        If true, and if the trial stress exceeds the tensile strength, then the user gaurantees that the returned stress will be independent of the compressive strength.\n    - name: smoothing_tol\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Intersections of the yield surfaces will be smoothed by this amount (this is measured in units of stress).  Often this is related to other physical parameters (eg, 0.1*cohesion) but it is important to set this small enough so that the individual yield surfaces do not mix together in the smoothing process to produce a result where no stress is admissible (for example, mixing together tensile and compressive failure envelopes).\n    - name: tensile_strength\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the tensile strength.  In physical situations this is positive (and always must be greater than negative compressive-strength.\n    - name: tip_smoother\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The cone vertex at J2 = 0 will be smoothed by the given amount.  Typical value is 0.1*cohesion\n    - name: type\n      required: No\n      default: !!str CappedDruckerPragerCosseratStressUpdate\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: warn_about_precision_loss\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Output a message to the console every time precision-loss is encountered during the Newton-Raphson process\n    - name: yield_function_tol\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The return-map process will be deemed to have converged if all yield functions are within yield_function_tol of zero.  If this is set very low then precision-loss might be encountered: if the code detects precision loss then it also deems the return-map process has converged.\n    subblocks:\n  - name: /Materials/CappedDruckerPragerStressUpdate\n    description: |\n      Capped Drucker-Prager plasticity stress calculator\n    parameters:\n    - name: DP_model\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsPlasticDruckerPrager UserObject that defines the Drucker-Prager parameters (cohesion, friction angle and dilation angle)\n    - name: admissible_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        A single admissible value of the value of the stress parameters for internal parameters = 0.  This is used to initialize the return-mapping algorithm during the first nonlinear iteration.  If not given then it is assumed that stress parameters = 0 is admissible.\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple plastic models on the same block, and the plastic_internal_parameter, plastic_yield_function, plastic_NR_iterations and plastic_linesearch_needed Material Properties will be prepended by this string\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compressive_strength\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the compressive strength.  In physical situations this is positive.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: max_NR_iterations\n      required: No\n      default: !!str 20\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of Newton-Raphson iterations allowed during the return-map algorithm\n    - name: min_step_size\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        In order to help the Newton-Raphson procedure, the applied strain increment may be applied in sub-increments of size greater than this value.  Usually it is better for Moose\'s nonlinear convergence to increase max_NR_iterations rather than decrease this parameter.\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: perfect_guess\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Provide a guess to the Newton-Raphson proceedure that is the result from perfect plasticity.  With severe hardening/softening this may be suboptimal.\n    - name: perform_finite_strain_rotations\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Tensors are correctly rotated in finite-strain simulations.  For optimal performance you can set this to \'false\' if you are only ever using small strains\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: small_dilation\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        If true, and if the trial stress exceeds the tensile strength, then the user gaurantees that the returned stress will be independent of the compressive strength.\n    - name: smoothing_tol\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Intersections of the yield surfaces will be smoothed by this amount (this is measured in units of stress).  Often this is related to other physical parameters (eg, 0.1*cohesion) but it is important to set this small enough so that the individual yield surfaces do not mix together in the smoothing process to produce a result where no stress is admissible (for example, mixing together tensile and compressive failure envelopes).\n    - name: tensile_strength\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the tensile strength.  In physical situations this is positive (and always must be greater than negative compressive-strength.\n    - name: tip_smoother\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The cone vertex at J2 = 0 will be smoothed by the given amount.  Typical value is 0.1*cohesion\n    - name: type\n      required: No\n      default: !!str CappedDruckerPragerStressUpdate\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: warn_about_precision_loss\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Output a message to the console every time precision-loss is encountered during the Newton-Raphson process\n    - name: yield_function_tol\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The return-map process will be deemed to have converged if all yield functions are within yield_function_tol of zero.  If this is set very low then precision-loss might be encountered: if the code detects precision loss then it also deems the return-map process has converged.\n    subblocks:\n  - name: /Materials/CappedMohrCoulombCosseratStressUpdate\n    description: |\n      Capped Mohr-Coulomb plasticity stress calculator for the Cosserat situation where the host medium (ie, the limit where all Cosserat effects are zero) is isotropic.  Note that the return-map flow rule uses an isotropic elasticity tensor built with the \'host\' properties defined by the user.\n    parameters:\n    - name: admissible_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        A single admissible value of the value of the stress parameters for internal parameters = 0.  This is used to initialize the return-mapping algorithm during the first nonlinear iteration.  If not given then it is assumed that stress parameters = 0 is admissible.\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple plastic models on the same block, and the plastic_internal_parameter, plastic_yield_function, plastic_NR_iterations and plastic_linesearch_needed Material Properties will be prepended by this string\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: cohesion\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the cohesion\n    - name: compressive_strength\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the compressive strength.  In physical situations this is positive.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: dilation_angle\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the dilation angle (in radians).  Unless you are quite confident, this should be set positive and not greater than the friction angle.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: friction_angle\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the friction angle (in radians)\n    - name: host_poissons_ratio\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Poisson\'s ratio for the isotropic host medium\n    - name: host_youngs_modulus\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Young\'s modulus for the isotropic host medium\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: max_NR_iterations\n      required: No\n      default: !!str 20\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of Newton-Raphson iterations allowed during the return-map algorithm\n    - name: min_step_size\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        In order to help the Newton-Raphson procedure, the applied strain increment may be applied in sub-increments of size greater than this value.  Usually it is better for Moose\'s nonlinear convergence to increase max_NR_iterations rather than decrease this parameter.\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: perfect_guess\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Provide a guess to the Newton-Raphson proceedure that is the result from perfect plasticity.  With severe hardening/softening this may be suboptimal.\n    - name: perform_finite_strain_rotations\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Tensors are correctly rotated in finite-strain simulations.  For optimal performance you can set this to \'false\' if you are only ever using small strains\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: smoothing_tol\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Intersections of the yield surfaces will be smoothed by this amount (this is measured in units of stress).  Often this is related to other physical parameters (eg, 0.1*cohesion) but it is important to set this small enough so that the individual yield surfaces do not mix together in the smoothing process to produce a result where no stress is admissible (for example, mixing together tensile and compressive failure envelopes).\n    - name: tensile_strength\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the tensile strength.  In physical situations this is positive (and always must be greater than negative compressive-strength.\n    - name: type\n      required: No\n      default: !!str CappedMohrCoulombCosseratStressUpdate\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: warn_about_precision_loss\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Output a message to the console every time precision-loss is encountered during the Newton-Raphson process\n    - name: yield_function_tol\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The return-map process will be deemed to have converged if all yield functions are within yield_function_tol of zero.  If this is set very low then precision-loss might be encountered: if the code detects precision loss then it also deems the return-map process has converged.\n    subblocks:\n  - name: /Materials/CappedMohrCoulombStressUpdate\n    description: |\n      Nonassociative, smoothed, Mohr-Coulomb plasticity capped with tensile (Rankine) and compressive caps, with hardening/softening\n    parameters:\n    - name: admissible_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        A single admissible value of the value of the stress parameters for internal parameters = 0.  This is used to initialize the return-mapping algorithm during the first nonlinear iteration.  If not given then it is assumed that stress parameters = 0 is admissible.\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple plastic models on the same block, and the plastic_internal_parameter, plastic_yield_function, plastic_NR_iterations and plastic_linesearch_needed Material Properties will be prepended by this string\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: cohesion\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the cohesion\n    - name: compressive_strength\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the compressive strength.  In physical situations this is positive.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: dilation_angle\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the dilation angle (in radians).  Unless you are quite confident, this should be set positive and not greater than the friction angle.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: friction_angle\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the friction angle (in radians)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: max_NR_iterations\n      required: No\n      default: !!str 20\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of Newton-Raphson iterations allowed during the return-map algorithm\n    - name: min_step_size\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        In order to help the Newton-Raphson procedure, the applied strain increment may be applied in sub-increments of size greater than this value.  Usually it is better for Moose\'s nonlinear convergence to increase max_NR_iterations rather than decrease this parameter.\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: perfect_guess\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Provide a guess to the Newton-Raphson proceedure that is the result from perfect plasticity.  With severe hardening/softening this may be suboptimal.\n    - name: perform_finite_strain_rotations\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Tensors are correctly rotated in finite-strain simulations.  For optimal performance you can set this to \'false\' if you are only ever using small strains\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: smoothing_tol\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Intersections of the yield surfaces will be smoothed by this amount (this is measured in units of stress).  Often this is related to other physical parameters (eg, 0.1*cohesion) but it is important to set this small enough so that the individual yield surfaces do not mix together in the smoothing process to produce a result where no stress is admissible (for example, mixing together tensile and compressive failure envelopes).\n    - name: tensile_strength\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the tensile strength.  In physical situations this is positive (and always must be greater than negative compressive-strength.\n    - name: type\n      required: No\n      default: !!str CappedMohrCoulombStressUpdate\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: warn_about_precision_loss\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Output a message to the console every time precision-loss is encountered during the Newton-Raphson process\n    - name: yield_function_tol\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The return-map process will be deemed to have converged if all yield functions are within yield_function_tol of zero.  If this is set very low then precision-loss might be encountered: if the code detects precision loss then it also deems the return-map process has converged.\n    subblocks:\n  - name: /Materials/CappedWeakInclinedPlaneStressUpdate\n    description: |\n      Capped weak inclined plane plasticity stress calculator\n    parameters:\n    - name: admissible_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        A single admissible value of the value of the stress parameters for internal parameters = 0.  This is used to initialize the return-mapping algorithm during the first nonlinear iteration.  If not given then it is assumed that stress parameters = 0 is admissible.\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple plastic models on the same block, and the plastic_internal_parameter, plastic_yield_function, plastic_NR_iterations and plastic_linesearch_needed Material Properties will be prepended by this string\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: cohesion\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the cohesion.  Physically the cohesion should not be negative.\n    - name: compressive_strength\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the weak-plane compressive strength.  In physical situations this is positive.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: max_NR_iterations\n      required: No\n      default: !!str 20\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of Newton-Raphson iterations allowed during the return-map algorithm\n    - name: min_step_size\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        In order to help the Newton-Raphson procedure, the applied strain increment may be applied in sub-increments of size greater than this value.  Usually it is better for Moose\'s nonlinear convergence to increase max_NR_iterations rather than decrease this parameter.\n    - name: normal_vector\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        The normal vector to the weak plane\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: perfect_guess\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Provide a guess to the Newton-Raphson proceedure that is the result from perfect plasticity.  With severe hardening/softening this may be suboptimal.\n    - name: perform_finite_strain_rotations\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Tensors are correctly rotated in finite-strain simulations.  For optimal performance you can set this to \'false\' if you are only ever using small strains\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: smoothing_tol\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Intersections of the yield surfaces will be smoothed by this amount (this is measured in units of stress).  Often this is related to other physical parameters (eg, 0.1*cohesion) but it is important to set this small enough so that the individual yield surfaces do not mix together in the smoothing process to produce a result where no stress is admissible (for example, mixing together tensile and compressive failure envelopes).\n    - name: tan_dilation_angle\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the tan(dilation angle).  Usually the dilation angle is not greater than the friction angle, and it is between 0 and 90deg.\n    - name: tan_friction_angle\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of tan(friction angle).  Physically the friction angle should be between 0 and 90deg.\n    - name: tensile_strength\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the weak-plane tensile strength.  In physical situations this is positive (and always must be greater than negative compressive-strength.\n    - name: tip_smoother\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The cone vertex at shear-stress = 0 will be smoothed by the given amount.  Typical value is 0.1*cohesion\n    - name: type\n      required: No\n      default: !!str CappedWeakInclinedPlaneStressUpdate\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: warn_about_precision_loss\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Output a message to the console every time precision-loss is encountered during the Newton-Raphson process\n    - name: yield_function_tol\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The return-map process will be deemed to have converged if all yield functions are within yield_function_tol of zero.  If this is set very low then precision-loss might be encountered: if the code detects precision loss then it also deems the return-map process has converged.\n    subblocks:\n  - name: /Materials/CappedWeakPlaneCosseratStressUpdate\n    description: |\n      Capped weak-plane plasticity Cosserat stress calculator\n    parameters:\n    - name: admissible_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        A single admissible value of the value of the stress parameters for internal parameters = 0.  This is used to initialize the return-mapping algorithm during the first nonlinear iteration.  If not given then it is assumed that stress parameters = 0 is admissible.\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple plastic models on the same block, and the plastic_internal_parameter, plastic_yield_function, plastic_NR_iterations and plastic_linesearch_needed Material Properties will be prepended by this string\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: cohesion\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the cohesion.  Physically the cohesion should not be negative.\n    - name: compressive_strength\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the weak-plane compressive strength.  In physical situations this is positive.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: max_NR_iterations\n      required: No\n      default: !!str 20\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of Newton-Raphson iterations allowed during the return-map algorithm\n    - name: min_step_size\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        In order to help the Newton-Raphson procedure, the applied strain increment may be applied in sub-increments of size greater than this value.  Usually it is better for Moose\'s nonlinear convergence to increase max_NR_iterations rather than decrease this parameter.\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: perfect_guess\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Provide a guess to the Newton-Raphson proceedure that is the result from perfect plasticity.  With severe hardening/softening this may be suboptimal.\n    - name: perform_finite_strain_rotations\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Tensors are correctly rotated in finite-strain simulations.  For optimal performance you can set this to \'false\' if you are only ever using small strains\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: smoothing_tol\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Intersections of the yield surfaces will be smoothed by this amount (this is measured in units of stress).  Often this is related to other physical parameters (eg, 0.1*cohesion) but it is important to set this small enough so that the individual yield surfaces do not mix together in the smoothing process to produce a result where no stress is admissible (for example, mixing together tensile and compressive failure envelopes).\n    - name: tan_dilation_angle\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the tan(dilation angle).  Usually the dilation angle is not greater than the friction angle, and it is between 0 and 90deg.\n    - name: tan_friction_angle\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of tan(friction angle).  Physically the friction angle should be between 0 and 90deg.\n    - name: tensile_strength\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the weak-plane tensile strength.  In physical situations this is positive (and always must be greater than negative compressive-strength.\n    - name: tip_smoother\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The cone vertex at shear-stress = 0 will be smoothed by the given amount.  Typical value is 0.1*cohesion\n    - name: type\n      required: No\n      default: !!str CappedWeakPlaneCosseratStressUpdate\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: warn_about_precision_loss\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Output a message to the console every time precision-loss is encountered during the Newton-Raphson process\n    - name: yield_function_tol\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The return-map process will be deemed to have converged if all yield functions are within yield_function_tol of zero.  If this is set very low then precision-loss might be encountered: if the code detects precision loss then it also deems the return-map process has converged.\n    subblocks:\n  - name: /Materials/CappedWeakPlaneStressUpdate\n    description: |\n      Capped weak-plane plasticity stress calculator\n    parameters:\n    - name: admissible_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        A single admissible value of the value of the stress parameters for internal parameters = 0.  This is used to initialize the return-mapping algorithm during the first nonlinear iteration.  If not given then it is assumed that stress parameters = 0 is admissible.\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple plastic models on the same block, and the plastic_internal_parameter, plastic_yield_function, plastic_NR_iterations and plastic_linesearch_needed Material Properties will be prepended by this string\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: cohesion\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the cohesion.  Physically the cohesion should not be negative.\n    - name: compressive_strength\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the weak-plane compressive strength.  In physical situations this is positive.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: max_NR_iterations\n      required: No\n      default: !!str 20\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of Newton-Raphson iterations allowed during the return-map algorithm\n    - name: min_step_size\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        In order to help the Newton-Raphson procedure, the applied strain increment may be applied in sub-increments of size greater than this value.  Usually it is better for Moose\'s nonlinear convergence to increase max_NR_iterations rather than decrease this parameter.\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: perfect_guess\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Provide a guess to the Newton-Raphson proceedure that is the result from perfect plasticity.  With severe hardening/softening this may be suboptimal.\n    - name: perform_finite_strain_rotations\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Tensors are correctly rotated in finite-strain simulations.  For optimal performance you can set this to \'false\' if you are only ever using small strains\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: smoothing_tol\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Intersections of the yield surfaces will be smoothed by this amount (this is measured in units of stress).  Often this is related to other physical parameters (eg, 0.1*cohesion) but it is important to set this small enough so that the individual yield surfaces do not mix together in the smoothing process to produce a result where no stress is admissible (for example, mixing together tensile and compressive failure envelopes).\n    - name: tan_dilation_angle\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the tan(dilation angle).  Usually the dilation angle is not greater than the friction angle, and it is between 0 and 90deg.\n    - name: tan_friction_angle\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of tan(friction angle).  Physically the friction angle should be between 0 and 90deg.\n    - name: tensile_strength\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the weak-plane tensile strength.  In physical situations this is positive (and always must be greater than negative compressive-strength.\n    - name: tip_smoother\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The cone vertex at shear-stress = 0 will be smoothed by the given amount.  Typical value is 0.1*cohesion\n    - name: type\n      required: No\n      default: !!str CappedWeakPlaneStressUpdate\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: warn_about_precision_loss\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Output a message to the console every time precision-loss is encountered during the Newton-Raphson process\n    - name: yield_function_tol\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The return-map process will be deemed to have converged if all yield functions are within yield_function_tol of zero.  If this is set very low then precision-loss might be encountered: if the code detects precision loss then it also deems the return-map process has converged.\n    subblocks:\n  - name: /Materials/CompositeEigenstrain\n    description: |\n      Assemble an Eigenstrain tensor from multiple tensor contributions weighted by material properties\n    parameters:\n    - name: args\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        variable dependencies for the prefactor\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: eigenstrain_name\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property name for the eigenstrain tensor computed by this model. IMPORTANT: The name of this property must also be provided to the strain calculator.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: incremental_form\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Should the eigenstrain be in incremental form (for incremental models)?\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: tensors\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Component tensors\n    - name: type\n      required: No\n      default: !!str CompositeEigenstrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: weights\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Component weights\n    subblocks:\n  - name: /Materials/CompositeElasticityTensor\n    description: |\n      Assemble an elasticity tensor from multiple tensor contributions weighted by material properties\n    parameters:\n    - name: args\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        variable dependencies for the prefactor\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: tensors\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Component tensors\n    - name: type\n      required: No\n      default: !!str CompositeElasticityTensor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: weights\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Component weights\n    subblocks:\n  - name: /Materials/CompositeMobilityTensor\n    description: |\n      Assemble a mobility tensor from multiple tensor contributions weighted by material properties\n    parameters:\n    - name: M_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of the mobility tensor property to generate\n    - name: args\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        variable dependencies for the prefactor\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: tensors\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Component tensors\n    - name: type\n      required: No\n      default: !!str CompositeMobilityTensor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: weights\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Component weights\n    subblocks:\n  - name: /Materials/ComputeAxisymmetric1DFiniteStrain\n    description: |\n      Compute a strain increment and rotation increment for finite strains in an axisymmetric 1D problem\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: decomposition_method\n      required: No\n      default: !!str TaylorExpansion\n      cpp_type: MooseEnum\n      group_name: \n      options: TaylorExpansion EigenSolution\n      description: |\n        Methods to calculate the strain and rotation increments\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: eigenstrain_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        List of eigenstrains to be applied in this strain calculation\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: out_of_plane_strain\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Nonlinear variable for axisymmetric 1D problem\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: scalar_out_of_plane_strain\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Scalar variable for axisymmetric 1D problem\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: subblock_index_provider\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        SubblockIndexProvider user object name\n    - name: type\n      required: No\n      default: !!str ComputeAxisymmetric1DFiniteStrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: volumetric_locking_correction\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to correct volumetric locking\n    subblocks:\n  - name: /Materials/ComputeAxisymmetric1DIncrementalStrain\n    description: |\n      Compute strain increment for small strains in an axisymmetric 1D problem\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: eigenstrain_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        List of eigenstrains to be applied in this strain calculation\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: out_of_plane_strain\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Nonlinear variable for axisymmetric 1D problem\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: scalar_out_of_plane_strain\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Scalar variable for axisymmetric 1D problem\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: subblock_index_provider\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        SubblockIndexProvider user object name\n    - name: type\n      required: No\n      default: !!str ComputeAxisymmetric1DIncrementalStrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: volumetric_locking_correction\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to correct volumetric locking\n    subblocks:\n  - name: /Materials/ComputeAxisymmetric1DSmallStrain\n    description: |\n      Compute a small strain in an Axisymmetric 1D problem\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: eigenstrain_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        List of eigenstrains to be applied in this strain calculation\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: out_of_plane_strain\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Nonlinear variable for axisymmetric 1D problem\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: scalar_out_of_plane_strain\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Scalar variable for axisymmetric 1D problem\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: subblock_index_provider\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        SubblockIndexProvider user object name\n    - name: type\n      required: No\n      default: !!str ComputeAxisymmetric1DSmallStrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: volumetric_locking_correction\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to correct volumetric locking\n    subblocks:\n  - name: /Materials/ComputeAxisymmetricRZFiniteStrain\n    description: |\n      Compute a strain increment for finite strains under axisymmetric assumptions.\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: decomposition_method\n      required: No\n      default: !!str TaylorExpansion\n      cpp_type: MooseEnum\n      group_name: \n      options: TaylorExpansion EigenSolution\n      description: |\n        Methods to calculate the strain and rotation increments\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: eigenstrain_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        List of eigenstrains to be applied in this strain calculation\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputeAxisymmetricRZFiniteStrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: volumetric_locking_correction\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to correct volumetric locking\n    subblocks:\n  - name: /Materials/ComputeAxisymmetricRZIncrementalStrain\n    description: |\n      Compute a strain increment and rotation increment for finite strains under axisymmetric assumptions.\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: eigenstrain_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        List of eigenstrains to be applied in this strain calculation\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputeAxisymmetricRZIncrementalStrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: volumetric_locking_correction\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to correct volumetric locking\n    subblocks:\n  - name: /Materials/ComputeAxisymmetricRZSmallStrain\n    description: |\n      Compute a small strain in an Axisymmetric geometry\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: eigenstrain_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        List of eigenstrains to be applied in this strain calculation\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputeAxisymmetricRZSmallStrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: volumetric_locking_correction\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to correct volumetric locking\n    subblocks:\n  - name: /Materials/ComputeConcentrationDependentElasticityTensor\n    description: |\n      Compute concentration dependent elasticity tensor.\n    parameters:\n    - name: C0_ijkl\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Stiffness tensor for zero concentration phase\n    - name: C1_ijkl\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Stiffness tensor for phase having concentration 1.0\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Concentration\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: elasticity_tensor_prefactor\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Optional function to use as a scalar prefactor on the elasticity tensor.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: euler_angle_1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 1\n    - name: euler_angle_2\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 2\n    - name: euler_angle_3\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 3\n    - name: fill_method0\n      required: No\n      default: !!str symmetric9\n      cpp_type: MooseEnum\n      group_name: \n      options: antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic symmetric_isotropic_E_nu antisymmetric_isotropic axisymmetric_rz general principal\n      description: |\n        The fill method\n    - name: fill_method1\n      required: No\n      default: !!str symmetric9\n      cpp_type: MooseEnum\n      group_name: \n      options: antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic symmetric_isotropic_E_nu antisymmetric_isotropic axisymmetric_rz general principal\n      description: |\n        The fill method\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputeConcentrationDependentElasticityTensor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/ComputeCosseratElasticityTensor\n    description: |\n      Compute Cosserat elasticity and flexural bending rigidity tensors\n    parameters:\n    - name: B_ijkl\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Flexural bending rigidity tensor.\n    - name: E_ijkl\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Elastic stiffness tensor for material\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: elasticity_tensor_prefactor\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Optional function to use as a scalar prefactor on the elasticity tensor.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: fill_method\n      required: No\n      default: !!str symmetric9\n      cpp_type: MooseEnum\n      group_name: \n      options: antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic symmetric_isotropic_E_nu antisymmetric_isotropic axisymmetric_rz general principal\n      description: |\n        The fill method\n    - name: fill_method_bending\n      required: No\n      default: !!str antisymmetric_isotropic\n      cpp_type: MooseEnum\n      group_name: \n      options: antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic symmetric_isotropic_E_nu antisymmetric_isotropic axisymmetric_rz general principal\n      description: |\n        The fill method for the \'bending\' tensor.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputeCosseratElasticityTensor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/ComputeCosseratIncrementalSmallStrain\n    description: |\n      Compute incremental small Cosserat strains\n    parameters:\n    - name: Cosserat_rotations\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The 3 Cosserat rotation variables\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: eigenstrain_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        List of eigenstrains to be applied in this strain calculation\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputeCosseratIncrementalSmallStrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: volumetric_locking_correction\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to correct volumetric locking\n    subblocks:\n  - name: /Materials/ComputeCosseratLinearElasticStress\n    description: |\n      Compute Cosserat stress and couple-stress elasticity for small strains\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: store_stress_old\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n    - name: type\n      required: No\n      default: !!str ComputeCosseratLinearElasticStress\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Materials/ComputeCosseratSmallStrain\n    description: |\n      Compute small Cosserat strains\n    parameters:\n    - name: Cosserat_rotations\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The 3 Cosserat rotation variables\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: eigenstrain_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        List of eigenstrains to be applied in this strain calculation\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputeCosseratSmallStrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: volumetric_locking_correction\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to correct volumetric locking\n    subblocks:\n  - name: /Materials/ComputeDeformGradBasedStress\n    description: |\n      Computes stress based on lagrangian strain\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: deform_grad_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of deformation gradient variable\n    - name: elasticity_tensor_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of elasticity tensor variable\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: jacobian_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of jacobian variable\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: stress_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of stress variable\n    - name: type\n      required: No\n      default: !!str ComputeDeformGradBasedStress\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/ComputeEigenstrain\n    description: |\n      Computes a constant Eigenstrain\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: eigen_base\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Vector of values defining the constant base tensor for the Eigenstrain\n    - name: eigenstrain_name\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property name for the eigenstrain tensor computed by this model. IMPORTANT: The name of this property must also be provided to the strain calculator.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: incremental_form\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Should the eigenstrain be in incremental form (for incremental models)?\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: prefactor\n      required: No\n      default: !!str 1\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of material defining the variable dependence\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputeEigenstrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/ComputeEigenstrainFromInitialStress\n    description: |\n      Computes an eigenstrain from an initial stress\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The base_name for the elasticity tensor that will be used to compute strain from stress.  Do not provide any base_name if your elasticity tensor does not use one.\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: eigenstrain_name\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property name for the eigenstrain tensor computed by this model. IMPORTANT: The name of this property must also be provided to the strain calculator.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: incremental_form\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Should the eigenstrain be in incremental form (for incremental models)?\n    - name: initial_stress\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  To compute the eigenstrain correctly, your elasticity tensor should not be time-varying in the first timestep\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputeEigenstrainFromInitialStress\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/ComputeElasticityTensor\n    description: |\n      Compute an elasticity tensor.\n    parameters:\n    - name: C_ijkl\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Stiffness tensor for material\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: elasticity_tensor_prefactor\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Optional function to use as a scalar prefactor on the elasticity tensor.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: euler_angle_1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 1\n    - name: euler_angle_2\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 2\n    - name: euler_angle_3\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 3\n    - name: fill_method\n      required: No\n      default: !!str symmetric9\n      cpp_type: MooseEnum\n      group_name: \n      options: antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic symmetric_isotropic_E_nu antisymmetric_isotropic axisymmetric_rz general principal\n      description: |\n        The fill method\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputeElasticityTensor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/ComputeElasticityTensorCP\n    description: |\n      Compute an elasticity tensor for crystal plasticity.\n    parameters:\n    - name: C_ijkl\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Stiffness tensor for material\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: elasticity_tensor_prefactor\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Optional function to use as a scalar prefactor on the elasticity tensor.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: euler_angle_1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 1\n    - name: euler_angle_2\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 2\n    - name: euler_angle_3\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Euler angle in direction 3\n    - name: fill_method\n      required: No\n      default: !!str symmetric9\n      cpp_type: MooseEnum\n      group_name: \n      options: antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic symmetric_isotropic_E_nu antisymmetric_isotropic axisymmetric_rz general principal\n      description: |\n        The fill method\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: read_prop_user_object\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The ElementReadPropertyFile GeneralUserObject to read element specific property values from file\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputeElasticityTensorCP\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/ComputeExtraStressConstant\n    description: |\n      Computes a constant extra stress that is added to the stress calculated by the constitutive model\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: extra_stress_tensor\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Vector of values defining the constant extra stress to add, in order 11, 22, 33, 23, 13, 12\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: prefactor\n      required: No\n      default: !!str 1\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of material defining additional constant prefactor\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputeExtraStressConstant\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/ComputeFiniteStrain\n    description: |\n      Compute a strain increment and rotation increment for finite strains.\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: decomposition_method\n      required: No\n      default: !!str TaylorExpansion\n      cpp_type: MooseEnum\n      group_name: \n      options: TaylorExpansion EigenSolution\n      description: |\n        Methods to calculate the strain and rotation increments\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: eigenstrain_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        List of eigenstrains to be applied in this strain calculation\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputeFiniteStrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: volumetric_locking_correction\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to correct volumetric locking\n    subblocks:\n  - name: /Materials/ComputeFiniteStrainElasticStress\n    description: |\n      Compute stress using elasticity for finite strains\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: store_stress_old\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n    - name: type\n      required: No\n      default: !!str ComputeFiniteStrainElasticStress\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Materials/ComputeFiniteStrainElasticStressBirchMurnaghan\n    description: |\n      Compute stress using elasticity for finite strains,add bulk viscosity damping andsubstitute the volumetric part of the stress witha Murnaghan equation of state\n    parameters:\n    - name: C0\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Von Neumann damping coefficient\n    - name: C1\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Landshoff damping coefficient\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bulk_modulus_ref\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        reference bulk modulus in Birch-Murnaghan equation of state\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n    - name: n_Murnaghan\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        exponent in Birch-Murnaghan equation of state\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: store_stress_old\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n    - name: type\n      required: No\n      default: !!str ComputeFiniteStrainElasticStressBirchMurnaghan\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Materials/ComputeIncrementalSmallStrain\n    description: |\n      Compute a strain increment and rotation increment for small strains.\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: eigenstrain_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        List of eigenstrains to be applied in this strain calculation\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputeIncrementalSmallStrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: volumetric_locking_correction\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to correct volumetric locking\n    subblocks:\n  - name: /Materials/ComputeInstantaneousThermalExpansionFunctionEigenstrain\n    description: |\n      Computes eigenstrain due to thermal expansion using a function that describes the instantaneous thermal expansion as a function of temperature\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: eigenstrain_name\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property name for the eigenstrain tensor computed by this model. IMPORTANT: The name of this property must also be provided to the strain calculator.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: incremental_form\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Should the eigenstrain be in incremental form (for incremental models)?\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: stress_free_temperature\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Reference temperature at which there is no thermal expansion for thermal eigenstrain calculation\n    - name: temperature\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled temperature\n    - name: thermal_expansion_function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Function describing the instantaneous thermal expansion coefficient as a function of temperature\n    - name: type\n      required: No\n      default: !!str ComputeInstantaneousThermalExpansionFunctionEigenstrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/ComputeInterfaceStress\n    description: |\n      Stress in the plane of an interface defined by the gradient of an order parameter\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: op_range\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Range over which order parameters change across an interface. By default order parameters are assumed to vary from 0 to 1\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: planar_stress_name\n      required: No\n      default: !!str extra_stress\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Material property name for the planar stress\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: stress\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Planar stress\n    - name: type\n      required: No\n      default: !!str ComputeInterfaceStress\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Order parameter that defines the interface. The interface is the region where the gradient of this order parameter is non-zero.\n    subblocks:\n  - name: /Materials/ComputeIsotropicElasticityTensor\n    description: |\n      Compute a constant isotropic elasticity tensor.\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bulk_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The bulk modulus for the material.\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: elasticity_tensor_prefactor\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Optional function to use as a scalar prefactor on the elasticity tensor.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: lambda\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Lame\'s first constant for the material.\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: poissons_ratio\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Poisson\'s ratio for the material.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: shear_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The shear modulus of the material.\n    - name: type\n      required: No\n      default: !!str ComputeIsotropicElasticityTensor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: youngs_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Young\'s modulus of the material.\n    subblocks:\n  - name: /Materials/ComputeIsotropicLinearElasticPFFractureStress\n    description: |\n      Computes the stress and free energy derivatives for the phase field fracture model, with linear isotropic elasticity\n    parameters:\n    - name: F_name\n      required: No\n      default: !!str E_el\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of material property storing the elastic energy\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Order parameter for damage\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n    - name: kdamage\n      required: No\n      default: !!str 1e-06\n      cpp_type: double\n      group_name: \n      description: |\n        Stiffness of damaged matrix\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: store_stress_old\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n    - name: type\n      required: No\n      default: !!str ComputeIsotropicLinearElasticPFFractureStress\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Materials/ComputeLayeredCosseratElasticityTensor\n    description: |\n      Computes Cosserat elasticity and flexural bending rigidity tensors relevant for simulations with layered materials.  The layering direction is assumed to be perpendicular to the \'z\' direction.\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: elasticity_tensor_prefactor\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Optional function to use as a scalar prefactor on the elasticity tensor.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: joint_normal_stiffness\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The joint normal stiffness\n    - name: joint_shear_stiffness\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The joint shear stiffness\n    - name: layer_thickness\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The layer thickness\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: poisson\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The Poisson\'s ratio\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputeLayeredCosseratElasticityTensor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: young\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The Young\'s modulus\n    subblocks:\n  - name: /Materials/ComputeLinearElasticPFFractureStress\n    description: |\n      Phase-field fracture model energy contribution to fracture for elasticity and undamaged stress under compressive strain\n    parameters:\n    - name: F_name\n      required: No\n      default: !!str E_el\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of material property storing the elastic energy\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Order parameter for damage\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n    - name: kdamage\n      required: No\n      default: !!str 1e-06\n      cpp_type: double\n      group_name: \n      description: |\n        Stiffness of damaged matrix\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: store_stress_old\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n    - name: type\n      required: No\n      default: !!str ComputeLinearElasticPFFractureStress\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Materials/ComputeLinearElasticStress\n    description: |\n      Compute stress using elasticity for small strains\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: store_stress_old\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n    - name: type\n      required: No\n      default: !!str ComputeLinearElasticStress\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Materials/ComputeLinearViscoelasticStress\n    description: |\n      Divides total strain into elastic + creep + eigenstrains\n    parameters:\n    - name: apparent_creep_strain\n      required: No\n      default: !!str apparent_creep_strain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        name of the apparent creep strain (defined by a LinearViscoelasticityBase material)\n    - name: apparent_elasticity_tensor\n      required: No\n      default: !!str apparent_elasticity_tensor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        name of the apparent elasticity tensor (defined by a LinearViscoelasticityBase material)\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n    - name: instantaneous_elasticity_tensor_inv\n      required: No\n      default: !!str instantaneous_elasticity_tensor_inv\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        name of the apparent compliance tensor (defined by a LinearViscoelasticityBase material)\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: store_stress_old\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n    - name: type\n      required: No\n      default: !!str ComputeLinearViscoelasticStress\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Materials/ComputeMeanThermalExpansionFunctionEigenstrain\n    description: |\n      Computes eigenstrain due to thermal expansion using a function that describes the mean thermal expansion as a function of temperature\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: eigenstrain_name\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property name for the eigenstrain tensor computed by this model. IMPORTANT: The name of this property must also be provided to the strain calculator.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: incremental_form\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Should the eigenstrain be in incremental form (for incremental models)?\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: stress_free_temperature\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Reference temperature at which there is no thermal expansion for thermal eigenstrain calculation\n    - name: temperature\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled temperature\n    - name: thermal_expansion_function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Function describing the mean thermal expansion as a function of temperature\n    - name: thermal_expansion_function_reference_temperature\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Reference temperature for thermal_exansion_function (IMPORTANT: this is different in general from the stress_free_temperature)\n    - name: type\n      required: No\n      default: !!str ComputeMeanThermalExpansionFunctionEigenstrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/ComputeMultiPlasticityStress\n    description: |\n      Material for multi-surface finite-strain plasticity\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: deactivation_scheme\n      required: No\n      default: !!str optimized\n      cpp_type: MooseEnum\n      group_name: \n      options: optimized safe dumb optimized_to_safe safe_to_dumb optimized_to_safe_to_dumb optimized_to_dumb\n      description: |\n        Scheme by which constraints are deactivated.  (NOTE: This is irrelevant if there is only one yield surface.)  safe: return to the yield surface and then deactivate constraints with negative plasticity multipliers.  optimized: deactivate a constraint as soon as its plasticity multiplier becomes negative.  dumb: iteratively try all combinations of active constraints until the solution is found.  You may specify fall-back options.  Eg optimized_to_safe: first use \'optimized\', and if that fails, try the return with \'safe\'.\n    - name: debug_fspb\n      required: No\n      default: !!str none\n      cpp_type: MooseEnum\n      group_name: \n      options: none crash jacobian jacobian_and_linear_system\n      description: |\n        Debug types for use by developers when creating new plasticity models, not for general use.  2 = debug Jacobian entries, 3 = check the entire Jacobian, and check Ax=b\n    - name: debug_intnl_change\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Debug finite differencing parameters for the internal parameters\n    - name: debug_jac_at_intnl\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Debug Jacobian entries at these internal parameters\n    - name: debug_jac_at_pm\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Debug Jacobian entries at these plastic multipliers\n    - name: debug_jac_at_stress\n      required: No\n      default: !!str (xx,xy,xz)=(       0,        0,        0) (yx,yy,yz)=(       0,        0,        0) (zx,zy,zz)=(       0,        0,        0) \n      cpp_type: libMesh::TensorValue<double>\n      group_name: \n      description: |\n        Debug Jacobian entries at this stress.  For use by developers\n    - name: debug_pm_change\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Debug finite differencing parameters for the plastic multipliers\n    - name: debug_stress_change\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Debug finite differencing parameter for the stress\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: ep_plastic_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The Newton-Raphson process is only deemed converged if the plastic strain increment constraints have L2 norm less than this.\n    - name: ignore_failures\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        The return-map algorithm will return with the best admissible stresses and internal parameters that it can, even if they don\'t fully correspond to the applied strain increment.  To speed computations, this flag can be set to true, the max_NR_iterations set small, and the min_stepsize large.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n    - name: linear_dependent\n      required: No\n      default: !!str 0.0001\n      cpp_type: double\n      group_name: \n      description: |\n        Flow directions are considered linearly dependent if the smallest singular value is less than linear_dependent times the largest singular value\n    - name: max_NR_iterations\n      required: No\n      default: !!str 20\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of Newton-Raphson iterations allowed\n    - name: max_stepsize_for_dumb\n      required: No\n      default: !!str 0.01\n      cpp_type: double\n      group_name: \n      description: |\n        If your deactivation_scheme is \'something_to_dumb\', then \'dumb\' will only be used if the stepsize falls below this value.  This parameter is useful because the \'dumb\' scheme is computationally expensive\n    - name: min_stepsize\n      required: No\n      default: !!str 0.01\n      cpp_type: double\n      group_name: \n      description: |\n        If ordinary Newton-Raphson + line-search fails, then the applied strain increment is subdivided, and the return-map is tried again.  This parameter is the minimum fraction of applied strain increment that may be applied before the algorithm gives up entirely\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: perform_finite_strain_rotations\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Tensors are correctly rotated in finite-strain simulations.  For optimal performance you can set this to \'false\' if you are only ever using small strains\n    - name: plastic_models\n      required: No\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of names of user objects that define the plastic models that could be active for this material.  If no plastic_models are provided, only elasticity will be used.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: specialIC\n      required: No\n      default: !!str none\n      cpp_type: MooseEnum\n      group_name: \n      options: none rock joint\n      description: |\n        For certain combinations of plastic models, the set of active constraints can be initialized optimally.  \'none\': no special initialization is performed.  For all other choices, the plastic_models must be chosen to have the following types.  \'rock\': \'TensileMulti MohrCoulombMulti\'.  \'joint\': \'WeakPlaneTensile WeakPlaneShear\'.\n    - name: store_stress_old\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n    - name: tangent_operator\n      required: No\n      default: !!str nonlinear\n      cpp_type: MooseEnum\n      group_name: \n      options: elastic linear nonlinear\n      description: |\n        Type of tangent operator to return.  \'elastic\': return the elasticity tensor.  \'linear\': return the consistent tangent operator that is correct for plasticity with yield functions linear in stress.  \'nonlinear\': return the full, general consistent tangent operator.  The calculations assume the hardening potentials are independent of stress and hardening parameters.\n    - name: transverse_direction\n      required: No\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        If this parameter is provided, before the return-map algorithm is called a rotation is performed so that the \'z\' axis in the new frame lies along the transverse_direction in the original frame.  After returning, the inverse rotation is performed.  The transverse_direction will itself rotate with large strains.  This is so that transversely-isotropic plasticity models may be easily defined in the frame where the isotropy holds in the x-y plane.\n    - name: type\n      required: No\n      default: !!str ComputeMultiPlasticityStress\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Materials/ComputeMultipleInelasticCosseratStress\n    description: |\n      Compute state (stress and other quantities such as plastic strains and internal parameters) using an iterative process, as well as Cosserat versions of these quantities.  Only elasticity is currently implemented for the Cosserat versions.Combinations of creep models and plastic models may be used\n    parameters:\n    - name: absolute_tolerance\n      required: No\n      default: !!str 1e-05\n      cpp_type: double\n      group_name: \n      description: |\n        Absolute convergence tolerance for the stress update iterations over the stress change after all update materials are called\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: combined_inelastic_strain_weights\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The combined_inelastic_strain Material Property is a weighted sum of the model inelastic strains.  This parameter is a vector of weights, of the same length as inelastic_models.  Default = \'1 1 ... 1\'.  This parameter is set to 1 if the number of models = 1\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: cycle_models\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        At timestep N use only inelastic model N % num_models.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: inelastic_models\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialName, std::allocator<MaterialName> >\n      group_name: \n      description: |\n        The material objects to use to calculate stress and inelastic strains. Note: specify creep models first and plasticity models second.\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n    - name: max_iterations\n      required: No\n      default: !!str 30\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of the stress update iterations over the stress change after all update materials are called\n    - name: output_iteration_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true to output stress update iteration information over the stress change\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: perform_finite_strain_rotations\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Tensors are correctly rotated in finite-strain simulations.  For optimal performance you can set this to \'false\' if you are only ever using small strains\n    - name: relative_tolerance\n      required: No\n      default: !!str 1e-05\n      cpp_type: double\n      group_name: \n      description: |\n        Relative convergence tolerance for the stress update iterations over the stress change after all update materials are called\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: store_stress_old\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n    - name: tangent_operator\n      required: No\n      default: !!str nonlinear\n      cpp_type: MooseEnum\n      group_name: \n      options: elastic nonlinear\n      description: |\n        Type of tangent operator to return.  \'elastic\': return the elasticity tensor.  \'nonlinear\': return the full, general consistent tangent operator.\n    - name: type\n      required: No\n      default: !!str ComputeMultipleInelasticCosseratStress\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Materials/ComputeMultipleInelasticStress\n    description: |\n      Compute state (stress and internal parameters such as plastic strains and internal parameters) using an iterative process.  Combinations of creep models and plastic models may be used\n    parameters:\n    - name: absolute_tolerance\n      required: No\n      default: !!str 1e-05\n      cpp_type: double\n      group_name: \n      description: |\n        Absolute convergence tolerance for the stress update iterations over the stress change after all update materials are called\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: combined_inelastic_strain_weights\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The combined_inelastic_strain Material Property is a weighted sum of the model inelastic strains.  This parameter is a vector of weights, of the same length as inelastic_models.  Default = \'1 1 ... 1\'.  This parameter is set to 1 if the number of models = 1\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: cycle_models\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        At timestep N use only inelastic model N % num_models.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: inelastic_models\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialName, std::allocator<MaterialName> >\n      group_name: \n      description: |\n        The material objects to use to calculate stress and inelastic strains. Note: specify creep models first and plasticity models second.\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n    - name: max_iterations\n      required: No\n      default: !!str 30\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of the stress update iterations over the stress change after all update materials are called\n    - name: output_iteration_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true to output stress update iteration information over the stress change\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: perform_finite_strain_rotations\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Tensors are correctly rotated in finite-strain simulations.  For optimal performance you can set this to \'false\' if you are only ever using small strains\n    - name: relative_tolerance\n      required: No\n      default: !!str 1e-05\n      cpp_type: double\n      group_name: \n      description: |\n        Relative convergence tolerance for the stress update iterations over the stress change after all update materials are called\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: store_stress_old\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n    - name: tangent_operator\n      required: No\n      default: !!str nonlinear\n      cpp_type: MooseEnum\n      group_name: \n      options: elastic nonlinear\n      description: |\n        Type of tangent operator to return.  \'elastic\': return the elasticity tensor.  \'nonlinear\': return the full, general consistent tangent operator.\n    - name: type\n      required: No\n      default: !!str ComputeMultipleInelasticStress\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Materials/ComputePlaneFiniteStrain\n    description: |\n      Compute strain increment and rotation increment for finite strain under 2D planar assumptions.\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: decomposition_method\n      required: No\n      default: !!str TaylorExpansion\n      cpp_type: MooseEnum\n      group_name: \n      options: TaylorExpansion EigenSolution\n      description: |\n        Methods to calculate the strain and rotation increments\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: eigenstrain_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        List of eigenstrains to be applied in this strain calculation\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: out_of_plane_strain\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Nonlinear variable for plane stress condition\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: scalar_out_of_plane_strain\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Scalar variable for generalized plane strain\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputePlaneFiniteStrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: volumetric_locking_correction\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to correct volumetric locking\n    subblocks:\n  - name: /Materials/ComputePlaneIncrementalStrain\n    description: |\n      Compute strain increment for small strain under 2D planar assumptions.\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: eigenstrain_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        List of eigenstrains to be applied in this strain calculation\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: out_of_plane_strain\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Nonlinear variable for plane stress condition\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: scalar_out_of_plane_strain\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Scalar variable for generalized plane strain\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputePlaneIncrementalStrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: volumetric_locking_correction\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to correct volumetric locking\n    subblocks:\n  - name: /Materials/ComputePlaneSmallStrain\n    description: |\n      Compute a small strain under generalized plane strain assumptions where the out of plane strain is generally nonzero.\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: eigenstrain_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        List of eigenstrains to be applied in this strain calculation\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: out_of_plane_strain\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Nonlinear variable for plane stress condition\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: scalar_out_of_plane_strain\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Scalar variable for generalized plane strain\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputePlaneSmallStrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: volumetric_locking_correction\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to correct volumetric locking\n    subblocks:\n  - name: /Materials/ComputePlasticHeatEnergy\n    description: |\n      Plastic heat energy density = stress * plastic_strain_rate\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputePlasticHeatEnergy\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/ComputePolycrystalElasticityTensor\n    description: |\n      Compute an evolving elasticity tensor coupled to a grain growth phase field model.\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: elasticity_tensor_prefactor\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Optional function to use as a scalar prefactor on the elasticity tensor.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: grain_tracker\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Name of GrainTracker user object that provides RankFourTensors\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: length_scale\n      required: No\n      default: !!str 1e-09\n      cpp_type: double\n      group_name: \n      description: |\n        Lengthscale of the problem, in meters\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Array of coupled variables (num_name)\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: pressure_scale\n      required: No\n      default: !!str 1e+06\n      cpp_type: double\n      group_name: \n      description: |\n        Pressure scale of the problem, in pa\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputePolycrystalElasticityTensor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variables\n    - name: var_name_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Array of coupled variables (base_name)\n    subblocks:\n  - name: /Materials/ComputeRSphericalFiniteStrain\n    description: |\n      Compute a strain increment and rotation increment for finite strains in 1D spherical symmetry problems.\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: decomposition_method\n      required: No\n      default: !!str TaylorExpansion\n      cpp_type: MooseEnum\n      group_name: \n      options: TaylorExpansion EigenSolution\n      description: |\n        Methods to calculate the strain and rotation increments\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: eigenstrain_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        List of eigenstrains to be applied in this strain calculation\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputeRSphericalFiniteStrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: volumetric_locking_correction\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to correct volumetric locking\n    subblocks:\n  - name: /Materials/ComputeRSphericalIncrementalStrain\n    description: |\n      Compute a strain increment for incremental strains in 1D spherical symmetry problems.\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: eigenstrain_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        List of eigenstrains to be applied in this strain calculation\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputeRSphericalIncrementalStrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: volumetric_locking_correction\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to correct volumetric locking\n    subblocks:\n  - name: /Materials/ComputeRSphericalSmallStrain\n    description: |\n      Compute a small strain 1D spherical symmetry case.\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: eigenstrain_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        List of eigenstrains to be applied in this strain calculation\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputeRSphericalSmallStrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: volumetric_locking_correction\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to correct volumetric locking\n    subblocks:\n  - name: /Materials/ComputeReducedOrderEigenstrain\n    description: |\n      \n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: eigenstrain_name\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property name for the eigenstrain tensor computed by this model. IMPORTANT: The name of this property must also be provided to the strain calculator.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: incremental_form\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Should the eigenstrain be in incremental form (for incremental models)?\n    - name: input_eigenstrain_names\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        List of eigenstrains to be applied in this strain calculation\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputeReducedOrderEigenstrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/ComputeSmallStrain\n    description: |\n      Compute a small strain.\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: eigenstrain_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        List of eigenstrains to be applied in this strain calculation\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputeSmallStrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: volumetric_locking_correction\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to correct volumetric locking\n    subblocks:\n  - name: /Materials/ComputeSmearedCrackingStress\n    description: |\n      Compute stress using elasticity for finite strains\n    parameters:\n    - name: absolute_tolerance\n      required: No\n      default: !!str 1e-05\n      cpp_type: double\n      group_name: \n      description: |\n        Absolute convergence tolerance for the stress update iterations over the stress change after all update materials are called\n    - name: active_crack_planes\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        Planes on which cracks are allowed (0,1,2 -> x,z,theta in RZ)\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: combined_inelastic_strain_weights\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The combined_inelastic_strain Material Property is a weighted sum of the model inelastic strains.  This parameter is a vector of weights, of the same length as inelastic_models.  Default = \'1 1 ... 1\'.  This parameter is set to 1 if the number of models = 1\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: cracking_beta\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Coefficient used to control the softening in the exponential model.  When set to 1, the initial softening slope is equal to the negative of the Young\'s modulus.  Smaller numbers scale down that slope.\n    - name: cracking_neg_fraction\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The fraction of the cracking strain at which a transitition begins during decreasing strain to the original stiffness.\n    - name: cracking_release\n      required: No\n      default: !!str abrupt\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The cracking release type.  Choices are abrupt (default) and exponential.\n    - name: cracking_residual_stress\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The fraction of the cracking stress allowed to be maintained following a crack.\n    - name: cracking_stress\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The stress threshold beyond which cracking occurs. Negative values prevent cracking.\n    - name: cycle_models\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        At timestep N use only inelastic model N % num_models.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: inelastic_models\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialName, std::allocator<MaterialName> >\n      group_name: \n      description: |\n        The material objects to use to calculate stress and inelastic strains. Note: specify creep models first and plasticity models second.\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n    - name: max_cracks\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The maximum number of cracks allowed at a material point.\n    - name: max_iterations\n      required: No\n      default: !!str 30\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of the stress update iterations over the stress change after all update materials are called\n    - name: max_stress_correction\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Maximum permitted correction to the predicted stress as a ratio of the stress change to the predicted stress from the previous step\'s damage level. Values less than 1 will improve robustness, but not be as accurate.\n    - name: output_iteration_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true to output stress update iteration information over the stress change\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: perform_finite_strain_rotations\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Tensors are correctly rotated in finite-strain simulations.  For optimal performance you can set this to \'false\' if you are only ever using small strains\n    - name: relative_tolerance\n      required: No\n      default: !!str 1e-05\n      cpp_type: double\n      group_name: \n      description: |\n        Relative convergence tolerance for the stress update iterations over the stress change after all update materials are called\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: shear_retention_factor\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Fraction of original shear stiffness to be retained after cracking\n    - name: store_stress_old\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n    - name: tangent_operator\n      required: No\n      default: !!str nonlinear\n      cpp_type: MooseEnum\n      group_name: \n      options: elastic nonlinear\n      description: |\n        Type of tangent operator to return.  \'elastic\': return the elasticity tensor.  \'nonlinear\': return the full, general consistent tangent operator.\n    - name: type\n      required: No\n      default: !!str ComputeSmearedCrackingStress\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Materials/ComputeStrainIncrementBasedStress\n    description: |\n      Compute stress after subtracting inelastic strain increments\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: inelastic_strain_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Names of inelastic strain properties\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: store_stress_old\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n    - name: type\n      required: No\n      default: !!str ComputeStrainIncrementBasedStress\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Materials/ComputeThermalExpansionEigenstrain\n    description: |\n      Computes eigenstrain due to thermal expansion with a constant coefficient\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: eigenstrain_name\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property name for the eigenstrain tensor computed by this model. IMPORTANT: The name of this property must also be provided to the strain calculator.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: incremental_form\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Should the eigenstrain be in incremental form (for incremental models)?\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: stress_free_temperature\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Reference temperature at which there is no thermal expansion for thermal eigenstrain calculation\n    - name: temperature\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled temperature\n    - name: thermal_expansion_coeff\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Thermal expansion coefficient\n    - name: type\n      required: No\n      default: !!str ComputeThermalExpansionEigenstrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/ComputeVariableBaseEigenStrain\n    description: |\n      Computes Eigenstrain based on material property tensor base\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: base_tensor_property_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of base tensor property\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: eigenstrain_name\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property name for the eigenstrain tensor computed by this model. IMPORTANT: The name of this property must also be provided to the strain calculator.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: incremental_form\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Should the eigenstrain be in incremental form (for incremental models)?\n    - name: offset_tensor\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Vector of values defining the constant base tensor for the Eigenstrain\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: prefactor\n      required: No\n      default: !!str 1\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of material defining the variable dependence\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputeVariableBaseEigenStrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/ComputeVariableEigenstrain\n    description: |\n      Computes an Eigenstrain and its derivatives that is a function of multiple variables, where the prefactor is defined in a derivative material\n    parameters:\n    - name: args\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        variable dependencies for the prefactor\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: eigen_base\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Vector of values defining the constant base tensor for the Eigenstrain\n    - name: eigenstrain_name\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property name for the eigenstrain tensor computed by this model. IMPORTANT: The name of this property must also be provided to the strain calculator.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: incremental_form\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Should the eigenstrain be in incremental form (for incremental models)?\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: prefactor\n      required: No\n      default: !!str 1\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of material defining the variable dependence\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputeVariableEigenstrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/ComputeVariableIsotropicElasticityTensor\n    description: |\n      Compute an isotropic elasticity tensor for elastic constants that change as a function of material properties\n    parameters:\n    - name: args\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variable dependence for the Young\'s Modulus and Poisson\'s Ratio materials\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: elasticity_tensor_prefactor\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Optional function to use as a scalar prefactor on the elasticity tensor.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: poissons_ratio\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of material defining the Poisson\'s Ratio\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputeVariableIsotropicElasticityTensor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: youngs_modulus\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of material defining the Young\'s Modulus\n    subblocks:\n  - name: /Materials/ComputeVolumetricDeformGrad\n    description: |\n      Computes volumetric deformation gradient and adjusts the total deformation gradient\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: post_deform_grad_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of adjusted deformation gradient variable\n    - name: pre_deform_grad_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of pre-adjusted deformation gradient variable\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputeVolumetricDeformGrad\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: volumetric_deform_grad_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of volumetric deformation gradient variable\n    subblocks:\n  - name: /Materials/ComputeVolumetricEigenstrain\n    description: |\n      Computes an eigenstrain that is defined by a set of scalar material properties that summed together define the volumetric change.  This also computes the derivatives of that eigenstrain with respect to a supplied set of variable dependencies.\n    parameters:\n    - name: args\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        variable dependencies for the volumetric_expansion\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: eigenstrain_name\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property name for the eigenstrain tensor computed by this model. IMPORTANT: The name of this property must also be provided to the strain calculator.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: incremental_form\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Should the eigenstrain be in incremental form (for incremental models)?\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputeVolumetricEigenstrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: volumetric_materials\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        List of scalar materials defining the volumetric change\n    subblocks:\n  - name: /Materials/ConstantAnisotropicMobility\n    description: |\n      Provide a constant mobility tensor value\n    parameters:\n    - name: M_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of the mobility tensor porperty to generate\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: tensor\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Tensor values\n    - name: type\n      required: No\n      default: !!str ConstantAnisotropicMobility\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/CrossTermBarrierFunctionMaterial\n    description: |\n      Free energy contribution symmetric across interfaces between arbitrary pairs of phases.\n    parameters:\n    - name: W_ij\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Terms controlling barrier height set W=1 in DerivativeMultiPhaseMaterial for these to apply\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: etas\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        eta_i order parameters, one for each h\n    - name: function_name\n      required: No\n      default: !!str g\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        actual name for g(eta_i)\n    - name: g_order\n      required: No\n      default: !!str SIMPLE\n      cpp_type: MooseEnum\n      group_name: \n      options: SIMPLE LOW\n      description: |\n        Polynomial order of the barrier function g(eta)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CrossTermBarrierFunctionMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/DeformedGrainMaterial\n    description: |\n      \n    parameters:\n    - name: Burg_vec\n      required: No\n      default: !!str 3e-10\n      cpp_type: double\n      group_name: \n      description: |\n        Length of Burger Vector in m\n    - name: Disloc_Den\n      required: No\n      default: !!str 9e+15\n      cpp_type: double\n      group_name: \n      description: |\n        Dislocation Density in m^-2\n    - name: Elas_Mod\n      required: No\n      default: !!str 2.5e+10\n      cpp_type: double\n      group_name: \n      description: |\n        Elastic Modulus in J/m^3\n    - name: GBE\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Grain boundary energy in J/m^2\n    - name: GBMobility\n      required: No\n      default: !!str 2e-13\n      cpp_type: double\n      group_name: \n      description: |\n        GB mobility input in m^4/(J*s)\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: deformed_grain_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of OP representing deformed grains\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: grain_tracker\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The GrainTracker UserObject to get values from.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: int_width\n      required: No\n      default: !!str 4\n      cpp_type: double\n      group_name: \n      description: |\n        Diffuse Interface width in length_scale unit\n    - name: length_scale\n      required: No\n      default: !!str 1e-09\n      cpp_type: double\n      group_name: \n      description: |\n        Length scale in m, where default is nm\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Array of coupled variables (num_name)\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: time_scale\n      required: No\n      default: !!str 1e-06\n      cpp_type: double\n      group_name: \n      description: |\n        Time scale in sec, where default is micro sec\n    - name: type\n      required: No\n      default: !!str DeformedGrainMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variables\n    - name: var_name_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Array of coupled variables (base_name)\n    subblocks:\n  - name: /Materials/DerivativeMultiPhaseMaterial\n    description: |\n      Two phase material that combines n phase materials using a switching function with and n nonconserved order parameters (to be used with SwitchingFunctionConstraint*).\n    parameters:\n    - name: W\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Energy barrier for the phase transformation from A to B\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Arguments of the fi free energies - use vector coupling\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: derivative_order\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum order of derivatives taken (2 or 3)\n    - name: displacement_gradients\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of displacement gradient variables (see Modules/PhaseField/DisplacementGradients action)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: etas\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Order parameters for all phases.\n    - name: f_name\n      required: No\n      default: !!str F\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name of the free energy function (used to name the material properties)\n    - name: fi_names\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        List of free energies for the n phases\n    - name: g\n      required: No\n      default: !!str g\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Barrier Function Material that provides g(eta_i)\n    - name: hi_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Switching Function Materials that provide h(eta_i)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: third_derivatives\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to indicate if third derivatives are needed\n    - name: type\n      required: No\n      default: !!str DerivativeMultiPhaseMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/DerivativeParsedMaterial\n    description: |\n      Parsed Function Material with automatic derivatives.\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Arguments of F() - use vector coupling\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_expressions\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector of values for the constants in constant_names (can be an FParser expression)\n    - name: constant_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector of constants used in the parsed function (use this for kB etc.)\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: derivative_order\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum order of derivatives taken\n    - name: disable_fpoptimizer\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Disable the function parser algebraic optimizer\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: enable_ad_cache\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable cacheing of function derivatives for faster startup time\n    - name: enable_auto_optimize\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable automatic immediate optimization of derivatives\n    - name: enable_jit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable just-in-time compilation of function expressions for faster evaluation\n    - name: f_name\n      required: No\n      default: !!str F\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name of the free energy function (used to name the material properties)\n    - name: fail_on_evalerror\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        FParser function expression for the phase free energy\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: material_property_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector of material properties used in the parsed function\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: third_derivatives\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to indicate if third derivatives are needed\n    - name: tol_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector of variable names to be protected from being 0 or 1 within a tolerance (needed for log(c) and log(1-c) terms)\n    - name: tol_values\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Vector of tolerance values for the variables in tol_names\n    - name: type\n      required: No\n      default: !!str DerivativeParsedMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/DerivativeSumMaterial\n    description: |\n      Meta-material to sum up multiple derivative materials\n    parameters:\n    - name: args\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Arguments of the free energy functions being summed - use vector coupling\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \'Advanced\'\n      description: |\n        Constant to be added to the prefactor multiplied sum.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: derivative_order\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum order of derivatives taken (2 or 3)\n    - name: displacement_gradients\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of displacement gradient variables (see Modules/PhaseField/DisplacementGradients action)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: f_name\n      required: No\n      default: !!str F\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name of the free energy function (used to name the material properties)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: prefactor\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \'Advanced\'\n      description: |\n        Prefactor to multiply the sum term with.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: sum_materials\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Base name of the free energy function (used to name the material properties)\n    - name: third_derivatives\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to indicate if third derivatives are needed\n    - name: type\n      required: No\n      default: !!str DerivativeSumMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/DerivativeTwoPhaseMaterial\n    description: |\n      Two phase material that combines two single phase materials using a switching function.\n    parameters:\n    - name: W\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Energy barrier for the phase transformation from A to B\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Arguments of fa and fb - use vector coupling\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: derivative_order\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum order of derivatives taken (2 or 3)\n    - name: displacement_gradients\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of displacement gradient variables (see Modules/PhaseField/DisplacementGradients action)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: eta\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Order parameter\n    - name: f_name\n      required: No\n      default: !!str F\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name of the free energy function (used to name the material properties)\n    - name: fa_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Phase A material (at eta=0)\n    - name: fb_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Phase A material (at eta=1)\n    - name: g\n      required: No\n      default: !!str g\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Barrier Function Material that provides g(eta)\n    - name: h\n      required: No\n      default: !!str h\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Switching Function Material that provides h(eta)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: third_derivatives\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to indicate if third derivatives are needed\n    - name: type\n      required: No\n      default: !!str DerivativeTwoPhaseMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/DiscreteNucleation\n    description: |\n      Free energy contribution for nucleating discrete particles\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: derivative_order\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum order of derivatives taken (2 or 3)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: f_name\n      required: No\n      default: !!str F\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name of the free energy function (used to name the material properties)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: map\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        DiscreteNucleationMap user object\n    - name: op_names\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        List of variables to force to a target concentration value\n    - name: op_values\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        List of target concentration values\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: penalty\n      required: No\n      default: !!str 20\n      cpp_type: double\n      group_name: \n      description: |\n        Penalty factor for enforcing the target concentrations\n    - name: penalty_mode\n      required: No\n      default: !!str MATCH\n      cpp_type: MooseEnum\n      group_name: \n      options: MATCH MIN MAX\n      description: |\n        Match the target concentration or take it as a minimum or maximum concentration target\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: third_derivatives\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to indicate if third derivatives are needed\n    - name: type\n      required: No\n      default: !!str DiscreteNucleation\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/ElasticEnergyMaterial\n    description: |\n      Free energy material for the elastic energy contributions.\n    parameters:\n    - name: args\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Arguments of F() - use vector coupling\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material property base name\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: derivative_order\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum order of derivatives taken (2 or 3)\n    - name: displacement_gradients\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of displacement gradient variables (see Modules/PhaseField/DisplacementGradients action)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: f_name\n      required: No\n      default: !!str F\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name of the free energy function (used to name the material properties)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: third_derivatives\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to indicate if third derivatives are needed\n    - name: type\n      required: No\n      default: !!str ElasticEnergyMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/EshelbyTensor\n    description: |\n      Stuff\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: temperature\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled temperature\n    - name: type\n      required: No\n      default: !!str EshelbyTensor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/ExternalForceDensityMaterial\n    description: |\n      Providing external applied force density to grains\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Concentration field\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: etas\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled order parameters\n    - name: force_x\n      required: No\n      default: !!str 0\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The forcing function in x direction.\n    - name: force_y\n      required: No\n      default: !!str 0\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The forcing function in y direction.\n    - name: force_z\n      required: No\n      default: !!str 0\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The forcing function in z direction.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: k\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        stiffness constant multiplier\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Array of coupled order parameters (num_name)\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ExternalForceDensityMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: var_name_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Array of coupled order parameters (base_name)\n    subblocks:\n  - name: /Materials/FiniteStrainCPSlipRateRes\n    description: |\n      Crystal Plasticity base class: FCC system with power law flow rule implemented\n    parameters:\n    - name: abs_tol\n      required: No\n      default: !!str 1e-06\n      cpp_type: double\n      group_name: \n      description: |\n        Constitutive stress residue absolute tolerance\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: flowprops\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Parameters used in slip rate equations\n    - name: gen_random_stress_flag\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to generate random stress to perform time cutback on constitutive failure\n    - name: gprops\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Initial values of slip system resistances\n    - name: gtol\n      required: No\n      default: !!str 100\n      cpp_type: double\n      group_name: \n      description: |\n        Constitutive slip system resistance residual tolerance\n    - name: hprops\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Hardening properties\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n    - name: input_random_scaling_var\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to input scaling variable: _Cijkl(0,0,0,0) when false\n    - name: intvar_read_type\n      required: No\n      default: !!str none\n      cpp_type: MooseEnum\n      group_name: \n      options: slip_sys_file slip_sys_res_file none\n      description: |\n        Read from options for initial value of internal variables: Default from .i file\n    - name: line_search_maxiter\n      required: No\n      default: !!str 20\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Line search bisection method maximum number of iteration\n    - name: line_search_method\n      required: No\n      default: !!str CUT_HALF\n      cpp_type: MooseEnum\n      group_name: \n      options: CUT_HALF BISECTION\n      description: |\n        The method used in line search\n    - name: line_search_tol\n      required: No\n      default: !!str 0.5\n      cpp_type: double\n      group_name: \n      description: |\n        Line search bisection method tolerance\n    - name: maximum_substep_iteration\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of substep iteration\n    - name: maxiter\n      required: No\n      default: !!str 100\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of iterations for stress update\n    - name: maxitergss\n      required: No\n      default: !!str 100\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of iterations for slip system resistance update\n    - name: min_line_search_step_size\n      required: No\n      default: !!str 0.01\n      cpp_type: double\n      group_name: \n      description: |\n        Minimum line search step size\n    - name: nss\n      required: Yes\n      default: !!str \n      cpp_type: int\n      group_name: \n      description: |\n        Number of slip systems\n    - name: num_slip_sys_flowrate_props\n      required: No\n      default: !!str 2\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of flow rate properties for a slip system\n    - name: num_slip_sys_props\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of slip system specific properties provided in the file containing slip system normals and directions\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: random_scaling_var\n      required: No\n      default: !!str 1e+09\n      cpp_type: double\n      group_name: \n      description: |\n        Random scaling variable: Large value can cause non-positive definiteness\n    - name: random_seed\n      required: No\n      default: !!str 2000\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Random integer used to generate random stress when constitutive failure occurs\n    - name: read_prop_user_object\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The ElementReadPropertyFile GeneralUserObject to read element specific property values from file\n    - name: rtol\n      required: No\n      default: !!str 1e-06\n      cpp_type: double\n      group_name: \n      description: |\n        Constitutive stress residue relative tolerance\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: slip_incr_tol\n      required: No\n      default: !!str 0.02\n      cpp_type: double\n      group_name: \n      description: |\n        Maximum allowable slip in an increment\n    - name: slip_sys_file_name\n      required: Yes\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        Name of the file containing the slip system\n    - name: slip_sys_flow_prop_file_name\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        Name of the file containing the values of slip rate equation parameters\n    - name: slip_sys_hard_prop_file_name\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        Name of the file containing the values of hardness evolution parameters\n    - name: slip_sys_res_prop_file_name\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        Name of the file containing the initial values of slip system resistances\n    - name: store_stress_old\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n    - name: tan_mod_type\n      required: No\n      default: !!str none\n      cpp_type: MooseEnum\n      group_name: \n      options: exact none\n      description: |\n        Type of tangent moduli for preconditioner: default elastic\n    - name: type\n      required: No\n      default: !!str FiniteStrainCPSlipRateRes\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_line_search\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Use line search in constitutive update\n    subblocks:\n  - name: /Materials/FiniteStrainCrystalPlasticity\n    description: |\n      Crystal Plasticity base class: FCC system with power law flow rule implemented\n    parameters:\n    - name: abs_tol\n      required: No\n      default: !!str 1e-06\n      cpp_type: double\n      group_name: \n      description: |\n        Constitutive stress residue absolute tolerance\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: flowprops\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Parameters used in slip rate equations\n    - name: gen_random_stress_flag\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to generate random stress to perform time cutback on constitutive failure\n    - name: gprops\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Initial values of slip system resistances\n    - name: gtol\n      required: No\n      default: !!str 100\n      cpp_type: double\n      group_name: \n      description: |\n        Constitutive slip system resistance residual tolerance\n    - name: hprops\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Hardening properties\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n    - name: input_random_scaling_var\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to input scaling variable: _Cijkl(0,0,0,0) when false\n    - name: intvar_read_type\n      required: No\n      default: !!str none\n      cpp_type: MooseEnum\n      group_name: \n      options: slip_sys_file slip_sys_res_file none\n      description: |\n        Read from options for initial value of internal variables: Default from .i file\n    - name: line_search_maxiter\n      required: No\n      default: !!str 20\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Line search bisection method maximum number of iteration\n    - name: line_search_method\n      required: No\n      default: !!str CUT_HALF\n      cpp_type: MooseEnum\n      group_name: \n      options: CUT_HALF BISECTION\n      description: |\n        The method used in line search\n    - name: line_search_tol\n      required: No\n      default: !!str 0.5\n      cpp_type: double\n      group_name: \n      description: |\n        Line search bisection method tolerance\n    - name: maximum_substep_iteration\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of substep iteration\n    - name: maxiter\n      required: No\n      default: !!str 100\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of iterations for stress update\n    - name: maxitergss\n      required: No\n      default: !!str 100\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of iterations for slip system resistance update\n    - name: min_line_search_step_size\n      required: No\n      default: !!str 0.01\n      cpp_type: double\n      group_name: \n      description: |\n        Minimum line search step size\n    - name: nss\n      required: Yes\n      default: !!str \n      cpp_type: int\n      group_name: \n      description: |\n        Number of slip systems\n    - name: num_slip_sys_flowrate_props\n      required: No\n      default: !!str 2\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of flow rate properties for a slip system\n    - name: num_slip_sys_props\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of slip system specific properties provided in the file containing slip system normals and directions\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: random_scaling_var\n      required: No\n      default: !!str 1e+09\n      cpp_type: double\n      group_name: \n      description: |\n        Random scaling variable: Large value can cause non-positive definiteness\n    - name: random_seed\n      required: No\n      default: !!str 2000\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Random integer used to generate random stress when constitutive failure occurs\n    - name: read_prop_user_object\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The ElementReadPropertyFile GeneralUserObject to read element specific property values from file\n    - name: rtol\n      required: No\n      default: !!str 1e-06\n      cpp_type: double\n      group_name: \n      description: |\n        Constitutive stress residue relative tolerance\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: slip_incr_tol\n      required: No\n      default: !!str 0.02\n      cpp_type: double\n      group_name: \n      description: |\n        Maximum allowable slip in an increment\n    - name: slip_sys_file_name\n      required: Yes\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        Name of the file containing the slip system\n    - name: slip_sys_flow_prop_file_name\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        Name of the file containing the values of slip rate equation parameters\n    - name: slip_sys_hard_prop_file_name\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        Name of the file containing the values of hardness evolution parameters\n    - name: slip_sys_res_prop_file_name\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        Name of the file containing the initial values of slip system resistances\n    - name: store_stress_old\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n    - name: tan_mod_type\n      required: No\n      default: !!str none\n      cpp_type: MooseEnum\n      group_name: \n      options: exact none\n      description: |\n        Type of tangent moduli for preconditioner: default elastic\n    - name: type\n      required: No\n      default: !!str FiniteStrainCrystalPlasticity\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_line_search\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Use line search in constitutive update\n    subblocks:\n  - name: /Materials/FiniteStrainHyperElasticViscoPlastic\n    description: |\n      Material class for hyper-elastic visco-platic flow: Can handle multiple flow models defined by flowratemodel type user objects\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: flow_rate_user_objects\n      required: No\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of User object names that computes flow rate and derivatives\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n    - name: internal_var_rate_user_objects\n      required: No\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of User object names that computes internal variable rates and derivatives\n    - name: internal_var_user_objects\n      required: No\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of User object names that integrates internal variables and computes derivatives\n    - name: max_substep_iteration\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of substep iteration\n    - name: maxiters\n      required: No\n      default: !!str 50\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum iteration for flow rate update\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: resid_abs_tol\n      required: No\n      default: !!str 1e-10\n      cpp_type: double\n      group_name: \n      description: |\n        Absolute Tolerance for flow rate residual equation\n    - name: resid_rel_tol\n      required: No\n      default: !!str 1e-06\n      cpp_type: double\n      group_name: \n      description: |\n        Relative Tolerance for flow rate residual equation\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: store_stress_old\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n    - name: strength_user_objects\n      required: No\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of User object names that computes strength variables and derivatives\n    - name: type\n      required: No\n      default: !!str FiniteStrainHyperElasticViscoPlastic\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Materials/FiniteStrainPlasticMaterial\n    description: |\n      Associative J2 plasticity with isotropic hardening.\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: eptol\n      required: No\n      default: !!str 1e-07\n      cpp_type: double\n      group_name: \n      description: |\n        Equivalent plastic strain NR tolerance\n    - name: ftol\n      required: No\n      default: !!str 0.0001\n      cpp_type: double\n      group_name: \n      description: |\n        Consistency condition NR tolerance\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: rtol\n      required: No\n      default: !!str 1e-08\n      cpp_type: double\n      group_name: \n      description: |\n        Plastic strain NR tolerance\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: store_stress_old\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n    - name: type\n      required: No\n      default: !!str FiniteStrainPlasticMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: yield_stress\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Input data as pairs of equivalent plastic strain and yield stress: Should start with equivalent plastic strain 0\n    subblocks:\n  - name: /Materials/FiniteStrainUObasedCP\n    description: |\n      Crystal Plasticity base class: FCC system with power law flow rule implemented\n    parameters:\n    - name: abs_tol\n      required: No\n      default: !!str 1e-06\n      cpp_type: double\n      group_name: \n      description: |\n        Constitutive stress residue absolute tolerance\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n    - name: line_search_maxiter\n      required: No\n      default: !!str 20\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Line search bisection method maximum number of iteration\n    - name: line_search_method\n      required: No\n      default: !!str CUT_HALF\n      cpp_type: MooseEnum\n      group_name: \n      options: CUT_HALF BISECTION\n      description: |\n        The method used in line search\n    - name: line_search_tol\n      required: No\n      default: !!str 0.5\n      cpp_type: double\n      group_name: \n      description: |\n        Line search bisection method tolerance\n    - name: maximum_substep_iteration\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of substep iteration\n    - name: maxiter\n      required: No\n      default: !!str 100\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of iterations for stress update\n    - name: maxiter_state_variable\n      required: No\n      default: !!str 100\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of iterations for state variable update\n    - name: min_line_search_step_size\n      required: No\n      default: !!str 0.01\n      cpp_type: double\n      group_name: \n      description: |\n        Minimum line search step size\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: rtol\n      required: No\n      default: !!str 1e-06\n      cpp_type: double\n      group_name: \n      description: |\n        Constitutive stress residue relative tolerance\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: stol\n      required: No\n      default: !!str 0.01\n      cpp_type: double\n      group_name: \n      description: |\n        Constitutive slip system resistance relative residual tolerance\n    - name: store_stress_old\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n    - name: tan_mod_type\n      required: No\n      default: !!str none\n      cpp_type: MooseEnum\n      group_name: \n      options: exact none\n      description: |\n        Type of tangent moduli for preconditioner: default elastic\n    - name: type\n      required: No\n      default: !!str FiniteStrainUObasedCP\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: uo_slip_rates\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of names of user objects that define the slip rates for this material.\n    - name: uo_slip_resistances\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of names of user objects that define the slip resistances for this material.\n    - name: uo_state_var_evol_rate_comps\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of names of user objects that define the state variable evolution rate components for this material.\n    - name: uo_state_vars\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of names of user objects that define the state variable for this material.\n    - name: use_line_search\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Use line search in constitutive update\n    - name: zero_tol\n      required: No\n      default: !!str 1e-12\n      cpp_type: double\n      group_name: \n      description: |\n        Tolerance for residual check when variable value is zero\n    subblocks:\n  - name: /Materials/FluxBasedStrainIncrement\n    description: |\n      Compute strain increment based on flux\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: gb\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Grain boundary order parameter\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: property_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of diffusive strain increment property\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str FluxBasedStrainIncrement\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: xflux\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x or 0-direction component of flux\n    - name: yflux\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y or 1-direction component of flux\n    - name: zflux\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z or 2-direction component of flux\n    subblocks:\n  - name: /Materials/ForceDensityMaterial\n    description: |\n      Calculating the force density acting on a grain\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Concentration field\n    - name: ceq\n      required: No\n      default: !!str 0.9816\n      cpp_type: double\n      group_name: \n      description: |\n        Equilibrium density\n    - name: cgb\n      required: No\n      default: !!str 0.25\n      cpp_type: double\n      group_name: \n      description: |\n        Thresold Concentration for GB\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: etas\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled order parameters\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: k\n      required: No\n      default: !!str 100\n      cpp_type: double\n      group_name: \n      description: |\n        stiffness constant\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ForceDensityMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/GBAnisotropy\n    description: |\n      \n    parameters:\n    - name: Anisotropic_GB_file_name\n      required: Yes\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        Name of the file containing: 1)GB mobility prefactor; 2) GB migration activation energy; 3)GB energy\n    - name: T\n      required: No\n      default: !!str 300\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Temperature in Kelvin\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: delta_mob\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        factor determining inclination dependence of GB mobility\n    - name: delta_sigma\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        factor determining inclination dependence of GB energy\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: inclination_anisotropy\n      required: Yes\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        The GB anisotropy ininclination would be considered if true\n    - name: length_scale\n      required: No\n      default: !!str 1e-09\n      cpp_type: double\n      group_name: \n      description: |\n        Length scale in m, where default is nm\n    - name: molar_volume_value\n      required: No\n      default: !!str 7.11e-06\n      cpp_type: double\n      group_name: \n      description: |\n        molar volume of material in m^3/mol, by default it\'s the value of copper\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Array of coupled variables (num_name)\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: time_scale\n      required: No\n      default: !!str 1e-09\n      cpp_type: double\n      group_name: \n      description: |\n        Time scale in s, where default is ns\n    - name: type\n      required: No\n      default: !!str GBAnisotropy\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variables\n    - name: var_name_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Array of coupled variables (base_name)\n    - name: wGB\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Diffuse GB width in nm \n    subblocks:\n  - name: /Materials/GBDependentAnisotropicTensor\n    description: |\n      Compute anisotropic rank two tensor based on GB phase variable\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bulk_parameter\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Parameter value of bulk material\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: gb\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        GB variable\n    - name: gb_normal_tensor_name\n      required: No\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of GB normal tensor property\n    - name: gb_parameter\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Parameter value at GB\n    - name: gb_tensor_prop_name\n      required: No\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of GB tensor property\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str GBDependentAnisotropicTensor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/GBDependentDiffusivity\n    description: |\n      Compute diffusivity rank two tensor based on GB phase variable\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bulk_parameter\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Parameter value of bulk material\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: gb\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        GB variable\n    - name: gb_normal_tensor_name\n      required: No\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of GB normal tensor property\n    - name: gb_parameter\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Parameter value at GB\n    - name: gb_tensor_prop_name\n      required: No\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of GB tensor property\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str GBDependentDiffusivity\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/GBEvolution\n    description: |\n      Computes necessary material properties for the isotropic grian growth model\n    parameters:\n    - name: GBMobility\n      required: No\n      default: !!str -1\n      cpp_type: double\n      group_name: \n      description: |\n        GB mobility input in m^4/(J*s), that overrides the temperature dependent calculation\n    - name: GBenergy\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Grain boundary energy in J/m^2\n    - name: GBmob0\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Grain boundary mobility prefactor in m^4/(J*s)\n    - name: Q\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Grain boundary migration activation energy in eV\n    - name: T\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Temperature in Kelvin\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: f0s\n      required: No\n      default: !!str 0.125\n      cpp_type: double\n      group_name: \n      description: |\n        The GB energy constant \n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: length_scale\n      required: No\n      default: !!str 1e-09\n      cpp_type: double\n      group_name: \n      description: |\n        Length scale in m, where default is nm\n    - name: molar_volume\n      required: No\n      default: !!str 2.462e-05\n      cpp_type: double\n      group_name: \n      description: |\n        Molar volume in m^3/mol, needed for temperature gradient driving force\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: time_scale\n      required: No\n      default: !!str 1e-09\n      cpp_type: double\n      group_name: \n      description: |\n        Time scale in s, where default is ns\n    - name: type\n      required: No\n      default: !!str GBEvolution\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: wGB\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Diffuse GB width in the lengthscale of the model\n    subblocks:\n  - name: /Materials/GBRelaxationStrainIncrement\n    description: |\n      Compute strain increment based on lattice relaxation at GB\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: gb_normal_name\n      required: No\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of GB normal property\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: prefactor_name\n      required: No\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of perfactor property\n    - name: property_name\n      required: No\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of GB relaxation strain increment property\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str GBRelaxationStrainIncrement\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/GBWidthAnisotropy\n    description: |\n      \n    parameters:\n    - name: Anisotropic_GB_file_name\n      required: Yes\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        Name of the file containing: 1)GB mobility prefactor; 2) GB migration activation energy; 3)GB energy\n    - name: T\n      required: No\n      default: !!str 300\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Temperature in Kelvin\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: delta_mob\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        factor determining inclination dependence of GB mobility\n    - name: delta_sigma\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        factor determining inclination dependence of GB energy\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: inclination_anisotropy\n      required: Yes\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        The GB anisotropy ininclination would be considered if true\n    - name: kappa\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Prefactor of gradient free energies for all i-j interfaces\n    - name: length_scale\n      required: No\n      default: !!str 1e-09\n      cpp_type: double\n      group_name: \n      description: |\n        Length scale in m, where default is nm\n    - name: molar_volume_value\n      required: No\n      default: !!str 7.11e-06\n      cpp_type: double\n      group_name: \n      description: |\n        molar volume of material in m^3/mol, by default it\'s the value of copper\n    - name: mu\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Prefactor of bulk free energy\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Array of coupled variables (num_name)\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: time_scale\n      required: No\n      default: !!str 1e-09\n      cpp_type: double\n      group_name: \n      description: |\n        Time scale in s, where default is ns\n    - name: type\n      required: No\n      default: !!str GBWidthAnisotropy\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variables\n    - name: var_name_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Array of coupled variables (base_name)\n    subblocks:\n  - name: /Materials/GeneralizedKelvinVoigtModel\n    description: |\n      Generalized Kelvin-Voigt model composed of a serial assembly of unit Kelvin-Voigt modules\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: creep_modulus\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        list of the elastic moduli of the different springs in the material\n    - name: creep_ratio\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        list of the poisson ratios of the different springs in the material\n    - name: creep_strain_name\n      required: No\n      default: !!str creep_strain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        name of the true creep strain of the material(computed by LinearViscoelasticStressUpdate orComputeLinearViscoelasticStress\n    - name: creep_viscosity\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        list of the characteristic times of the different dashpots in the material\n    - name: driving_eigenstrain\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        name of the eigenstrain that increases the creep strains\n    - name: elastic_strain_name\n      required: No\n      default: !!str elastic_strain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        name of the true elastic strain of the material\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: integration_rule\n      required: No\n      default: !!str backward-euler\n      cpp_type: MooseEnum\n      group_name: \n      options: backward-euler mid-point newmark zienkiewicz\n      description: |\n        describes how the viscoelastic behavior is integrated through time\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: poisson_ratio\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        initial poisson ratio of the material\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: stress_name\n      required: No\n      default: !!str stress\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        name of the true stress of the material\n    - name: theta\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        coefficient for newmark integration rule (between 0 and 1)\n    - name: type\n      required: No\n      default: !!str GeneralizedKelvinVoigtModel\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: young_modulus\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        initial elastic modulus of the material\n    subblocks:\n  - name: /Materials/GeneralizedMaxwellModel\n    description: |\n      Generalized Maxwell model composed of a parralel assembly of unit Maxwell modules\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: creep_modulus\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        list of the elastic moduli of the different springs in the material\n    - name: creep_ratio\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        list of the poisson ratios of the different springs in the material\n    - name: creep_strain_name\n      required: No\n      default: !!str creep_strain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        name of the true creep strain of the material(computed by LinearViscoelasticStressUpdate orComputeLinearViscoelasticStress\n    - name: creep_viscosity\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        list of the characteristic times of the different dashpots in the material\n    - name: driving_eigenstrain\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        name of the eigenstrain that increases the creep strains\n    - name: elastic_strain_name\n      required: No\n      default: !!str elastic_strain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        name of the true elastic strain of the material\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: integration_rule\n      required: No\n      default: !!str backward-euler\n      cpp_type: MooseEnum\n      group_name: \n      options: backward-euler mid-point newmark zienkiewicz\n      description: |\n        describes how the viscoelastic behavior is integrated through time\n    - name: need_viscoelastic_properties_inverse\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        checks whether the model requires the computation of the inverse viscoelasticproperties (default: false)\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: poisson_ratio\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        initial poisson ratio of the material\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: stress_name\n      required: No\n      default: !!str stress\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        name of the true stress of the material\n    - name: theta\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        coefficient for newmark integration rule (between 0 and 1)\n    - name: type\n      required: No\n      default: !!str GeneralizedMaxwellModel\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: young_modulus\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        initial elastic modulus of the material\n    subblocks:\n  - name: /Materials/GenericConstantMaterial\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: prop_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The names of the properties this material will have\n    - name: prop_values\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The values associated with the named properties\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str GenericConstantMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/GenericConstantRankTwoTensor\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: tensor_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of the tensor material property to be created\n    - name: tensor_values\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Vector of values defining the constant rank two tensor\n    - name: type\n      required: No\n      default: !!str GenericConstantRankTwoTensor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/GenericFunctionMaterial\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: enable_stateful\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable the declaration of old and older values\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: prop_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The names of the properties this material will have\n    - name: prop_values\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        The corresponding names of the functions that are going to provide the values for the variables\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str GenericFunctionMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/GrainAdvectionVelocity\n    description: |\n      Calculation the advection velocity of grain due to rigid vody translation and rotation\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define type of force density under consideration\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Concentration field\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: etas\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of other coupled order parameters\n    - name: grain_data\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        UserObject for getting the center of mass of grains\n    - name: grain_force\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        userobject for getting force and torque acting on grains\n    - name: grain_volumes\n      required: No\n      default: !!str \n      cpp_type: VectorPostprocessorName\n      group_name: \n      description: |\n        The feature volume VectorPostprocessorValue.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Array of other coupled order parameters (num_name)\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: rotation_constant\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        constant value characterizing grain rotation\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: translation_constant\n      required: No\n      default: !!str 500\n      cpp_type: double\n      group_name: \n      description: |\n        constant value characterizing grain translation\n    - name: type\n      required: No\n      default: !!str GrainAdvectionVelocity\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: var_name_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Array of other coupled order parameters (base_name)\n    subblocks:\n  - name: /Materials/HyperElasticPhaseFieldIsoDamage\n    description: |\n      Computes damaged stress and energy in the intermediate configuration assuming isotropy\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Damage variable\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: damage_stiffness\n      required: No\n      default: !!str 1e-08\n      cpp_type: double\n      group_name: \n      description: |\n        Avoid zero after complete damage\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: flow_rate_user_objects\n      required: No\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of User object names that computes flow rate and derivatives\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n    - name: internal_var_rate_user_objects\n      required: No\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of User object names that computes internal variable rates and derivatives\n    - name: internal_var_user_objects\n      required: No\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of User object names that integrates internal variables and computes derivatives\n    - name: max_substep_iteration\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of substep iteration\n    - name: maxiters\n      required: No\n      default: !!str 50\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum iteration for flow rate update\n    - name: numerical_stiffness\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Flag for numerical stiffness\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: perturbation_scale_factor\n      required: No\n      default: !!str 1e-05\n      cpp_type: double\n      group_name: \n      description: |\n        Perturbation scale factor\n    - name: resid_abs_tol\n      required: No\n      default: !!str 1e-10\n      cpp_type: double\n      group_name: \n      description: |\n        Absolute Tolerance for flow rate residual equation\n    - name: resid_rel_tol\n      required: No\n      default: !!str 1e-06\n      cpp_type: double\n      group_name: \n      description: |\n        Relative Tolerance for flow rate residual equation\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: store_stress_old\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n    - name: strength_user_objects\n      required: No\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of User object names that computes strength variables and derivatives\n    - name: type\n      required: No\n      default: !!str HyperElasticPhaseFieldIsoDamage\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: zero_perturb\n      required: No\n      default: !!str 1e-08\n      cpp_type: double\n      group_name: \n      description: |\n        Perturbation value when strain value less than numerical zero\n    - name: zero_tol\n      required: No\n      default: !!str 1e-12\n      cpp_type: double\n      group_name: \n      description: |\n        Tolerance for numerical zero\n    subblocks:\n  - name: /Materials/HyperbolicViscoplasticityStressUpdate\n    description: |\n      This class uses the discrete material for a hyperbolic sine viscoplasticity model in which the effective plastic strain is solved for using a creep approach.\n    parameters:\n    - name: absolute_tolerance\n      required: No\n      default: !!str 1e-11\n      cpp_type: double\n      group_name: \n      description: |\n        Absolute convergence tolerance for Newton iteration\n    - name: acceptable_multiplier\n      required: No\n      default: !!str 10\n      cpp_type: double\n      group_name: \n      description: |\n        Factor applied to relative and absolute tolerance for acceptable convergence if iterations are no longer making progress\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c_alpha\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Viscoplasticity coefficient, scales the hyperbolic function\n    - name: c_beta\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Viscoplasticity coefficient inside the hyperbolic sin function\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: hardening_constant\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Hardening slope\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: legacy_return_mapping\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Perform iterations and compute residual the same way as the previous algorithm. Also use same old defaults for relative_tolerance, absolute_tolerance, and max_its.\n    - name: max_inelastic_increment\n      required: No\n      default: !!str 0.0001\n      cpp_type: double\n      group_name: \n      description: |\n        The maximum inelastic strain increment allowed in a time step\n    - name: max_its\n      required: No\n      default: !!str 30\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of Newton iterations\n    - name: output_iteration_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set true to output Newton iteration information\n    - name: output_iteration_info_on_error\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set true to output Newton iteration information when those iterations fail\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: plastic_prepend\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        String that is prepended to the plastic_strain Material Property\n    - name: relative_tolerance\n      required: No\n      default: !!str 1e-08\n      cpp_type: double\n      group_name: \n      description: |\n        Relative convergence tolerance for Newton iteration\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str HyperbolicViscoplasticityStressUpdate\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_stress\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The point at which plastic strain begins accumulating\n    subblocks:\n  - name: /Materials/IdealGasFreeEnergy\n    description: |\n      Free energy of an ideal gas.\n    parameters:\n    - name: T\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Temperature\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Concentration variable\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: derivative_order\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum order of derivatives taken\n    - name: disable_fpoptimizer\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Disable the function parser algebraic optimizer\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: enable_ad_cache\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable cacheing of function derivatives for faster startup time\n    - name: enable_auto_optimize\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable automatic immediate optimization of derivatives\n    - name: enable_jit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable just-in-time compilation of function expressions for faster evaluation\n    - name: f_name\n      required: No\n      default: !!str F\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name of the free energy function (used to name the material properties)\n    - name: fail_on_evalerror\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n    - name: h\n      required: No\n      default: !!str 4.13567e-15\n      cpp_type: double\n      group_name: \'Units\'\n      description: |\n        Planck constant - units need to be consistent with the units of omega (default in [eV*s])\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: kB\n      required: No\n      default: !!str 8.61733e-05\n      cpp_type: double\n      group_name: \'Units\'\n      description: |\n        Boltzmann constant (default in [eV/K])\n    - name: m\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas atom mass (the default mass_unit_conversion requires this to be in [u])\n    - name: mass_unit_conversion\n      required: No\n      default: !!str 1.03643e-28\n      cpp_type: double\n      group_name: \'Units\'\n      description: |\n        Conversion factor to get the gas atom mass in [eV*s^2/Ang^2] (defaults to [eV*s^2/(Ang^2*u)])\n    - name: omega\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Lattice site volume (default mass_unit_conversion requires this to be in [Ang^3])\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: third_derivatives\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to indicate if third derivatives are needed\n    - name: type\n      required: No\n      default: !!str IdealGasFreeEnergy\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/InclusionProperties\n    description: |\n      \n    parameters:\n    - name: a\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ellipse semiaxis\n    - name: b\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Ellipse semiaxis\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: energy_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of the material property where analytical elastic energies will be stored\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: lambda\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Lame\'s first parameter\n    - name: misfit_strains\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Vector of misfit strains in order eps_11, eps_22\n    - name: mu\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Shear modulus (aka Lame\'s second parameter)\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: strain_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of the material property where analytical total strains will be stored\n    - name: stress_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of the material property where analytical stresses will be stored\n    - name: type\n      required: No\n      default: !!str InclusionProperties\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/InterfaceOrientationMaterial\n    description: |\n      \n    parameters:\n    - name: anisotropy_strength\n      required: No\n      default: !!str 0.04\n      cpp_type: double\n      group_name: \n      description: |\n        Strength of the anisotropy (typically < 0.05)\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: eps_bar\n      required: No\n      default: !!str 0.01\n      cpp_type: double\n      group_name: \n      description: |\n        Average value of the interface parameter epsilon\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mode_number\n      required: No\n      default: !!str 6\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Mode number for anisotropy\n    - name: op\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Order parameter defining the solid phase\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: reference_angle\n      required: No\n      default: !!str 90\n      cpp_type: double\n      group_name: \n      description: |\n        Reference angle for defining anistropy in degrees\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str InterfaceOrientationMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/IsotropicPlasticityStressUpdate\n    description: |\n      This class uses the discrete material in a radial return isotropic plasticity model.  This class is one of the basic radial return constitutive models, yet it can be used in conjunction with other creep and plasticity materials for more complex simulations.\n    parameters:\n    - name: absolute_tolerance\n      required: No\n      default: !!str 1e-11\n      cpp_type: double\n      group_name: \n      description: |\n        Absolute convergence tolerance for Newton iteration\n    - name: acceptable_multiplier\n      required: No\n      default: !!str 10\n      cpp_type: double\n      group_name: \n      description: |\n        Factor applied to relative and absolute tolerance for acceptable convergence if iterations are no longer making progress\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: hardening_constant\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Hardening slope\n    - name: hardening_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        True stress as a function of plastic strain\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: legacy_return_mapping\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Perform iterations and compute residual the same way as the previous algorithm. Also use same old defaults for relative_tolerance, absolute_tolerance, and max_its.\n    - name: max_inelastic_increment\n      required: No\n      default: !!str 0.0001\n      cpp_type: double\n      group_name: \n      description: |\n        The maximum inelastic strain increment allowed in a time step\n    - name: max_its\n      required: No\n      default: !!str 30\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of Newton iterations\n    - name: output_iteration_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set true to output Newton iteration information\n    - name: output_iteration_info_on_error\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set true to output Newton iteration information when those iterations fail\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: plastic_prepend\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        String that is prepended to the plastic_strain Material Property\n    - name: relative_tolerance\n      required: No\n      default: !!str 1e-08\n      cpp_type: double\n      group_name: \n      description: |\n        Relative convergence tolerance for Newton iteration\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: temperature\n      required: No\n      default: !!str 0\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled Temperature\n    - name: type\n      required: No\n      default: !!str IsotropicPlasticityStressUpdate\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_stress\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The point at which plastic strain begins accumulating\n    - name: yield_stress_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Yield stress as a function of temperature\n    subblocks:\n  - name: /Materials/IsotropicPowerLawHardeningStressUpdate\n    description: |\n      This class uses the discrete material in a radial return isotropic plasticity power law hardening model, solving for the yield stress as the intersection of the power law relation curve and Hooke\'s law.  This class can be used in conjunction with other creep and plasticity materials for more complex simulations.\n    parameters:\n    - name: absolute_tolerance\n      required: No\n      default: !!str 1e-11\n      cpp_type: double\n      group_name: \n      description: |\n        Absolute convergence tolerance for Newton iteration\n    - name: acceptable_multiplier\n      required: No\n      default: !!str 10\n      cpp_type: double\n      group_name: \n      description: |\n        Factor applied to relative and absolute tolerance for acceptable convergence if iterations are no longer making progress\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: hardening_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        True stress as a function of plastic strain\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: legacy_return_mapping\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Perform iterations and compute residual the same way as the previous algorithm. Also use same old defaults for relative_tolerance, absolute_tolerance, and max_its.\n    - name: max_inelastic_increment\n      required: No\n      default: !!str 0.0001\n      cpp_type: double\n      group_name: \n      description: |\n        The maximum inelastic strain increment allowed in a time step\n    - name: max_its\n      required: No\n      default: !!str 30\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of Newton iterations\n    - name: output_iteration_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set true to output Newton iteration information\n    - name: output_iteration_info_on_error\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set true to output Newton iteration information when those iterations fail\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: plastic_prepend\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        String that is prepended to the plastic_strain Material Property\n    - name: relative_tolerance\n      required: No\n      default: !!str 1e-08\n      cpp_type: double\n      group_name: \n      description: |\n        Relative convergence tolerance for Newton iteration\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: strain_hardening_exponent\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The strain hardening exponent (n) for power law hardening\n    - name: strength_coefficient\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The strength coefficient (K) for power law hardening\n    - name: temperature\n      required: No\n      default: !!str 0\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled Temperature\n    - name: type\n      required: No\n      default: !!str IsotropicPowerLawHardeningStressUpdate\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_stress_function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Yield stress as a function of temperature\n    subblocks:\n  - name: /Materials/KKSXeVacSolidMaterial\n    description: |\n      KKS Solid phase free energy for Xe,Vac in UO2.  Fm(cmg,cmv)\n    parameters:\n    - name: T\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Temperature in [K]\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: cmg\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Gas concnetration\n    - name: cmv\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vacancy concnetration\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: derivative_order\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum order of derivatives taken (2 or 3)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: f_name\n      required: No\n      default: !!str F\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name of the free energy function (used to name the material properties)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: third_derivatives\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to indicate if third derivatives are needed\n    - name: type\n      required: No\n      default: !!str KKSXeVacSolidMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/LinearElasticTruss\n    description: |\n      \n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: temperature\n      required: No\n      default: !!str 273\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Temperature in Kelvin\n    - name: temperature_ref\n      required: No\n      default: !!str 273\n      cpp_type: double\n      group_name: \n      description: |\n        Reference temperature for thermal expansion in K\n    - name: thermal_expansion_coeff\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Thermal expansion coefficient in 1/K\n    - name: type\n      required: No\n      default: !!str LinearElasticTruss\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: youngs_modulus\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variable containing Young\'s modulus\n    subblocks:\n  - name: /Materials/LinearIsoElasticPFDamage\n    description: |\n      Phase-field fracture model energy contribution to damage growth-isotropic elasticity and undamaged stress under compressive strain\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple mechanics material systems on the same block, i.e. for multiple phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Order parameter for damage, continuous between 0 and 1, 0 represents no damage, 1 represents fully cracked\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: initial_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        A list of functions describing the initial stress.  If provided, there must be 9 of these, corresponding to the xx, yx, zx, xy, yy, zy, xz, yz, zz components respectively.  If not provided, all components of the initial stress will be zero\n    - name: kdamage\n      required: No\n      default: !!str 1e-06\n      cpp_type: double\n      group_name: \n      description: |\n        Stiffness of damaged matrix\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: store_stress_old\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Parameter which indicates whether the old stress state, required for the HHT time integration scheme and Rayleigh damping, needs to be stored\n    - name: type\n      required: No\n      default: !!str LinearIsoElasticPFDamage\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Materials/LinearViscoelasticStressUpdate\n    description: |\n      Calculates an admissible state (stress that lies on or within the yield surface, plastic strains, internal parameters, etc).  This class is intended to be a parent class for classes with specific constitutive models.\n    parameters:\n    - name: apparent_creep_strain\n      required: No\n      default: !!str apparent_creep_strain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        name of the apparent creep strain (defined by a LinearViscoelasticityBase material)\n    - name: apparent_elasticity_tensor\n      required: No\n      default: !!str apparent_elasticity_tensor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        name of the apparent elasticity tensor (defined by a LinearViscoelasticityBase material)\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        optional string prepended to the creep strain name\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: instantaneous_elasticity_tensor_inv\n      required: No\n      default: !!str instantaneous_elasticity_tensor_inv\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        name of the apparent compliance tensor (defined by a LinearViscoelasticityBase material)\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str LinearViscoelasticStressUpdate\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/MathEBFreeEnergy\n    description: |\n      Material that implements the math free energy using the expression builder and automatric differentiation\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Concentration variable\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: derivative_order\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum order of derivatives taken\n    - name: disable_fpoptimizer\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Disable the function parser algebraic optimizer\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: enable_ad_cache\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable cacheing of function derivatives for faster startup time\n    - name: enable_auto_optimize\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable automatic immediate optimization of derivatives\n    - name: enable_jit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable just-in-time compilation of function expressions for faster evaluation\n    - name: f_name\n      required: No\n      default: !!str F\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name of the free energy function (used to name the material properties)\n    - name: fail_on_evalerror\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: third_derivatives\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to indicate if third derivatives are needed\n    - name: type\n      required: No\n      default: !!str MathEBFreeEnergy\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/MathFreeEnergy\n    description: |\n      Material that implements the math free energy and its derivatives: \\nF = 1/4(1 + c)^2*(1 - c)^2\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Concentration variable\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: derivative_order\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum order of derivatives taken (2 or 3)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: f_name\n      required: No\n      default: !!str F\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name of the free energy function (used to name the material properties)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: third_derivatives\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to indicate if third derivatives are needed\n    - name: type\n      required: No\n      default: !!str MathFreeEnergy\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/MixedSwitchingFunctionMaterial\n    description: |\n      Helper material to provide h(eta) and its derivative in one of two polynomial forms. MIX234 and MIX246\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: eta\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Order parameter variable\n    - name: function_name\n      required: No\n      default: !!str h\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        actual name for f(eta), i.e. \'h\' or \'g\'\n    - name: h_order\n      required: No\n      default: !!str MIX234\n      cpp_type: MooseEnum\n      group_name: \n      options: MIX234 MIX246\n      description: |\n        Polynomial order of the switching function h(eta)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MixedSwitchingFunctionMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: weight\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Weight parameter for MIX type h(eta)\n    subblocks:\n  - name: /Materials/MultiBarrierFunctionMaterial\n    description: |\n      Double well phase transformation barrier free energy contribution.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: etas\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        eta_i order parameters, one for each h\n    - name: function_name\n      required: No\n      default: !!str g\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        actual name for g(eta_i)\n    - name: g_order\n      required: No\n      default: !!str SIMPLE\n      cpp_type: MooseEnum\n      group_name: \n      options: SIMPLE\n      description: |\n        Polynomial order of the switching function h(eta)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MultiBarrierFunctionMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: well_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Make the g zero in [0:1] so it only contributes to enforcing the eta range and not to the phase transformation berrier.\n    subblocks:\n  - name: /Materials/MultiPhaseStressMaterial\n    description: |\n      Compute a global stress form multiple phase stresses\n    parameters:\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name for the computed global stress (optional)\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: h\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Switching Function Materials that provide h(eta_i)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: phase_base\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Base names for the Phase strains\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MultiPhaseStressMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/PFCRFFMaterial\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: num_L\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        specifies the number of complex L variables will be solved for\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PFCRFFMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/PFCTradMaterial\n    description: |\n      Polynomial coefficients for a phase field crystal correlation function\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: order\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: FOURTH EIGHTH\n      description: |\n        This is the order of the polynomial used for correlation function\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PFCTradMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/PFFracBulkRateMaterial\n    description: |\n      Material properties used in phase-field fracture damage evolution kernel\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: function\n      required: No\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Function describing energy release rate type parameter distribution\n    - name: gc\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Energy release rate type parameter\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PFFracBulkRateMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/PFParamsPolyFreeEnergy\n    description: |\n      Phase field parameters for polynomial free energy for single component systems\n    parameters:\n    - name: D0\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Diffusivity prefactor for vacancies in m^2/s\n    - name: Ef\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Formation energy in eV\n    - name: Em\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Migration energy in eV\n    - name: T\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Temperature variable in Kelvin\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Concentration\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: int_width\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The interfacial width of void surface in the lengthscale of the problem\n    - name: length_scale\n      required: No\n      default: !!str 1e-09\n      cpp_type: double\n      group_name: \n      description: |\n        defines the base length scale of the problem in m\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: polynomial_order\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: 4 6 8\n      description: |\n        Order of polynomial free energy\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: surface_energy\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Surface energy in J/m2\n    - name: time_scale\n      required: No\n      default: !!str 1e-09\n      cpp_type: double\n      group_name: \n      description: |\n        defines the base time scale of the problem\n    - name: type\n      required: No\n      default: !!str PFParamsPolyFreeEnergy\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/ParsedMaterial\n    description: |\n      Parsed Function Material.\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Arguments of F() - use vector coupling\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_expressions\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector of values for the constants in constant_names (can be an FParser expression)\n    - name: constant_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector of constants used in the parsed function (use this for kB etc.)\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: disable_fpoptimizer\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Disable the function parser algebraic optimizer\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: enable_ad_cache\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable cacheing of function derivatives for faster startup time\n    - name: enable_auto_optimize\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable automatic immediate optimization of derivatives\n    - name: enable_jit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable just-in-time compilation of function expressions for faster evaluation\n    - name: f_name\n      required: No\n      default: !!str F\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name of the free energy function (used to name the material properties)\n    - name: fail_on_evalerror\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        FParser function expression for the phase free energy\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: material_property_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector of material properties used in the parsed function\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: tol_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector of variable names to be protected from being 0 or 1 within a tolerance (needed for log(c) and log(1-c) terms)\n    - name: tol_values\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Vector of tolerance values for the variables in tol_names\n    - name: type\n      required: No\n      default: !!str ParsedMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/PhaseNormalTensor\n    description: |\n      Calculate normal tensor of a phase based on gradient\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: normal_tensor_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of normal tensor\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: phase\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Phase variable\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PhaseNormalTensor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/PiecewiseLinearInterpolationMaterial\n    description: |\n      Compute a property using a piecewise linear interpolation to define its dependence on a variable\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The name of the property this material will compute\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Scale factor to be applied to the ordinate values\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PiecewiseLinearInterpolationMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable whose value is used as the abscissa in the interpolation\n    - name: x\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The abscissa values\n    - name: xy_data\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        All function data, supplied in abscissa, ordinate pairs\n    - name: y\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The ordinate values\n    subblocks:\n  - name: /Materials/PolynomialFreeEnergy\n    description: |\n      Polynomial free energy for single component systems\n    parameters:\n    - name: W_name\n      required: No\n      default: !!str barr_height\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of the material property storing the barrier height\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Concentration\n    - name: c_eq_name\n      required: No\n      default: !!str c_eq\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of material property storing the equilibrium concentration\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: derivative_order\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum order of derivatives taken\n    - name: disable_fpoptimizer\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Disable the function parser algebraic optimizer\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: enable_ad_cache\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable cacheing of function derivatives for faster startup time\n    - name: enable_auto_optimize\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable automatic immediate optimization of derivatives\n    - name: enable_jit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable just-in-time compilation of function expressions for faster evaluation\n    - name: f_name\n      required: No\n      default: !!str F\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name of the free energy function (used to name the material properties)\n    - name: fail_on_evalerror\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: polynomial_order\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: 4 6 8\n      description: |\n        Order of polynomial free energy\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: third_derivatives\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to indicate if third derivatives are needed\n    - name: type\n      required: No\n      default: !!str PolynomialFreeEnergy\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/PowerLawCreepStressUpdate\n    description: |\n      This class uses the discrete material in a radial return isotropic power law creep model.  This class can be used in conjunction with other creep and plasticity materials for more complex simulations.\n    parameters:\n    - name: absolute_tolerance\n      required: No\n      default: !!str 1e-11\n      cpp_type: double\n      group_name: \n      description: |\n        Absolute convergence tolerance for Newton iteration\n    - name: acceptable_multiplier\n      required: No\n      default: !!str 10\n      cpp_type: double\n      group_name: \n      description: |\n        Factor applied to relative and absolute tolerance for acceptable convergence if iterations are no longer making progress\n    - name: activation_energy\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Activation energy\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: coefficient\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Leading coefficent in power-law equation\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: creep_prepend\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        String that is prepended to the creep_strain Material Property\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: gas_constant\n      required: No\n      default: !!str 8.3143\n      cpp_type: double\n      group_name: \n      description: |\n        Universal gas constant\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: legacy_return_mapping\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Perform iterations and compute residual the same way as the previous algorithm. Also use same old defaults for relative_tolerance, absolute_tolerance, and max_its.\n    - name: m_exponent\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Exponent on time in power-law equation\n    - name: max_inelastic_increment\n      required: No\n      default: !!str 0.0001\n      cpp_type: double\n      group_name: \n      description: |\n        The maximum inelastic strain increment allowed in a time step\n    - name: max_its\n      required: No\n      default: !!str 30\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of Newton iterations\n    - name: n_exponent\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Exponent on effective stress in power-law equation\n    - name: output_iteration_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set true to output Newton iteration information\n    - name: output_iteration_info_on_error\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set true to output Newton iteration information when those iterations fail\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: relative_tolerance\n      required: No\n      default: !!str 1e-08\n      cpp_type: double\n      group_name: \n      description: |\n        Relative convergence tolerance for Newton iteration\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: start_time\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Start time (if not zero)\n    - name: temperature\n      required: No\n      default: !!str 0\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled temperature\n    - name: type\n      required: No\n      default: !!str PowerLawCreepStressUpdate\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/RegularSolutionFreeEnergy\n    description: |\n      Material that implements the free energy of a regular solution\n    parameters:\n    - name: T\n      required: No\n      default: !!str 300\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Temperature variable\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Concentration variable\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: derivative_order\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum order of derivatives taken\n    - name: disable_fpoptimizer\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Disable the function parser algebraic optimizer\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: enable_ad_cache\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable cacheing of function derivatives for faster startup time\n    - name: enable_auto_optimize\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable automatic immediate optimization of derivatives\n    - name: enable_jit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable just-in-time compilation of function expressions for faster evaluation\n    - name: f_name\n      required: No\n      default: !!str F\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name of the free energy function (used to name the material properties)\n    - name: fail_on_evalerror\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: kB\n      required: No\n      default: !!str 8.61733e-05\n      cpp_type: double\n      group_name: \n      description: |\n        Boltzmann constant\n    - name: log_tol\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        If specified logarithms are evaluated using a Taylor expansion below this value\n    - name: omega\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        Regular solution parameter\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: third_derivatives\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to indicate if third derivatives are needed\n    - name: type\n      required: No\n      default: !!str RegularSolutionFreeEnergy\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/StrainGradDispDerivatives\n    description: |\n      Provide the constant derivatives of strain w.r.t. the displacement gradient components.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: displacement_gradients\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        List of displacement gradient component variables\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str StrainGradDispDerivatives\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/StressBasedChemicalPotential\n    description: |\n      Chemical potential from stress\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Concentration variable\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction_tensor_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of direction tensor variable\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: prefactor_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of prefactor variable\n    - name: property_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of stress based chemical potential\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: stress_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of stress property variable\n    - name: type\n      required: No\n      default: !!str StressBasedChemicalPotential\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/SumTensorIncrements\n    description: |\n      Compute tensor property by summing tensor increments\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: coupled_tensor_increment_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        Name of strain increment properties\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: tensor_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of strain property\n    - name: type\n      required: No\n      default: !!str SumTensorIncrements\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/SwitchingFunction3PhaseMaterial\n    description: |\n      Material for switching function that prevents formation of a third phase at a two-phase interface: h_i = eta_i^2/4 * [15 (1-eta_i) [1 + eta_i - (eta_k - eta_j)^2] + eta_i * (9eta_i^2 - 5)]\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: derivative_order\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum order of derivatives taken\n    - name: disable_fpoptimizer\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Disable the function parser algebraic optimizer\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: enable_ad_cache\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable cacheing of function derivatives for faster startup time\n    - name: enable_auto_optimize\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable automatic immediate optimization of derivatives\n    - name: enable_jit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable just-in-time compilation of function expressions for faster evaluation\n    - name: eta_i\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Order parameter i\n    - name: eta_j\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Order parameter j\n    - name: eta_k\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Order parameter k\n    - name: f_name\n      required: No\n      default: !!str F\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name of the free energy function (used to name the material properties)\n    - name: fail_on_evalerror\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: third_derivatives\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to indicate if third derivatives are needed\n    - name: type\n      required: No\n      default: !!str SwitchingFunction3PhaseMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/SwitchingFunctionMaterial\n    description: |\n      Helper material to provide h(eta) and its derivative in one of two polynomial forms.\\nSIMPLE: 3*eta^2-2*eta^3\\nHIGH: eta^3*(6*eta^2-15*eta+10)\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: eta\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Order parameter variable\n    - name: function_name\n      required: No\n      default: !!str h\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        actual name for f(eta), i.e. \'h\' or \'g\'\n    - name: h_order\n      required: No\n      default: !!str SIMPLE\n      cpp_type: MooseEnum\n      group_name: \n      options: SIMPLE HIGH\n      description: |\n        Polynomial order of the switching function h(eta)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SwitchingFunctionMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/SwitchingFunctionMultiPhaseMaterial\n    description: |\n      Calculates the switching function for a given phase for a multi-phase, multi-order parameter model\n    parameters:\n    - name: all_etas\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of all order parameters for all phases\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: h_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of the switching function material property for the given phase\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: phase_etas\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Vector of order parameters for the given phase\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SwitchingFunctionMultiPhaseMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/TemperatureDependentHardeningStressUpdate\n    description: |\n      This class uses the discrete material in a radial return isotropic plasticity model.  This class is one of the basic radial return constitutive models, yet it can be used in conjunction with other creep and plasticity materials for more complex simulations.\n    parameters:\n    - name: absolute_tolerance\n      required: No\n      default: !!str 1e-11\n      cpp_type: double\n      group_name: \n      description: |\n        Absolute convergence tolerance for Newton iteration\n    - name: acceptable_multiplier\n      required: No\n      default: !!str 10\n      cpp_type: double\n      group_name: \n      description: |\n        Factor applied to relative and absolute tolerance for acceptable convergence if iterations are no longer making progress\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: hardening_functions\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        List of functions of true stress as function of plastic strain at different temperatures\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: legacy_return_mapping\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Perform iterations and compute residual the same way as the previous algorithm. Also use same old defaults for relative_tolerance, absolute_tolerance, and max_its.\n    - name: max_inelastic_increment\n      required: No\n      default: !!str 0.0001\n      cpp_type: double\n      group_name: \n      description: |\n        The maximum inelastic strain increment allowed in a time step\n    - name: max_its\n      required: No\n      default: !!str 30\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of Newton iterations\n    - name: output_iteration_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set true to output Newton iteration information\n    - name: output_iteration_info_on_error\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set true to output Newton iteration information when those iterations fail\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: plastic_prepend\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        String that is prepended to the plastic_strain Material Property\n    - name: relative_tolerance\n      required: No\n      default: !!str 1e-08\n      cpp_type: double\n      group_name: \n      description: |\n        Relative convergence tolerance for Newton iteration\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: temperature\n      required: No\n      default: !!str 0\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled Temperature\n    - name: temperatures\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        List of temperatures corresponding to the functions listed in \'hardening_functions\'\n    - name: type\n      required: No\n      default: !!str TemperatureDependentHardeningStressUpdate\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/TensileStressUpdate\n    description: |\n      Associative, smoothed, tensile (Rankine) plasticity with hardening/softening\n    parameters:\n    - name: admissible_stress\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        A single admissible value of the value of the stress parameters for internal parameters = 0.  This is used to initialize the return-mapping algorithm during the first nonlinear iteration.  If not given then it is assumed that stress parameters = 0 is admissible.\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Optional parameter that allows the user to define multiple plastic models on the same block, and the plastic_internal_parameter, plastic_yield_function, plastic_NR_iterations and plastic_linesearch_needed Material Properties will be prepended by this string\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: max_NR_iterations\n      required: No\n      default: !!str 20\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of Newton-Raphson iterations allowed during the return-map algorithm\n    - name: min_step_size\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        In order to help the Newton-Raphson procedure, the applied strain increment may be applied in sub-increments of size greater than this value.  Usually it is better for Moose\'s nonlinear convergence to increase max_NR_iterations rather than decrease this parameter.\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: perfect_guess\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Provide a guess to the Newton-Raphson proceedure that is the result from perfect plasticity.  With severe hardening/softening this may be suboptimal.\n    - name: perform_finite_strain_rotations\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Tensors are correctly rotated in finite-strain simulations.  For optimal performance you can set this to \'false\' if you are only ever using small strains\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: smoothing_tol\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Intersections of the yield surfaces will be smoothed by this amount (this is measured in units of stress).  Often this is related to other physical parameters (eg, 0.1*cohesion) but it is important to set this small enough so that the individual yield surfaces do not mix together in the smoothing process to produce a result where no stress is admissible (for example, mixing together tensile and compressive failure envelopes).\n    - name: tensile_strength\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the tensile strength\n    - name: type\n      required: No\n      default: !!str TensileStressUpdate\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: warn_about_precision_loss\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Output a message to the console every time precision-loss is encountered during the Newton-Raphson process\n    - name: yield_function_tol\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The return-map process will be deemed to have converged if all yield functions are within yield_function_tol of zero.  If this is set very low then precision-loss might be encountered: if the code detects precision loss then it also deems the return-map process has converged.\n    subblocks:\n  - name: /Materials/ThermalFractureIntegral\n    description: |\n      Calculates summation of the derivative of the eigenstrains with respect to temparture.\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: eigenstrain_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n      group_name: \n      description: |\n        List of eigenstrains to be applied in this strain calculation\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: temperature\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled temperature\n    - name: type\n      required: No\n      default: !!str ThermalFractureIntegral\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/ThirdPhaseSuppressionMaterial\n    description: |\n      Free Energy contribution that penalizes more than two order parameters being non-zero\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: etas\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        eta_i order parameters, one for each h\n    - name: function_name\n      required: No\n      default: !!str g\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        actual name for g(eta_i)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ThirdPhaseSuppressionMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/TimeStepMaterial\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: prop_dt\n      required: No\n      default: !!str dt\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Material property to store the current dt\n    - name: prop_time\n      required: No\n      default: !!str time\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Material property to store the current time\n    - name: prop_time_step\n      required: No\n      default: !!str time_step\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Material property to store the current time step number\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str TimeStepMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/TwoPhaseStressMaterial\n    description: |\n      Compute a global stress in a two phase model\n    parameters:\n    - name: base_A\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name for the Phase A strain.\n    - name: base_B\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name for the Phase B strain.\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name for the computed global stress (optional).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: h\n      required: No\n      default: !!str h\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Switching Function Material that provides h(eta)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str TwoPhaseStressMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/VanDerWaalsFreeEnergy\n    description: |\n      Free energy of a Van der Waals gas.\n    parameters:\n    - name: T\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Temperature\n    - name: a\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Van der Waals coeefficient a (default mass_unit_conversion requires this to be in [eV*Ang^3])\n    - name: b\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Van der Waals molecular exclusion volume b (default mass_unit_conversion requires this to be in [Ang^3])\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Concentration variable\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: derivative_order\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum order of derivatives taken\n    - name: disable_fpoptimizer\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Disable the function parser algebraic optimizer\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: enable_ad_cache\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable cacheing of function derivatives for faster startup time\n    - name: enable_auto_optimize\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable automatic immediate optimization of derivatives\n    - name: enable_jit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable just-in-time compilation of function expressions for faster evaluation\n    - name: f_name\n      required: No\n      default: !!str F\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name of the free energy function (used to name the material properties)\n    - name: fail_on_evalerror\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n    - name: h\n      required: No\n      default: !!str 4.13567e-15\n      cpp_type: double\n      group_name: \'Units\'\n      description: |\n        Planck constant - units need to be consistent with the units of omega (default in [eV*s])\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: kB\n      required: No\n      default: !!str 8.61733e-05\n      cpp_type: double\n      group_name: \'Units\'\n      description: |\n        Boltzmann constant (default in [eV/K])\n    - name: log_tol\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        The logarithm in the free energy is evaluated using a Taylor expansion below this value. This allows formulating free energies for systems where the molecular volume is smaller than the exclusion volume b.\n    - name: m\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Gas atom mass (the default mass_unit_conversion requires this to be in [u])\n    - name: mass_unit_conversion\n      required: No\n      default: !!str 1.03643e-28\n      cpp_type: double\n      group_name: \'Units\'\n      description: |\n        Conversion factor to get the gas atom mass in [eV*s^2/Ang^2] (defaults to [eV*s^2/(Ang^2*u)])\n    - name: omega\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Lattice site volume (default mass_unit_conversion requires this to be in [Ang^3])\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: third_derivatives\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Flag to indicate if third derivatives are needed\n    - name: type\n      required: No\n      default: !!str VanDerWaalsFreeEnergy\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/VariableGradientMaterial\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: prop\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Material property to store the gradient magnitude in\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str VariableGradientMaterial\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variable to compute the gradient magnitude of\n    subblocks:\n  - name: /Materials/VolumeDeformGradCorrectedStress\n    description: |\n      Transforms stress with volumetric term from previous configuration to this configuration\n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: compute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n    - name: constant_on\n      required: No\n      default: !!str NONE\n      cpp_type: MooseEnum\n      group_name: \'Advanced\'\n      options: NONE ELEMENT SUBDOMAIN\n      description: |\n        When ELEMENT, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.When SUBDOMAIN, MOOSE will only call computeSubdomainProperties() for the 0th quadrature point, and then copy that value to the other qps. Evaluations on element qps will be skipped\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: deform_grad_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of deformation gradient variable\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: jacobian_name\n      required: No\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of jacobian variable\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Outputs\'\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Outputs\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: pre_jacobian_name\n      required: No\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of jacobian variable from previous config.\n    - name: pre_stress_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of stress variable from previous config.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: stress_name\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Name of stress variable\n    - name: type\n      required: No\n      default: !!str VolumeDeformGradCorrectedStress\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n- name: /Mesh\n  description: |\n    \n  parameters:\n  - name: displacements\n    required: No\n    default: !!str \n    cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n    group_name: \n    description: |\n      The variables corresponding to the x y z displacements of the mesh.  If this is provided then the displacements will be taken into account during the computation.\n  - name: inactive\n    required: No\n    default: !!str \n    cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n    group_name: \n    description: |\n      If specified blocks matching these identifiers will be skipped.\n  - name: block_id\n    required: No\n    default: !!str \n    cpp_type: std::vector<unsigned short, std::allocator<unsigned short> >\n    group_name: \'Add Names\'\n    description: |\n      IDs of the block id/name pairs\n  - name: block_name\n    required: No\n    default: !!str \n    cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n    group_name: \'Add Names\'\n    description: |\n      Names of the block id/name pairs (must correspond with "block_id"\n  - name: boundary_id\n    required: No\n    default: !!str \n    cpp_type: std::vector<short, std::allocator<short> >\n    group_name: \'Add Names\'\n    description: |\n      IDs of the boundary id/name pairs\n  - name: boundary_name\n    required: No\n    default: !!str \n    cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n    group_name: \'Add Names\'\n    description: |\n      Names of the boundary id/name pairs (must correspond with "boundary_id"\n  - name: construct_side_list_from_node_list\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \'Advanced\'\n    description: |\n      If true, construct side lists from the nodesets in the mesh (i.e. if every node on a give side is in a nodeset then add that side to a sideset\n  - name: ghosted_boundaries\n    required: No\n    default: !!str \n    cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n    group_name: \'Advanced\'\n    description: |\n      Boundaries to be ghosted if using Nemesis\n  - name: ghosted_boundaries_inflation\n    required: No\n    default: !!str \n    cpp_type: std::vector<double, std::allocator<double> >\n    group_name: \'Advanced\'\n    description: |\n      If you are using ghosted boundaries you will want to set this value to a vector of amounts to inflate the bounding boxes by.  ie if you are running a 3D problem you might set it to \'0.2 0.1 0.4\'\n  - name: isObjectAction\n    required: No\n    default: !!str 1\n    cpp_type: bool\n    group_name: \n    description: |\n      Indicates that this is a MooseObjectAction.\n  - name: second_order\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \'Advanced\'\n    description: |\n      Converts a first order mesh to a second order mesh.  Note: This is NOT needed if you are reading an actual first order mesh.\n  - name: skip_partitioning\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \'Advanced\'\n    description: |\n      If true the mesh won\'t be partitioned. This may cause large load imbalanced but is currently required if you have a simulation containing uniform refinement, adaptivity and stateful material properties\n  - name: type\n    required: Yes\n    default: !!str FileMesh\n    cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n    group_name: \n    description: |\n      A string representing the Moose Object that will be built by this Action\n  - name: uniform_refine\n    required: No\n    default: !!str 0\n    cpp_type: unsigned int\n    group_name: \n    description: |\n      Specify the level of uniform refinement applied to the initial mesh\n  subblocks:\n  - name: /Mesh/<type>\n    description: |\n      \n    parameters:\n    subblocks:\n    - name: /Mesh/<type>/AnnularMesh\n      description: |\n        For rmin>0: creates an annular mesh of QUAD4 elements.  For rmin=0: creates a disc mesh of QUAD4 and TRI3 elements.  Boundary sidesets are created at rmax and rmin, and given these names.  If tmin!=0 and tmax!=2Pi, a sector of an annulus or disc is created.  In this case boundary sidesets are also created a tmin and tmax, and given these names\n      parameters:\n      - name: allow_renumbering\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          If allow_renumbering=false, node and element numbers are kept fixed until deletion\n      - name: centroid_partitioner_direction\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \'Partitioning\'\n        options: x y z radial\n        description: |\n          Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n      - name: construct_node_list_from_side_list\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Whether or not to generate nodesets from the sidesets (usually a good idea).\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \'Advanced\'\n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: dim\n        required: No\n        default: !!str 1\n        cpp_type: MooseEnum\n        group_name: \'Advanced\'\n        options: 1 2 3\n        description: |\n          This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected. In particular you must supply this for GMSH meshes. Note: This is completely ignored for ExodusII meshes!\n      - name: distribution\n        required: No\n        default: !!str DEFAULT\n        cpp_type: MooseEnum\n        group_name: \n        options: PARALLEL SERIAL DEFAULT\n        description: |\n          PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n      - name: enable\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Set the enabled status of the MooseObject.\n      - name: ghost_point_neighbors\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n      - name: growth_r\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          The ratio of radial sizes of successive rings of elements\n      - name: nemesis\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n      - name: nr\n        required: No\n        default: !!str 1\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Number of elements in the radial direction\n      - name: nt\n        required: Yes\n        default: !!str \n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Number of elements in the angular direction\n      - name: num_ghosted_layers\n        required: No\n        default: !!str 1\n        cpp_type: unsigned short\n        group_name: \'Advanced\'\n        description: |\n          Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n      - name: parallel_type\n        required: No\n        default: !!str DEFAULT\n        cpp_type: MooseEnum\n        group_name: \n        options: DISTRIBUTED REPLICATED DEFAULT\n        description: |\n          DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n      - name: partitioner\n        required: No\n        default: !!str default\n        cpp_type: MooseEnum\n        group_name: \'Partitioning\'\n        options: default metis parmetis linear centroid hilbert_sfc morton_sfc\n        description: |\n          Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n      - name: patch_size\n        required: No\n        default: !!str 40\n        cpp_type: unsigned int\n        group_name: \'Advanced\'\n        description: |\n          The number of nodes to consider in the NearestNode neighborhood.\n      - name: patch_update_strategy\n        required: No\n        default: !!str never\n        cpp_type: MooseEnum\n        group_name: \'Advanced\'\n        options: never always auto\n        description: |\n          How often to update the geometric search \'patch\'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  \'always\' will update the patch every timestep which might be time consuming.  \'auto\' will attempt to determine when the patch size needs to be updated automatically.\n      - name: quad_subdomain_id\n        required: No\n        default: !!str 0\n        cpp_type: unsigned short\n        group_name: \n        description: |\n          The subdomain ID given to the QUAD4 elements\n      - name: rmax\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          Outer radius\n      - name: rmin\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          Inner radius.  If rmin=0 then a disc mesh (with no central hole) will be created.\n      - name: tmax\n        required: No\n        default: !!str 6.28319\n        cpp_type: double\n        group_name: \n        description: |\n          Maximum angle, measured anticlockwise from x axis.  If tmin=0 and tmax=2Pi an annular mesh is created.  Otherwise, only a sector of an annulus is created\n      - name: tmin\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          Minimum angle, measured anticlockwise from x axis\n      - name: tri_subdomain_id\n        required: No\n        default: !!str 1\n        cpp_type: unsigned short\n        group_name: \n        description: |\n          The subdomain ID given to the TRI3 elements (these exist only if rmin=0, and they exist at the center of the disc\n      - name: type\n        required: No\n        default: !!str AnnularMesh\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      subblocks:\n    - name: /Mesh/<type>/EBSDMesh\n      description: |\n        Mesh generated from a specified DREAM.3D EBSD data file.\n      parameters:\n      - name: allow_renumbering\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          If allow_renumbering=false, node and element numbers are kept fixed until deletion\n      - name: bias_x\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          The amount by which to grow (or shrink) the cells in the x-direction.\n      - name: bias_y\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          The amount by which to grow (or shrink) the cells in the y-direction.\n      - name: bias_z\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          The amount by which to grow (or shrink) the cells in the z-direction.\n      - name: centroid_partitioner_direction\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \'Partitioning\'\n        options: x y z radial\n        description: |\n          Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n      - name: construct_node_list_from_side_list\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Whether or not to generate nodesets from the sidesets (usually a good idea).\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \'Advanced\'\n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: distribution\n        required: No\n        default: !!str DEFAULT\n        cpp_type: MooseEnum\n        group_name: \n        options: PARALLEL SERIAL DEFAULT\n        description: |\n          PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n      - name: elem_type\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: EDGE EDGE2 EDGE3 EDGE4 QUAD QUAD4 QUAD8 QUAD9 TRI3 TRI6 HEX HEX8 HEX20 HEX27 TET4 TET10 PRISM6 PRISM15 PRISM18 PYRAMID5 PYRAMID13 PYRAMID14\n        description: |\n          The type of element from libMesh to generate (default: linear element for requested dimension)\n      - name: enable\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Set the enabled status of the MooseObject.\n      - name: filename\n        required: Yes\n        default: !!str \n        cpp_type: FileName\n        group_name: \n        description: |\n          The name of the file containing the EBSD data\n      - name: gauss_lobatto_grid\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          Grade mesh into boundaries according to Gauss-Lobatto quadrature spacing.\n      - name: ghost_point_neighbors\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n      - name: nemesis\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n      - name: num_ghosted_layers\n        required: No\n        default: !!str 1\n        cpp_type: unsigned short\n        group_name: \'Advanced\'\n        description: |\n          Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n      - name: parallel_type\n        required: No\n        default: !!str DEFAULT\n        cpp_type: MooseEnum\n        group_name: \n        options: DISTRIBUTED REPLICATED DEFAULT\n        description: |\n          DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n      - name: partitioner\n        required: No\n        default: !!str default\n        cpp_type: MooseEnum\n        group_name: \'Partitioning\'\n        options: default metis parmetis linear centroid hilbert_sfc morton_sfc\n        description: |\n          Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n      - name: patch_size\n        required: No\n        default: !!str 40\n        cpp_type: unsigned int\n        group_name: \'Advanced\'\n        description: |\n          The number of nodes to consider in the NearestNode neighborhood.\n      - name: patch_update_strategy\n        required: No\n        default: !!str never\n        cpp_type: MooseEnum\n        group_name: \'Advanced\'\n        options: never always auto\n        description: |\n          How often to update the geometric search \'patch\'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  \'always\' will update the patch every timestep which might be time consuming.  \'auto\' will attempt to determine when the patch size needs to be updated automatically.\n      - name: type\n        required: No\n        default: !!str EBSDMesh\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: uniform_refine\n        required: No\n        default: !!str 0\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Number of coarsening levels available in adaptive mesh refinement.\n      subblocks:\n    - name: /Mesh/<type>/FileMesh\n      description: |\n        Read a mesh from a file.\n      parameters:\n      - name: allow_renumbering\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          If allow_renumbering=false, node and element numbers are kept fixed until deletion\n      - name: centroid_partitioner_direction\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \'Partitioning\'\n        options: x y z radial\n        description: |\n          Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n      - name: construct_node_list_from_side_list\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Whether or not to generate nodesets from the sidesets (usually a good idea).\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \'Advanced\'\n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: dim\n        required: No\n        default: !!str 1\n        cpp_type: MooseEnum\n        group_name: \'Advanced\'\n        options: 1 2 3\n        description: |\n          This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected. In particular you must supply this for GMSH meshes. Note: This is completely ignored for ExodusII meshes!\n      - name: distribution\n        required: No\n        default: !!str DEFAULT\n        cpp_type: MooseEnum\n        group_name: \n        options: PARALLEL SERIAL DEFAULT\n        description: |\n          PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n      - name: enable\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Set the enabled status of the MooseObject.\n      - name: file\n        required: Yes\n        default: !!str \n        cpp_type: MeshFileName\n        group_name: \n        description: |\n          The name of the mesh file to read\n      - name: ghost_point_neighbors\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n      - name: nemesis\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n      - name: num_ghosted_layers\n        required: No\n        default: !!str 1\n        cpp_type: unsigned short\n        group_name: \'Advanced\'\n        description: |\n          Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n      - name: parallel_type\n        required: No\n        default: !!str DEFAULT\n        cpp_type: MooseEnum\n        group_name: \n        options: DISTRIBUTED REPLICATED DEFAULT\n        description: |\n          DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n      - name: partitioner\n        required: No\n        default: !!str default\n        cpp_type: MooseEnum\n        group_name: \'Partitioning\'\n        options: default metis parmetis linear centroid hilbert_sfc morton_sfc\n        description: |\n          Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n      - name: patch_size\n        required: No\n        default: !!str 40\n        cpp_type: unsigned int\n        group_name: \'Advanced\'\n        description: |\n          The number of nodes to consider in the NearestNode neighborhood.\n      - name: patch_update_strategy\n        required: No\n        default: !!str never\n        cpp_type: MooseEnum\n        group_name: \'Advanced\'\n        options: never always auto\n        description: |\n          How often to update the geometric search \'patch\'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  \'always\' will update the patch every timestep which might be time consuming.  \'auto\' will attempt to determine when the patch size needs to be updated automatically.\n      - name: type\n        required: No\n        default: !!str FileMesh\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      subblocks:\n    - name: /Mesh/<type>/GeneratedMesh\n      description: |\n        Create a line, square, or cube mesh with uniformly spaced or biased elements.\n      parameters:\n      - name: allow_renumbering\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          If allow_renumbering=false, node and element numbers are kept fixed until deletion\n      - name: bias_x\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          The amount by which to grow (or shrink) the cells in the x-direction.\n      - name: bias_y\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          The amount by which to grow (or shrink) the cells in the y-direction.\n      - name: bias_z\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          The amount by which to grow (or shrink) the cells in the z-direction.\n      - name: centroid_partitioner_direction\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \'Partitioning\'\n        options: x y z radial\n        description: |\n          Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n      - name: construct_node_list_from_side_list\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Whether or not to generate nodesets from the sidesets (usually a good idea).\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \'Advanced\'\n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: dim\n        required: Yes\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \'Main\'\n        options: 1 2 3\n        description: |\n          The dimension of the mesh to be generated\n      - name: distribution\n        required: No\n        default: !!str DEFAULT\n        cpp_type: MooseEnum\n        group_name: \n        options: PARALLEL SERIAL DEFAULT\n        description: |\n          PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n      - name: elem_type\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: EDGE EDGE2 EDGE3 EDGE4 QUAD QUAD4 QUAD8 QUAD9 TRI3 TRI6 HEX HEX8 HEX20 HEX27 TET4 TET10 PRISM6 PRISM15 PRISM18 PYRAMID5 PYRAMID13 PYRAMID14\n        description: |\n          The type of element from libMesh to generate (default: linear element for requested dimension)\n      - name: enable\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Set the enabled status of the MooseObject.\n      - name: gauss_lobatto_grid\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          Grade mesh into boundaries according to Gauss-Lobatto quadrature spacing.\n      - name: ghost_point_neighbors\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n      - name: nemesis\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n      - name: num_ghosted_layers\n        required: No\n        default: !!str 1\n        cpp_type: unsigned short\n        group_name: \'Advanced\'\n        description: |\n          Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n      - name: nx\n        required: No\n        default: !!str 1\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Number of elements in the X direction\n      - name: ny\n        required: No\n        default: !!str 1\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Number of elements in the Y direction\n      - name: nz\n        required: No\n        default: !!str 1\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Number of elements in the Z direction\n      - name: parallel_type\n        required: No\n        default: !!str DEFAULT\n        cpp_type: MooseEnum\n        group_name: \n        options: DISTRIBUTED REPLICATED DEFAULT\n        description: |\n          DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n      - name: partitioner\n        required: No\n        default: !!str default\n        cpp_type: MooseEnum\n        group_name: \'Partitioning\'\n        options: default metis parmetis linear centroid hilbert_sfc morton_sfc\n        description: |\n          Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n      - name: patch_size\n        required: No\n        default: !!str 40\n        cpp_type: unsigned int\n        group_name: \'Advanced\'\n        description: |\n          The number of nodes to consider in the NearestNode neighborhood.\n      - name: patch_update_strategy\n        required: No\n        default: !!str never\n        cpp_type: MooseEnum\n        group_name: \'Advanced\'\n        options: never always auto\n        description: |\n          How often to update the geometric search \'patch\'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  \'always\' will update the patch every timestep which might be time consuming.  \'auto\' will attempt to determine when the patch size needs to be updated automatically.\n      - name: type\n        required: No\n        default: !!str GeneratedMesh\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: xmax\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          Upper X Coordinate of the generated mesh\n      - name: xmin\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          Lower X Coordinate of the generated mesh\n      - name: ymax\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          Upper Y Coordinate of the generated mesh\n      - name: ymin\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          Lower Y Coordinate of the generated mesh\n      - name: zmax\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          Upper Z Coordinate of the generated mesh\n      - name: zmin\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          Lower Z Coordinate of the generated mesh\n      subblocks:\n    - name: /Mesh/<type>/ImageMesh\n      description: |\n        Generated mesh with the aspect ratio of a given image stack.\n      parameters:\n      - name: allow_renumbering\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          If allow_renumbering=false, node and element numbers are kept fixed until deletion\n      - name: bias_x\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          The amount by which to grow (or shrink) the cells in the x-direction.\n      - name: bias_y\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          The amount by which to grow (or shrink) the cells in the y-direction.\n      - name: bias_z\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          The amount by which to grow (or shrink) the cells in the z-direction.\n      - name: cells_per_pixel\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          The number of mesh cells per pixel, must be <=1 \n      - name: centroid_partitioner_direction\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \'Partitioning\'\n        options: x y z radial\n        description: |\n          Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n      - name: construct_node_list_from_side_list\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Whether or not to generate nodesets from the sidesets (usually a good idea).\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \'Advanced\'\n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: dim\n        required: Yes\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \'Main\'\n        options: 1 2 3\n        description: |\n          The dimension of the mesh to be generated\n      - name: distribution\n        required: No\n        default: !!str DEFAULT\n        cpp_type: MooseEnum\n        group_name: \n        options: PARALLEL SERIAL DEFAULT\n        description: |\n          PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n      - name: elem_type\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: EDGE EDGE2 EDGE3 EDGE4 QUAD QUAD4 QUAD8 QUAD9 TRI3 TRI6 HEX HEX8 HEX20 HEX27 TET4 TET10 PRISM6 PRISM15 PRISM18 PYRAMID5 PYRAMID13 PYRAMID14\n        description: |\n          The type of element from libMesh to generate (default: linear element for requested dimension)\n      - name: enable\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Set the enabled status of the MooseObject.\n      - name: file\n        required: No\n        default: !!str \n        cpp_type: FileName\n        group_name: \n        description: |\n          Name of single image file to extract mesh parameters from.  If provided, a 2D mesh is created.\n      - name: file_base\n        required: No\n        default: !!str \n        cpp_type: FileNameNoExtension\n        group_name: \n        description: |\n          Image file base to open, use this option when a stack of images must be read (ignored if \'file\' is given)\n      - name: file_range\n        required: No\n        default: !!str \n        cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n        group_name: \n        description: |\n          Range of images to analyze, used with \'file_base\' (ignored if \'file\' is given)\n      - name: file_suffix\n        required: No\n        default: !!str \n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          Suffix of the file to open, e.g. \'png\'\n      - name: gauss_lobatto_grid\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          Grade mesh into boundaries according to Gauss-Lobatto quadrature spacing.\n      - name: ghost_point_neighbors\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n      - name: nemesis\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n      - name: num_ghosted_layers\n        required: No\n        default: !!str 1\n        cpp_type: unsigned short\n        group_name: \'Advanced\'\n        description: |\n          Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n      - name: nx\n        required: No\n        default: !!str 1\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Number of elements in the X direction\n      - name: ny\n        required: No\n        default: !!str 1\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Number of elements in the Y direction\n      - name: nz\n        required: No\n        default: !!str 1\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Number of elements in the Z direction\n      - name: parallel_type\n        required: No\n        default: !!str DEFAULT\n        cpp_type: MooseEnum\n        group_name: \n        options: DISTRIBUTED REPLICATED DEFAULT\n        description: |\n          DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n      - name: partitioner\n        required: No\n        default: !!str default\n        cpp_type: MooseEnum\n        group_name: \'Partitioning\'\n        options: default metis parmetis linear centroid hilbert_sfc morton_sfc\n        description: |\n          Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n      - name: patch_size\n        required: No\n        default: !!str 40\n        cpp_type: unsigned int\n        group_name: \'Advanced\'\n        description: |\n          The number of nodes to consider in the NearestNode neighborhood.\n      - name: patch_update_strategy\n        required: No\n        default: !!str never\n        cpp_type: MooseEnum\n        group_name: \'Advanced\'\n        options: never always auto\n        description: |\n          How often to update the geometric search \'patch\'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  \'always\' will update the patch every timestep which might be time consuming.  \'auto\' will attempt to determine when the patch size needs to be updated automatically.\n      - name: scale_to_one\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          Whether or not to scale the image so its max dimension is 1\n      - name: type\n        required: No\n        default: !!str ImageMesh\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: xmax\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          Upper X Coordinate of the generated mesh\n      - name: xmin\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          Lower X Coordinate of the generated mesh\n      - name: ymax\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          Upper Y Coordinate of the generated mesh\n      - name: ymin\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          Lower Y Coordinate of the generated mesh\n      - name: zmax\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          Upper Z Coordinate of the generated mesh\n      - name: zmin\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          Lower Z Coordinate of the generated mesh\n      subblocks:\n    - name: /Mesh/<type>/MortarPeriodicMesh\n      description: |\n        Set up an orthogonal mesh with additional dim-1 dimensional side domains for use with the Mortar method.\n      parameters:\n      - name: allow_renumbering\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          If allow_renumbering=false, node and element numbers are kept fixed until deletion\n      - name: bias_x\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          The amount by which to grow (or shrink) the cells in the x-direction.\n      - name: bias_y\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          The amount by which to grow (or shrink) the cells in the y-direction.\n      - name: bias_z\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          The amount by which to grow (or shrink) the cells in the z-direction.\n      - name: centroid_partitioner_direction\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \'Partitioning\'\n        options: x y z radial\n        description: |\n          Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n      - name: construct_node_list_from_side_list\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Whether or not to generate nodesets from the sidesets (usually a good idea).\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \'Advanced\'\n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: dim\n        required: Yes\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \'Main\'\n        options: 1 2 3\n        description: |\n          The dimension of the mesh to be generated\n      - name: distribution\n        required: No\n        default: !!str DEFAULT\n        cpp_type: MooseEnum\n        group_name: \n        options: PARALLEL SERIAL DEFAULT\n        description: |\n          PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n      - name: elem_type\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: EDGE EDGE2 EDGE3 EDGE4 QUAD QUAD4 QUAD8 QUAD9 TRI3 TRI6 HEX HEX8 HEX20 HEX27 TET4 TET10 PRISM6 PRISM15 PRISM18 PYRAMID5 PYRAMID13 PYRAMID14\n        description: |\n          The type of element from libMesh to generate (default: linear element for requested dimension)\n      - name: enable\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Set the enabled status of the MooseObject.\n      - name: gauss_lobatto_grid\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          Grade mesh into boundaries according to Gauss-Lobatto quadrature spacing.\n      - name: ghost_point_neighbors\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n      - name: nemesis\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n      - name: num_ghosted_layers\n        required: No\n        default: !!str 1\n        cpp_type: unsigned short\n        group_name: \'Advanced\'\n        description: |\n          Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n      - name: nx\n        required: No\n        default: !!str 1\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Number of elements in the X direction\n      - name: ny\n        required: No\n        default: !!str 1\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Number of elements in the Y direction\n      - name: nz\n        required: No\n        default: !!str 1\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Number of elements in the Z direction\n      - name: parallel_type\n        required: No\n        default: !!str DEFAULT\n        cpp_type: MooseEnum\n        group_name: \n        options: DISTRIBUTED REPLICATED DEFAULT\n        description: |\n          DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n      - name: partitioner\n        required: No\n        default: !!str default\n        cpp_type: MooseEnum\n        group_name: \'Partitioning\'\n        options: default metis parmetis linear centroid hilbert_sfc morton_sfc\n        description: |\n          Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n      - name: patch_size\n        required: No\n        default: !!str 40\n        cpp_type: unsigned int\n        group_name: \'Advanced\'\n        description: |\n          The number of nodes to consider in the NearestNode neighborhood.\n      - name: patch_update_strategy\n        required: No\n        default: !!str never\n        cpp_type: MooseEnum\n        group_name: \'Advanced\'\n        options: never always auto\n        description: |\n          How often to update the geometric search \'patch\'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  \'always\' will update the patch every timestep which might be time consuming.  \'auto\' will attempt to determine when the patch size needs to be updated automatically.\n      - name: periodic_directions\n        required: Yes\n        default: !!str \n        cpp_type: MultiMooseEnum\n        group_name: \n        options: x y z\n        description: |\n          Directions along which additional Mortar meshes are generated\n      - name: type\n        required: No\n        default: !!str MortarPeriodicMesh\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: xmax\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          Upper X Coordinate of the generated mesh\n      - name: xmin\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          Lower X Coordinate of the generated mesh\n      - name: ymax\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          Upper Y Coordinate of the generated mesh\n      - name: ymin\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          Lower Y Coordinate of the generated mesh\n      - name: zmax\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          Upper Z Coordinate of the generated mesh\n      - name: zmin\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          Lower Z Coordinate of the generated mesh\n      subblocks:\n    - name: /Mesh/<type>/PatternedMesh\n      description: |\n        Creates a 2D mesh from a specified set of unique \'tiles\' meshes and a two-dimensional pattern.\n      parameters:\n      - name: allow_renumbering\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          If allow_renumbering=false, node and element numbers are kept fixed until deletion\n      - name: bottom_boundary\n        required: No\n        default: !!str bottom_boundary\n        cpp_type: BoundaryName\n        group_name: \n        description: |\n          name of the bottom (y) boundary\n      - name: centroid_partitioner_direction\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \'Partitioning\'\n        options: x y z radial\n        description: |\n          Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n      - name: construct_node_list_from_side_list\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Whether or not to generate nodesets from the sidesets (usually a good idea).\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \'Advanced\'\n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: dim\n        required: No\n        default: !!str 1\n        cpp_type: MooseEnum\n        group_name: \'Advanced\'\n        options: 1 2 3\n        description: |\n          This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected. In particular you must supply this for GMSH meshes. Note: This is completely ignored for ExodusII meshes!\n      - name: distribution\n        required: No\n        default: !!str DEFAULT\n        cpp_type: MooseEnum\n        group_name: \n        options: PARALLEL SERIAL DEFAULT\n        description: |\n          PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n      - name: enable\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Set the enabled status of the MooseObject.\n      - name: files\n        required: Yes\n        default: !!str \n        cpp_type: std::vector<MeshFileName, std::allocator<MeshFileName> >\n        group_name: \n        description: |\n          The name of the mesh files to read.  They are automatically assigned ids starting with zero.\n      - name: ghost_point_neighbors\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n      - name: left_boundary\n        required: No\n        default: !!str left_boundary\n        cpp_type: BoundaryName\n        group_name: \n        description: |\n          name of the left (x) boundary\n      - name: nemesis\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n      - name: num_ghosted_layers\n        required: No\n        default: !!str 1\n        cpp_type: unsigned short\n        group_name: \'Advanced\'\n        description: |\n          Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n      - name: parallel_type\n        required: No\n        default: !!str DEFAULT\n        cpp_type: MooseEnum\n        group_name: \n        options: DISTRIBUTED REPLICATED DEFAULT\n        description: |\n          DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n      - name: partitioner\n        required: No\n        default: !!str default\n        cpp_type: MooseEnum\n        group_name: \'Partitioning\'\n        options: default metis parmetis linear centroid hilbert_sfc morton_sfc\n        description: |\n          Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n      - name: patch_size\n        required: No\n        default: !!str 40\n        cpp_type: unsigned int\n        group_name: \'Advanced\'\n        description: |\n          The number of nodes to consider in the NearestNode neighborhood.\n      - name: patch_update_strategy\n        required: No\n        default: !!str never\n        cpp_type: MooseEnum\n        group_name: \'Advanced\'\n        options: never always auto\n        description: |\n          How often to update the geometric search \'patch\'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  \'always\' will update the patch every timestep which might be time consuming.  \'auto\' will attempt to determine when the patch size needs to be updated automatically.\n      - name: pattern\n        required: Yes\n        default: !!str \n        cpp_type: std::vector<std::vector<unsigned int, std::allocator<unsigned int> >, std::allocator<std::vector<unsigned int, std::allocator<unsigned int> > > >\n        group_name: \n        description: |\n          A double-indexed array starting with the upper-left corner\n      - name: right_boundary\n        required: No\n        default: !!str right_boundary\n        cpp_type: BoundaryName\n        group_name: \n        description: |\n          name of the right (x) boundary\n      - name: top_boundary\n        required: No\n        default: !!str top_boundary\n        cpp_type: BoundaryName\n        group_name: \n        description: |\n          name of the top (y) boundary\n      - name: type\n        required: No\n        default: !!str PatternedMesh\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: x_width\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          The tile width in the x direction\n      - name: y_width\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          The tile width in the y direction\n      - name: z_width\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          The tile width in the z direction\n      subblocks:\n    - name: /Mesh/<type>/StitchedMesh\n      description: |\n        Reads in all of the given meshes and stitches them all together into one mesh.\n      parameters:\n      - name: allow_renumbering\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          If allow_renumbering=false, node and element numbers are kept fixed until deletion\n      - name: centroid_partitioner_direction\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \'Partitioning\'\n        options: x y z radial\n        description: |\n          Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n      - name: clear_stitched_boundary_ids\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          Whether or not to erase the boundary IDs after they\'ve been used for stitching.\n      - name: construct_node_list_from_side_list\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Whether or not to generate nodesets from the sidesets (usually a good idea).\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \'Advanced\'\n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: dim\n        required: No\n        default: !!str 1\n        cpp_type: MooseEnum\n        group_name: \'Advanced\'\n        options: 1 2 3\n        description: |\n          This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected. In particular you must supply this for GMSH meshes. Note: This is completely ignored for ExodusII meshes!\n      - name: distribution\n        required: No\n        default: !!str DEFAULT\n        cpp_type: MooseEnum\n        group_name: \n        options: PARALLEL SERIAL DEFAULT\n        description: |\n          PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n      - name: enable\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Set the enabled status of the MooseObject.\n      - name: files\n        required: Yes\n        default: !!str \n        cpp_type: std::vector<MeshFileName, std::allocator<MeshFileName> >\n        group_name: \n        description: |\n          The name of the mesh files to read.  These mesh files will be \'stitched\' into the current mesh in this order.\n      - name: ghost_point_neighbors\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n      - name: nemesis\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n      - name: num_ghosted_layers\n        required: No\n        default: !!str 1\n        cpp_type: unsigned short\n        group_name: \'Advanced\'\n        description: |\n          Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n      - name: parallel_type\n        required: No\n        default: !!str DEFAULT\n        cpp_type: MooseEnum\n        group_name: \n        options: DISTRIBUTED REPLICATED DEFAULT\n        description: |\n          DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n      - name: partitioner\n        required: No\n        default: !!str default\n        cpp_type: MooseEnum\n        group_name: \'Partitioning\'\n        options: default metis parmetis linear centroid hilbert_sfc morton_sfc\n        description: |\n          Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n      - name: patch_size\n        required: No\n        default: !!str 40\n        cpp_type: unsigned int\n        group_name: \'Advanced\'\n        description: |\n          The number of nodes to consider in the NearestNode neighborhood.\n      - name: patch_update_strategy\n        required: No\n        default: !!str never\n        cpp_type: MooseEnum\n        group_name: \'Advanced\'\n        options: never always auto\n        description: |\n          How often to update the geometric search \'patch\'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  \'always\' will update the patch every timestep which might be time consuming.  \'auto\' will attempt to determine when the patch size needs to be updated automatically.\n      - name: stitch_boundaries\n        required: Yes\n        default: !!str \n        cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n        group_name: \n        description: |\n          Pairs of boundary names (one after the other) to stitch together for each step.\n      - name: type\n        required: No\n        default: !!str StitchedMesh\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      subblocks:\n    - name: /Mesh/<type>/TiledMesh\n      description: |\n        Use the supplied mesh and create a tiled grid by repeating this mesh in the x,y, and z directions.\n      parameters:\n      - name: allow_renumbering\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          If allow_renumbering=false, node and element numbers are kept fixed until deletion\n      - name: back_boundary\n        required: No\n        default: !!str back_boundary\n        cpp_type: BoundaryName\n        group_name: \n        description: |\n          name of the back (z) boundary\n      - name: bottom_boundary\n        required: No\n        default: !!str bottom_boundary\n        cpp_type: BoundaryName\n        group_name: \n        description: |\n          name of the bottom (y) boundary\n      - name: centroid_partitioner_direction\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \'Partitioning\'\n        options: x y z radial\n        description: |\n          Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n      - name: construct_node_list_from_side_list\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Whether or not to generate nodesets from the sidesets (usually a good idea).\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \'Advanced\'\n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: dim\n        required: No\n        default: !!str 1\n        cpp_type: MooseEnum\n        group_name: \'Advanced\'\n        options: 1 2 3\n        description: |\n          This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected. In particular you must supply this for GMSH meshes. Note: This is completely ignored for ExodusII meshes!\n      - name: distribution\n        required: No\n        default: !!str DEFAULT\n        cpp_type: MooseEnum\n        group_name: \n        options: PARALLEL SERIAL DEFAULT\n        description: |\n          PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n      - name: enable\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Set the enabled status of the MooseObject.\n      - name: file\n        required: Yes\n        default: !!str \n        cpp_type: MeshFileName\n        group_name: \n        description: |\n          The name of the mesh file to read\n      - name: front_boundary\n        required: No\n        default: !!str front_boundary\n        cpp_type: BoundaryName\n        group_name: \n        description: |\n          name of the front (z) boundary\n      - name: ghost_point_neighbors\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n      - name: left_boundary\n        required: No\n        default: !!str left_boundary\n        cpp_type: BoundaryName\n        group_name: \n        description: |\n          name of the left (x) boundary\n      - name: nemesis\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n      - name: num_ghosted_layers\n        required: No\n        default: !!str 1\n        cpp_type: unsigned short\n        group_name: \'Advanced\'\n        description: |\n          Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n      - name: parallel_type\n        required: No\n        default: !!str DEFAULT\n        cpp_type: MooseEnum\n        group_name: \n        options: DISTRIBUTED REPLICATED DEFAULT\n        description: |\n          DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n      - name: partitioner\n        required: No\n        default: !!str default\n        cpp_type: MooseEnum\n        group_name: \'Partitioning\'\n        options: default metis parmetis linear centroid hilbert_sfc morton_sfc\n        description: |\n          Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n      - name: patch_size\n        required: No\n        default: !!str 40\n        cpp_type: unsigned int\n        group_name: \'Advanced\'\n        description: |\n          The number of nodes to consider in the NearestNode neighborhood.\n      - name: patch_update_strategy\n        required: No\n        default: !!str never\n        cpp_type: MooseEnum\n        group_name: \'Advanced\'\n        options: never always auto\n        description: |\n          How often to update the geometric search \'patch\'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  \'always\' will update the patch every timestep which might be time consuming.  \'auto\' will attempt to determine when the patch size needs to be updated automatically.\n      - name: right_boundary\n        required: No\n        default: !!str right_boundary\n        cpp_type: BoundaryName\n        group_name: \n        description: |\n          name of the right (x) boundary\n      - name: top_boundary\n        required: No\n        default: !!str top_boundary\n        cpp_type: BoundaryName\n        group_name: \n        description: |\n          name of the top (y) boundary\n      - name: type\n        required: No\n        default: !!str TiledMesh\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: x_tiles\n        required: No\n        default: !!str 1\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Number of tiles to stitch together (left to right) in the x-direction\n      - name: x_width\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          The tile width in the x direction\n      - name: y_tiles\n        required: No\n        default: !!str 1\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Number of tiles to stitch together (top to bottom) in the y-direction\n      - name: y_width\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          The tile width in the y direction\n      - name: z_tiles\n        required: No\n        default: !!str 1\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Number of tiles to stitch together (front to back) in the z-direction\n      - name: z_width\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          The tile width in the z direction\n      subblocks:\n  - name: /Mesh/MortarInterfaces\n    description: |\n      \n    parameters:\n    subblocks:\n    - name: /Mesh/MortarInterfaces/*\n      description: |\n        \n      parameters:\n      - name: inactive\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          If specified blocks matching these identifiers will be skipped.\n      - name: master\n        required: Yes\n        default: !!str \n        cpp_type: BoundaryName\n        group_name: \n        description: |\n          Master side ID\n      - name: slave\n        required: Yes\n        default: !!str \n        cpp_type: BoundaryName\n        group_name: \n        description: |\n          Slave side ID\n      - name: subdomain\n        required: Yes\n        default: !!str \n        cpp_type: SubdomainName\n        group_name: \n        description: |\n          Subdomain name that is the mortar interface\n      subblocks:\n  - name: /Mesh/Partitioner\n    description: |\n      \n    parameters:\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: isObjectAction\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates that this is a MooseObjectAction.\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n    - name: /Mesh/Partitioner/<type>\n      description: |\n        \n      parameters:\n      subblocks:\n      - name: /Mesh/Partitioner/<type>/LibmeshPartitioner\n        description: |\n          \n        parameters:\n        - name: blocks\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::vector<SubdomainName, std::allocator<SubdomainName> >, std::allocator<std::vector<SubdomainName, std::allocator<SubdomainName> > > >\n          group_name: \n          description: |\n            Block is seperated by ;, and partition mesh block by block. \n        - name: centroid_partitioner_direction\n          required: No\n          default: !!str \n          cpp_type: MooseEnum\n          group_name: \n          options: x y z radial\n          description: |\n            Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n        - name: control_tags\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \'Advanced\'\n          description: |\n            Adds user-defined labels for accessing object parameters via control logic.\n        - name: enable\n          required: No\n          default: !!str 1\n          cpp_type: bool\n          group_name: \'Advanced\'\n          description: |\n            Set the enabled status of the MooseObject.\n        - name: partitioner\n          required: Yes\n          default: !!str \n          cpp_type: MooseEnum\n          group_name: \n          options: metis parmetis linear centroid hilbert_sfc morton_sfc subdomain_partitioner\n          description: |\n            Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n        - name: type\n          required: No\n          default: !!str LibmeshPartitioner\n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            \n        subblocks:\n- name: /MeshModifiers\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /MeshModifiers/*\n    description: |\n      \n    parameters:\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: isObjectAction\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates that this is a MooseObjectAction.\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /MeshModifiers/AddAllSideSetsByNormals\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: fixed_normal\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n    - name: force_prepare\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n    - name: type\n      required: No\n      default: !!str AddAllSideSetsByNormals\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variance\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        The variance [0.0 - 1.0] allowed when comparing normals\n    subblocks:\n  - name: /MeshModifiers/AddExtraNodeset\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: coord\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The nodes with coordinates you want to be in the nodeset (Either this parameter or "nodes" must be supplied).\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: force_prepare\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n    - name: new_boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The name of the boundary to create\n    - name: nodes\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        The nodes you want to be in the nodeset (Either this parameter or "coord" must be supplied).\n    - name: tolerance\n      required: No\n      default: !!str 1e-06\n      cpp_type: double\n      group_name: \n      description: |\n        The tolerance in which two nodes are considered identical\n    - name: type\n      required: No\n      default: !!str AddExtraNodeset\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /MeshModifiers/AddSideSetsFromBoundingBox\n    description: |\n      Find sidesets with given boundary ids in bounding box and add new boundary id. This can be done by finding all required boundary and adding the new boundary id to those sidesets. Alternatively, a number of boundary ids can be provided and all nodes within the bounding box that have all the required boundary ids will have a newboundary id added.\n    parameters:\n    - name: block_id\n      required: Yes\n      default: !!str \n      cpp_type: unsigned short\n      group_name: \n      description: |\n        Subdomain id to set for inside/outside the bounding box\n    - name: bottom_left\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        The bottom left point (in x,y,z with spaces in-between).\n    - name: boundary_id_new\n      required: Yes\n      default: !!str \n      cpp_type: short\n      group_name: \n      description: |\n        Boundary id on specified block within the bounding box to assign\n    - name: boundary_id_old\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        Boundary id on specified block within the bounding box to select\n    - name: boundary_id_overlap\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true if boundaries need to overlap on sideset to be detected.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: force_prepare\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n    - name: location\n      required: No\n      default: !!str INSIDE\n      cpp_type: MooseEnum\n      group_name: \n      options: INSIDE OUTSIDE\n      description: |\n        Control of where the subdomain id is to be set\n    - name: top_right\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        The bottom left point (in x,y,z with spaces in-between).\n    - name: type\n      required: No\n      default: !!str AddSideSetsFromBoundingBox\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /MeshModifiers/AssignElementSubdomainID\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n    - name: element_ids\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        New subdomain IDs of all elements\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: force_prepare\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n    - name: subdomain_ids\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<unsigned short, std::allocator<unsigned short> >\n      group_name: \n      description: |\n        New subdomain IDs of all elements\n    - name: type\n      required: No\n      default: !!str AssignElementSubdomainID\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /MeshModifiers/AssignSubdomainID\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: force_prepare\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n    - name: subdomain_id\n      required: Yes\n      default: !!str \n      cpp_type: unsigned short\n      group_name: \n      description: |\n        New subdomain IDs of all elements\n    - name: type\n      required: No\n      default: !!str AssignSubdomainID\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /MeshModifiers/BlockDeleter\n    description: |\n      Mesh modifier which removes elements with the specified subdomain ID\n    parameters:\n    - name: block_id\n      required: Yes\n      default: !!str \n      cpp_type: unsigned short\n      group_name: \n      description: |\n        The block to be deleted\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: force_prepare\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n    - name: new_boundary\n      required: No\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        optional boundary name to assign to the cut surface\n    - name: type\n      required: No\n      default: !!str BlockDeleter\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /MeshModifiers/BoundingBoxNodeSet\n    description: |\n      Assigns all of the nodes either inside or outside of a bounding box to a new nodeset.\n    parameters:\n    - name: bottom_left\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        The bottom left point (in x,y,z with spaces in-between) of the box to select the nodes.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: force_prepare\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n    - name: location\n      required: No\n      default: !!str INSIDE\n      cpp_type: MooseEnum\n      group_name: \n      options: INSIDE OUTSIDE\n      description: |\n        Control of where the nodeset is to be set\n    - name: new_boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The name of the nodeset to create\n    - name: top_right\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        The bottom left point (in x,y,z with spaces in-between) of the box to select the nodes.\n    - name: type\n      required: No\n      default: !!str BoundingBoxNodeSet\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /MeshModifiers/BreakBoundaryOnSubdomain\n    description: |\n      Break boundaries based on the subdomains to which their sides are attached. Naming convention for the new boundaries will be the old boundary name plus "_to_" plus the subdomain name\n    parameters:\n    - name: boundaries\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        Boundaries to be broken. Default means to break all boundaries\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: force_prepare\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n    - name: type\n      required: No\n      default: !!str BreakBoundaryOnSubdomain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /MeshModifiers/ImageSubdomain\n    description: |\n      Samples an image at the coordinates of each element centroid using the resulting value as each element\'s subdomain ID\n    parameters:\n    - name: component\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The image RGB-component to return, leaving this blank will result in a greyscale value for the image to be created. The component number is zero based, i.e. 0 returns the first (RED) component of the image.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n    - name: dimensions\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        x,y,z dimensions of the image (defaults to mesh dimensions)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: file\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        Name of single image file to extract mesh parameters from.  If provided, a 2D mesh is created.\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: FileNameNoExtension\n      group_name: \n      description: |\n        Image file base to open, use this option when a stack of images must be read (ignored if \'file\' is given)\n    - name: file_range\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        Range of images to analyze, used with \'file_base\' (ignored if \'file\' is given)\n    - name: file_suffix\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Suffix of the file to open, e.g. \'png\'\n    - name: flip_x\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Flip\'\n      description: |\n        Flip the image along the x-axis\n    - name: flip_y\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Flip\'\n      description: |\n        Flip the image along the y-axis\n    - name: flip_z\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Flip\'\n      description: |\n        Flip the image along the z-axis\n    - name: force_prepare\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n    - name: lower_value\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \'Threshold\'\n      description: |\n        The value to set for data less than the threshold value\n    - name: origin\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        Origin of the image (defaults to mesh origin)\n    - name: scale\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \'Rescale\'\n      description: |\n        Multiplier to apply to all pixel values; occurs after shifting\n    - name: shift\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \'Rescale\'\n      description: |\n        Value to add to all pixels; occurs prior to scaling\n    - name: threshold\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'Threshold\'\n      description: |\n        The threshold value\n    - name: type\n      required: No\n      default: !!str ImageSubdomain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: upper_value\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \'Threshold\'\n      description: |\n        The value to set for data greater than the threshold value\n    subblocks:\n  - name: /MeshModifiers/MeshExtruder\n    description: |\n      Takes a 1D or 2D mesh and extrudes the entire structure along the specified axis increasing the dimensionality of the mesh.\n    parameters:\n    - name: bottom_sideset\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The boundary that will be applied to the bottom of the extruded mesh\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: existing_subdomains\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned short, std::allocator<unsigned short> >\n      group_name: \n      description: |\n        The subdomains that will be remapped for specific layers\n    - name: extrusion_vector\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        The direction and length of the extrusion\n    - name: force_prepare\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n    - name: layers\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        The layers where the "existing_subdomain" will be remapped to new ids\n    - name: new_ids\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        The list of new ids, This list should be either length "existing_subdomains" or "existing_subdomains" * layers\n    - name: num_layers\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of layers in the extruded mesh\n    - name: top_sideset\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The boundary that will be to the top of the extruded mesh\n    - name: type\n      required: No\n      default: !!str MeshExtruder\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /MeshModifiers/MeshSideSet\n    description: |\n      Add lower dimensional elements along the faces contained in a side set to set up mixed dimensional problems\n    parameters:\n    - name: block_id\n      required: Yes\n      default: !!str \n      cpp_type: unsigned short\n      group_name: \n      description: |\n        Subdomain id to set for the new elements along the boundary\n    - name: block_name\n      required: No\n      default: !!str \n      cpp_type: SubdomainName\n      group_name: \n      description: |\n        Subdomain name to set for the new elements along the boundary (optional)\n    - name: boundaries\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The name of the boundary to mesh\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: force_prepare\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n    - name: type\n      required: No\n      default: !!str MeshSideSet\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /MeshModifiers/OrientedSubdomainBoundingBox\n    description: |\n      \n    parameters:\n    - name: block_id\n      required: Yes\n      default: !!str \n      cpp_type: unsigned short\n      group_name: \n      description: |\n        Subdomain id to set for inside/outside the bounding box\n    - name: center\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        The center (many people spell this \'center\') of the box.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: force_prepare\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n    - name: height\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The height of the box\n    - name: length\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The length of the box\n    - name: length_direction\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        The direction along which the length is oriented (must be perpendicular to width_direction).\n    - name: location\n      required: No\n      default: !!str INSIDE\n      cpp_type: MooseEnum\n      group_name: \n      options: INSIDE OUTSIDE\n      description: |\n        Control of where the subdomain id is to be set\n    - name: type\n      required: No\n      default: !!str OrientedSubdomainBoundingBox\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: width\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The width of the box\n    - name: width_direction\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        The direction along which the width is oriented.\n    subblocks:\n  - name: /MeshModifiers/ParsedAddSideset\n    description: |\n      A MeshModifier that adds element\'s sides to a sideset if the centroid satisfies the combinatorial_geometry expression, (and optionally) if one of the side\'s elements is in included_subdomain_ids and if it features the correct normal.\n    parameters:\n    - name: combinatorial_geometry\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Function expression encoding a combinatorial geometry\n    - name: constant_expressions\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector of values for the constants in constant_names (can be an FParser expression)\n    - name: constant_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector of constants used in the parsed function (use this for kB etc.)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n    - name: disable_fpoptimizer\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Disable the function parser algebraic optimizer\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: enable_ad_cache\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable cacheing of function derivatives for faster startup time\n    - name: enable_auto_optimize\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable automatic immediate optimization of derivatives\n    - name: enable_jit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable just-in-time compilation of function expressions for faster evaluation\n    - name: fail_on_evalerror\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n    - name: fixed_normal\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n    - name: force_prepare\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n    - name: included_subdomain_ids\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned short, std::allocator<unsigned short> >\n      group_name: \n      description: |\n        A set of subdomain ids whose sides will be included in the new sidesets\n    - name: new_sideset_name\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The name of the new sideset\n    - name: normal\n      required: No\n      default: !!str 0 0 0\n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        If provided specifies the normal vector on sides that are added to the new \n    - name: type\n      required: No\n      default: !!str ParsedAddSideset\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variance\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        The variance [0.0 - 1.0] allowed when comparing normals\n    subblocks:\n  - name: /MeshModifiers/ParsedSubdomainMeshModifier\n    description: |\n      MeshModifier that uses a parsed expression (combinatorial_geometry) to determine if an element (aka its centroid) is inside the combinatorial geometry and assigns a new block id.\n    parameters:\n    - name: block_id\n      required: Yes\n      default: !!str \n      cpp_type: unsigned short\n      group_name: \n      description: |\n        Subdomain id to set for inside of the combinatorial\n    - name: block_name\n      required: No\n      default: !!str \n      cpp_type: SubdomainName\n      group_name: \n      description: |\n        Subdomain name to set for inside of the combinatorial\n    - name: combinatorial_geometry\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Function expression encoding a combinatorial geometry\n    - name: constant_expressions\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector of values for the constants in constant_names (can be an FParser expression)\n    - name: constant_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector of constants used in the parsed function (use this for kB etc.)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n    - name: disable_fpoptimizer\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Disable the function parser algebraic optimizer\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: enable_ad_cache\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable cacheing of function derivatives for faster startup time\n    - name: enable_auto_optimize\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable automatic immediate optimization of derivatives\n    - name: enable_jit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable just-in-time compilation of function expressions for faster evaluation\n    - name: excluded_subdomain_ids\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned short, std::allocator<unsigned short> >\n      group_name: \n      description: |\n        A set of subdomain ids that will not changed even if they are inside/outside the combinatorial geometry\n    - name: fail_on_evalerror\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n    - name: force_prepare\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n    - name: type\n      required: No\n      default: !!str ParsedSubdomainMeshModifier\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /MeshModifiers/RenameBlock\n    description: |\n      RenameBlock re-numbers or re-names an old_block_id or old_block_name with a new_block_id or new_block_name\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: force_prepare\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n    - name: new_block_id\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned short, std::allocator<unsigned short> >\n      group_name: \n      description: |\n        Elements with the old block number (or name) will be given this block number.  You must supply either new_block_id or new_block_name.  You may supply a vector of new_block_id, in which case the old_block information must also be a vector.\n    - name: new_block_name\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        Elements with the old block number (or name) will be given this block name.  You must supply either new_block_id or new_block_name.  You may supply a vector of new_block_id, in which case the old_block information must also be a vector.\n    - name: old_block_id\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned short, std::allocator<unsigned short> >\n      group_name: \n      description: |\n        Elements with this block number will be given the new_block_number or new_block_name.  You must supply either old_block_id or old_block_name.  You may supply a vector of old_block_id, in which case the new_block information must also be a vector.\n    - name: old_block_name\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        Elements with this block name will be given the new_block_number or new_block_name.  You must supply either old_block_id or old_block_name.  You may supply a vector of old_block_name, in which case the new_block information must also be a vector.\n    - name: type\n      required: No\n      default: !!str RenameBlock\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /MeshModifiers/SideSetsAroundSubdomain\n    description: |\n      Adds element faces that are on the exterior of the given block to the sidesets specified\n    parameters:\n    - name: block\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The blocks around which to create sidesets\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: fixed_normal\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n    - name: force_prepare\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n    - name: new_boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs to create on the supplied subdomain\n    - name: normal\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        If supplied, only faces with normal equal to this, up to normal_tol, will be added to the sidesets specified\n    - name: normal_tol\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        If normal is supplied then faces are only added if face_normal.normal_hat >= 1 - normal_tol, where normal_hat = normal/|normal|\n    - name: type\n      required: No\n      default: !!str SideSetsAroundSubdomain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variance\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        The variance [0.0 - 1.0] allowed when comparing normals\n    subblocks:\n  - name: /MeshModifiers/SideSetsBetweenSubdomains\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: force_prepare\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n    - name: master_block\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The master set of blocks for which to draw a sideset between\n    - name: new_boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The name of the boundary to create\n    - name: paired_block\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The paired set of blocks for which to draw a sideset between\n    - name: type\n      required: No\n      default: !!str SideSetsBetweenSubdomains\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /MeshModifiers/SideSetsFromNormals\n    description: |\n      Adds a new named sideset to the mesh for all faces matching the specified normal.\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: fixed_normal\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n    - name: force_prepare\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n    - name: new_boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The name of the boundary to create\n    - name: normals\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<libMesh::Point, std::allocator<libMesh::Point> >\n      group_name: \n      description: |\n        A list of normals for which to start painting sidesets\n    - name: type\n      required: No\n      default: !!str SideSetsFromNormals\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variance\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        The variance [0.0 - 1.0] allowed when comparing normals\n    subblocks:\n  - name: /MeshModifiers/SideSetsFromPoints\n    description: |\n      Adds a new sideset starting at the specified point containing all connected element faces with the same normal.\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: fixed_normal\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n    - name: force_prepare\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n    - name: new_boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The name of the boundary to create\n    - name: points\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<libMesh::Point, std::allocator<libMesh::Point> >\n      group_name: \n      description: |\n        A list of points from which to start painting sidesets\n    - name: type\n      required: No\n      default: !!str SideSetsFromPoints\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: variance\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        The variance [0.0 - 1.0] allowed when comparing normals\n    subblocks:\n  - name: /MeshModifiers/SubdomainBoundingBox\n    description: |\n      Changes the subdomain ID of elements either (XOR) inside or outside the specified box to the specified ID.\n    parameters:\n    - name: block_id\n      required: Yes\n      default: !!str \n      cpp_type: unsigned short\n      group_name: \n      description: |\n        Subdomain id to set for inside/outside the bounding box\n    - name: block_name\n      required: No\n      default: !!str \n      cpp_type: SubdomainName\n      group_name: \n      description: |\n        Subdomain name to set for inside/outside the bounding box (optional)\n    - name: bottom_left\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        The bottom left point (in x,y,z with spaces in-between).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: force_prepare\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n    - name: location\n      required: No\n      default: !!str INSIDE\n      cpp_type: MooseEnum\n      group_name: \n      options: INSIDE OUTSIDE\n      description: |\n        Control of where the subdomain id is to be set\n    - name: top_right\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        The bottom left point (in x,y,z with spaces in-between).\n    - name: type\n      required: No\n      default: !!str SubdomainBoundingBox\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /MeshModifiers/Transform\n    description: |\n      Applies a linear transform to the entire mesh.\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depends_on\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: force_prepare\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n    - name: transform\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: TRANSLATE ROTATE SCALE\n      description: |\n        The type of transformation to perform (TRANSLATE, ROTATE, SCALE)\n    - name: type\n      required: No\n      default: !!str Transform\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: vector_value\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        The value to use for the transformation. When using TRANSLATE or SCALE, the xyz coordinates are applied in each direction respectively. When using ROTATE, the values are interpreted as the Euler angles phi, theta and psi given in degrees.\n    subblocks:\n- name: /Modules\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /Modules/PhaseField\n    description: |\n      \n    parameters:\n    subblocks:\n    - name: /Modules/PhaseField/Conserved\n      description: |\n        \n      parameters:\n      subblocks:\n      - name: /Modules/PhaseField/Conserved/*\n        description: |\n          \n        parameters:\n        - name: args\n          required: No\n          default: !!str \n          cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n          group_name: \n          description: |\n            Vector of variable arguments this kernel depends on\n        - name: family\n          required: No\n          default: !!str LAGRANGE\n          cpp_type: MooseEnum\n          group_name: \n          options: LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN L2_LAGRANGE L2_HIERARCHIC\n          description: |\n            Specifies the family of FE shape functions to use for this variable\n        - name: free_energy\n          required: Yes\n          default: !!str \n          cpp_type: MaterialPropertyName\n          group_name: \n          description: |\n            Base name of the free energy function F defined in a free energy material\n        - name: implicit\n          required: No\n          default: !!str 1\n          cpp_type: bool\n          group_name: \'Advanced\'\n          description: |\n            Whether kernels are implicit or not\n        - name: inactive\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \n          description: |\n            If specified blocks matching these identifiers will be skipped.\n        - name: kappa\n          required: Yes\n          default: !!str \n          cpp_type: MaterialPropertyName\n          group_name: \n          description: |\n            The kappa used with the kernel\n        - name: mobility\n          required: Yes\n          default: !!str \n          cpp_type: MaterialPropertyName\n          group_name: \n          description: |\n            The mobility used with the kernel\n        - name: order\n          required: No\n          default: !!str FIRST\n          cpp_type: MooseEnum\n          group_name: \n          options: CONSTANT FIRST SECOND THIRD FOURTH\n          description: |\n            Specifies the order of the FE shape function to use for this variable\n        - name: scaling\n          required: No\n          default: !!str 1\n          cpp_type: double\n          group_name: \'Advanced\'\n          description: |\n            Specifies a scaling factor to apply to this variable\n        - name: solve_type\n          required: Yes\n          default: !!str \n          cpp_type: MooseEnum\n          group_name: \n          options: DIRECT REVERSE_SPLIT FORWARD_SPLIT\n          description: |\n            Split or direct solve?\n        - name: use_displaced_mesh\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \'Advanced\'\n          description: |\n            Whether to use displaced mesh in the kernels\n        subblocks:\n    - name: /Modules/PhaseField/DisplacementGradients\n      description: |\n        \n      parameters:\n      - name: displacement_gradients\n        required: Yes\n        default: !!str \n        cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n        group_name: \n        description: |\n          Vector of displacement gradient variables\n      - name: displacements\n        required: Yes\n        default: !!str \n        cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n        group_name: \n        description: |\n          Vector of displacement variables\n      - name: inactive\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          If specified blocks matching these identifiers will be skipped.\n      - name: scaling\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          Specifies a scaling factor to apply to the displacement gradient variables\n      subblocks:\n    - name: /Modules/PhaseField/EulerAngles2RGB\n      description: |\n        \n      parameters:\n      - name: auxvariable_name_base\n        required: No\n        default: !!str RGB\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          Base name of the auxvariables\n      - name: crystal_structure\n        required: Yes\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: triclinic monoclinic orthorhombic trigonal tetragonal cubic hexagonal\n        description: |\n          Crystal structure of the material\n      - name: euler_angle_provider\n        required: Yes\n        default: !!str \n        cpp_type: UserObjectName\n        group_name: \n        description: |\n          Name of Euler angle provider user object\n      - name: grain_tracker\n        required: Yes\n        default: !!str \n        cpp_type: UserObjectName\n        group_name: \n        description: |\n          The GrainTracker UserObject to get values from.\n      - name: inactive\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          If specified blocks matching these identifiers will be skipped.\n      - name: no_grain_color\n        required: No\n        default: !!str 0 0 0\n        cpp_type: libMesh::Point\n        group_name: \n        description: |\n          RGB value of color used to represent area with no grains, defaults to black\n      - name: sd\n        required: No\n        default: !!str 001\n        cpp_type: MooseEnum\n        group_name: \n        options: 100 010 001\n        description: |\n          Reference sample direction\n      subblocks:\n    - name: /Modules/PhaseField/GrainGrowth\n      description: |\n        \n      parameters:\n      - name: args\n        required: No\n        default: !!str \n        cpp_type: std::vector<VariableName>\n        group_name: \n        description: |\n          Vector of nonlinear variable arguments that L depends on\n      - name: c\n        required: No\n        default: !!str \n        cpp_type: VariableName\n        group_name: \'Multiphysics\'\n        description: |\n          Name of coupled concentration variable\n      - name: en_ratio\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \'Multiphysics\'\n        description: |\n          Ratio of surface to GB energy\n      - name: family\n        required: No\n        default: !!str LAGRANGE\n        cpp_type: MooseEnum\n        group_name: \n        options: LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN L2_LAGRANGE L2_HIERARCHIC\n        description: |\n          Specifies the family of FE shape function to use for the order parameters\n      - name: implicit\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Whether kernels are implicit or not\n      - name: inactive\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          If specified blocks matching these identifiers will be skipped.\n      - name: kappa\n        required: No\n        default: !!str kappa_op\n        cpp_type: MaterialPropertyName\n        group_name: \n        description: |\n          The kappa used with the kernels\n      - name: mobility\n        required: No\n        default: !!str L\n        cpp_type: MaterialPropertyName\n        group_name: \n        description: |\n          The isotropic mobility used with the kernels\n      - name: ndef\n        required: No\n        default: !!str 0\n        cpp_type: unsigned int\n        group_name: \'Multiphysics\'\n        description: |\n          Specifies the number of deformed grains to create\n      - name: op_num\n        required: Yes\n        default: !!str \n        cpp_type: unsigned int\n        group_name: \n        description: |\n          specifies the number of order parameters to create\n      - name: order\n        required: No\n        default: !!str FIRST\n        cpp_type: MooseEnum\n        group_name: \n        options: CONSTANT FIRST SECOND THIRD FOURTH\n        description: |\n          Specifies the order of the FE shape function to use for the order parameters\n      - name: scaling\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \'Advanced\'\n        description: |\n          Specifies a scaling factor to apply to the order parameters\n      - name: use_displaced_mesh\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Whether to use displaced mesh in the kernels\n      - name: var_name_base\n        required: Yes\n        default: !!str \n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          specifies the base name of the variables\n      - name: variable_mobility\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          The mobility is a function of any MOOSE variable (if this is set to false, L must be constant over the entire domain!)\n      subblocks:\n    - name: /Modules/PhaseField/MortarPeriodicity\n      description: |\n        \n      parameters:\n      subblocks:\n      - name: /Modules/PhaseField/MortarPeriodicity/*\n        description: |\n          \n        parameters:\n        - name: inactive\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \n          description: |\n            If specified blocks matching these identifiers will be skipped.\n        - name: periodicity\n          required: No\n          default: !!str gradient\n          cpp_type: MooseEnum\n          group_name: \n          options: gradient value\n          description: |\n            Periodicity type\n        - name: variable\n          required: No\n          default: !!str \n          cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n          group_name: \n          description: |\n            Periodic variables\n        subblocks:\n    - name: /Modules/PhaseField/Nonconserved\n      description: |\n        \n      parameters:\n      subblocks:\n      - name: /Modules/PhaseField/Nonconserved/*\n        description: |\n          \n        parameters:\n        - name: args\n          required: No\n          default: !!str \n          cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n          group_name: \n          description: |\n            Vector of variable arguments this kernel depends on\n        - name: family\n          required: No\n          default: !!str LAGRANGE\n          cpp_type: MooseEnum\n          group_name: \n          options: LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN L2_LAGRANGE L2_HIERARCHIC\n          description: |\n            Specifies the family of FE shape functions to use for this variable\n        - name: free_energy\n          required: Yes\n          default: !!str \n          cpp_type: MaterialPropertyName\n          group_name: \n          description: |\n            Base name of the free energy function F defined in a free energy material\n        - name: implicit\n          required: No\n          default: !!str 1\n          cpp_type: bool\n          group_name: \'Advanced\'\n          description: |\n            Whether kernels are implicit or not\n        - name: inactive\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \n          description: |\n            If specified blocks matching these identifiers will be skipped.\n        - name: kappa\n          required: No\n          default: !!str kappa_op\n          cpp_type: MaterialPropertyName\n          group_name: \n          description: |\n            The kappa used with the kernel\n        - name: mobility\n          required: No\n          default: !!str L\n          cpp_type: MaterialPropertyName\n          group_name: \n          description: |\n            The mobility used with the kernel\n        - name: order\n          required: No\n          default: !!str FIRST\n          cpp_type: MooseEnum\n          group_name: \n          options: CONSTANT FIRST SECOND THIRD FOURTH\n          description: |\n            Specifies the order of the FE shape function to use for this variable\n        - name: scaling\n          required: No\n          default: !!str 1\n          cpp_type: double\n          group_name: \'Advanced\'\n          description: |\n            Specifies a scaling factor to apply to this variable\n        - name: use_displaced_mesh\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \'Advanced\'\n          description: |\n            Whether to use displaced mesh in the kernels\n        - name: variable_mobility\n          required: No\n          default: !!str 1\n          cpp_type: bool\n          group_name: \n          description: |\n            The mobility is a function of any MOOSE variable (if this is set to false, L must be constant over the entire domain!)\n        subblocks:\n  - name: /Modules/TensorMechanics\n    description: |\n      \n    parameters:\n    subblocks:\n    - name: /Modules/TensorMechanics/GeneralizedPlaneStrain\n      description: |\n        \n      parameters:\n      subblocks:\n      - name: /Modules/TensorMechanics/GeneralizedPlaneStrain/*\n        description: |\n          \n        parameters:\n        - name: base_name\n          required: No\n          default: !!str \n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            Material property base name\n        - name: block\n          required: No\n          default: !!str \n          cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n          group_name: \n          description: |\n            The list of ids of the blocks (subdomain) that the GeneralizedPlaneStrain kernels will be applied to\n        - name: displacements\n          required: Yes\n          default: !!str \n          cpp_type: std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >\n          group_name: \n          description: |\n            The displacement variables\n        - name: factor\n          required: No\n          default: !!str 1\n          cpp_type: double\n          group_name: \n          description: |\n            Scale factor applied to prescribed pressure\n        - name: inactive\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \n          description: |\n            If specified blocks matching these identifiers will be skipped.\n        - name: out_of_plane_pressure\n          required: No\n          default: !!str 0\n          cpp_type: FunctionName\n          group_name: \n          description: |\n            Function used to prescribe pressure in the out-of-plane direction (y for 1D Axisymmetric or z for 2D Cartesian problems)\n        - name: scalar_out_of_plane_strain\n          required: Yes\n          default: !!str \n          cpp_type: NonlinearVariableName\n          group_name: \n          description: |\n            Scalar variable for the out-of-plane strain (in y direction for 1D Axisymmetric or in z direction for 2D Cartesian problems)\n        - name: temperature\n          required: No\n          default: !!str \n          cpp_type: NonlinearVariableName\n          group_name: \n          description: |\n            The temperature variable\n        - name: use_displaced_mesh\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \n          description: |\n            Whether to use displaced mesh\n        subblocks:\n    - name: /Modules/TensorMechanics/Master\n      description: |\n        \n      parameters:\n      - name: add_variables\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          Add the displacement variables\n      - name: base_name\n        required: No\n        default: !!str \n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          Material property base name\n      - name: decomposition_method\n        required: No\n        default: !!str TaylorExpansion\n        cpp_type: MooseEnum\n        group_name: \n        options: TaylorExpansion EigenSolution\n        description: |\n          Methods to calculate the finite strain and rotation increments\n      - name: diag_save_in\n        required: No\n        default: !!str \n        cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n        group_name: \'Advanced\'\n        description: |\n          The displacement diagonal preconditioner terms\n      - name: displacements\n        required: Yes\n        default: !!str \n        cpp_type: std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >\n        group_name: \n        description: |\n          The nonlinear displacement variables for the problem\n      - name: eigenstrain_names\n        required: No\n        default: !!str \n        cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n        group_name: \n        description: |\n          List of eigenstrains to be applied in this strain calculation\n      - name: generate_output\n        required: No\n        default: !!str \n        cpp_type: MultiMooseEnum\n        group_name: \'Output\'\n        options: creep_strain_xx creep_strain_xy creep_strain_xz creep_strain_yx creep_strain_yy creep_strain_yz creep_strain_zx creep_strain_zy creep_strain_zz elastic_strain_xx elastic_strain_xy elastic_strain_xz elastic_strain_yx elastic_strain_yy elastic_strain_yz elastic_strain_zx elastic_strain_zy elastic_strain_zz plastic_strain_xx plastic_strain_xy plastic_strain_xz plastic_strain_yx plastic_strain_yy plastic_strain_yz plastic_strain_zx plastic_strain_zy plastic_strain_zz strain_xx strain_xy strain_xz strain_yx strain_yy strain_yz strain_zx strain_zy strain_zz stress_xx stress_xy stress_xz stress_yx stress_yy stress_yz stress_zx stress_zy stress_zz effective_plastic_strain effective_creep_strain firstinv_stress firstinv_strain hydrostatic_stress max_principal_stress mid_principal_stress min_principal_stress secondinv_stress secondinv_strain thirdinv_stress thirdinv_strain vonmises_stress\n        description: |\n          Add scalar quantity output for stress and/or strain\n      - name: inactive\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          If specified blocks matching these identifiers will be skipped.\n      - name: incremental\n        required: No\n        default: !!str \n        cpp_type: bool\n        group_name: \n        description: |\n          Use incremental or total strain\n      - name: out_of_plane_pressure\n        required: No\n        default: !!str 0\n        cpp_type: FunctionName\n        group_name: \'Out-of-plane stress/strain\'\n        description: |\n          Function used to prescribe pressure in the out-of-plane direction (y for 1D Axisymmetric or z for 2D Cartesian problems)\n      - name: planar_formulation\n        required: No\n        default: !!str NONE\n        cpp_type: MooseEnum\n        group_name: \'Out-of-plane stress/strain\'\n        options: NONE PLANE_STRAIN GENERALIZED_PLANE_STRAIN\n        description: |\n          Out-of-plane stress/strain formulation\n      - name: pressure_factor\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \'Out-of-plane stress/strain\'\n        description: |\n          Scale factor applied to prescribed pressure\n      - name: save_in\n        required: No\n        default: !!str \n        cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n        group_name: \'Advanced\'\n        description: |\n          The displacement residuals\n      - name: scalar_out_of_plane_strain\n        required: No\n        default: !!str \n        cpp_type: NonlinearVariableName\n        group_name: \'Out-of-plane stress/strain\'\n        description: |\n          Scalar variable for the out-of-plane strain (in y direction for 1D Axisymmetric or in z direction for 2D Cartesian problems)\n      - name: strain\n        required: No\n        default: !!str SMALL\n        cpp_type: MooseEnum\n        group_name: \n        options: SMALL FINITE\n        description: |\n          Strain formulation\n      - name: temperature\n        required: No\n        default: !!str \n        cpp_type: NonlinearVariableName\n        group_name: \n        description: |\n          The temperature\n      - name: use_displaced_mesh\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          Whether to use displaced mesh in the kernels\n      - name: use_finite_deform_jacobian\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          Jacobian for corrotational finite strain\n      - name: volumetric_locking_correction\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          Flag to correct volumetric locking\n      subblocks:\n      - name: /Modules/TensorMechanics/Master/*\n        description: |\n          \n        parameters:\n        - name: add_variables\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \n          description: |\n            Add the displacement variables\n        - name: additional_generate_output\n          required: No\n          default: !!str \n          cpp_type: MultiMooseEnum\n          group_name: \'Output\'\n          options: creep_strain_xx creep_strain_xy creep_strain_xz creep_strain_yx creep_strain_yy creep_strain_yz creep_strain_zx creep_strain_zy creep_strain_zz elastic_strain_xx elastic_strain_xy elastic_strain_xz elastic_strain_yx elastic_strain_yy elastic_strain_yz elastic_strain_zx elastic_strain_zy elastic_strain_zz plastic_strain_xx plastic_strain_xy plastic_strain_xz plastic_strain_yx plastic_strain_yy plastic_strain_yz plastic_strain_zx plastic_strain_zy plastic_strain_zz strain_xx strain_xy strain_xz strain_yx strain_yy strain_yz strain_zx strain_zy strain_zz stress_xx stress_xy stress_xz stress_yx stress_yy stress_yz stress_zx stress_zy stress_zz effective_plastic_strain effective_creep_strain firstinv_stress firstinv_strain hydrostatic_stress max_principal_stress mid_principal_stress min_principal_stress secondinv_stress secondinv_strain thirdinv_stress thirdinv_strain vonmises_stress\n          description: |\n            Add scalar quantity output for stress and/or strain (will be appended to the list in `generate_output`)\n        - name: base_name\n          required: No\n          default: !!str \n          cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n          group_name: \n          description: |\n            Material property base name\n        - name: block\n          required: No\n          default: !!str \n          cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n          group_name: \'Advanced\'\n          description: |\n            The list of ids of the blocks (subdomain) that the stress divergence kernels will be applied to\n        - name: decomposition_method\n          required: No\n          default: !!str TaylorExpansion\n          cpp_type: MooseEnum\n          group_name: \n          options: TaylorExpansion EigenSolution\n          description: |\n            Methods to calculate the finite strain and rotation increments\n        - name: diag_save_in\n          required: No\n          default: !!str \n          cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n          group_name: \'Advanced\'\n          description: |\n            The displacement diagonal preconditioner terms\n        - name: displacements\n          required: Yes\n          default: !!str \n          cpp_type: std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >\n          group_name: \n          description: |\n            The nonlinear displacement variables for the problem\n        - name: eigenstrain_names\n          required: No\n          default: !!str \n          cpp_type: std::vector<MaterialPropertyName, std::allocator<MaterialPropertyName> >\n          group_name: \n          description: |\n            List of eigenstrains to be applied in this strain calculation\n        - name: generate_output\n          required: No\n          default: !!str \n          cpp_type: MultiMooseEnum\n          group_name: \'Output\'\n          options: creep_strain_xx creep_strain_xy creep_strain_xz creep_strain_yx creep_strain_yy creep_strain_yz creep_strain_zx creep_strain_zy creep_strain_zz elastic_strain_xx elastic_strain_xy elastic_strain_xz elastic_strain_yx elastic_strain_yy elastic_strain_yz elastic_strain_zx elastic_strain_zy elastic_strain_zz plastic_strain_xx plastic_strain_xy plastic_strain_xz plastic_strain_yx plastic_strain_yy plastic_strain_yz plastic_strain_zx plastic_strain_zy plastic_strain_zz strain_xx strain_xy strain_xz strain_yx strain_yy strain_yz strain_zx strain_zy strain_zz stress_xx stress_xy stress_xz stress_yx stress_yy stress_yz stress_zx stress_zy stress_zz effective_plastic_strain effective_creep_strain firstinv_stress firstinv_strain hydrostatic_stress max_principal_stress mid_principal_stress min_principal_stress secondinv_stress secondinv_strain thirdinv_stress thirdinv_strain vonmises_stress\n          description: |\n            Add scalar quantity output for stress and/or strain\n        - name: inactive\n          required: No\n          default: !!str \n          cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n          group_name: \n          description: |\n            If specified blocks matching these identifiers will be skipped.\n        - name: incremental\n          required: No\n          default: !!str \n          cpp_type: bool\n          group_name: \n          description: |\n            Use incremental or total strain\n        - name: out_of_plane_pressure\n          required: No\n          default: !!str 0\n          cpp_type: FunctionName\n          group_name: \'Out-of-plane stress/strain\'\n          description: |\n            Function used to prescribe pressure in the out-of-plane direction (y for 1D Axisymmetric or z for 2D Cartesian problems)\n        - name: planar_formulation\n          required: No\n          default: !!str NONE\n          cpp_type: MooseEnum\n          group_name: \'Out-of-plane stress/strain\'\n          options: NONE PLANE_STRAIN GENERALIZED_PLANE_STRAIN\n          description: |\n            Out-of-plane stress/strain formulation\n        - name: pressure_factor\n          required: No\n          default: !!str 1\n          cpp_type: double\n          group_name: \'Out-of-plane stress/strain\'\n          description: |\n            Scale factor applied to prescribed pressure\n        - name: save_in\n          required: No\n          default: !!str \n          cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n          group_name: \'Advanced\'\n          description: |\n            The displacement residuals\n        - name: scalar_out_of_plane_strain\n          required: No\n          default: !!str \n          cpp_type: NonlinearVariableName\n          group_name: \'Out-of-plane stress/strain\'\n          description: |\n            Scalar variable for the out-of-plane strain (in y direction for 1D Axisymmetric or in z direction for 2D Cartesian problems)\n        - name: strain\n          required: No\n          default: !!str SMALL\n          cpp_type: MooseEnum\n          group_name: \n          options: SMALL FINITE\n          description: |\n            Strain formulation\n        - name: temperature\n          required: No\n          default: !!str \n          cpp_type: NonlinearVariableName\n          group_name: \n          description: |\n            The temperature\n        - name: use_displaced_mesh\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \n          description: |\n            Whether to use displaced mesh in the kernels\n        - name: use_finite_deform_jacobian\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \n          description: |\n            Jacobian for corrotational finite strain\n        - name: volumetric_locking_correction\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \n          description: |\n            Flag to correct volumetric locking\n        subblocks:\n- name: /MultiApps\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /MultiApps/*\n    description: |\n      \n    parameters:\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: isObjectAction\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates that this is a MooseObjectAction.\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /MultiApps/AutoPositionsMultiApp\n    description: |\n      \n    parameters:\n    - name: app_type\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: BirdApp BirdTestApp\n      description: |\n        The type of application to build (applications not registered can be loaded with dynamic libraries. Master application type will be used if not provided.\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bounding_box_inflation\n      required: No\n      default: !!str 0.01\n      cpp_type: double\n      group_name: \n      description: |\n        Relative amount to \'inflate\' the bounding box of this MultiApp.\n    - name: catch_up\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true this will allow failed solves to attempt to \'catch up\' using smaller timesteps.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: detect_steady_state\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true then while sub_cycling a steady state check will be done.  In this mode output will only be done once the MultiApp reaches the target time or steady state is reached\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_begin\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: input_files\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<FileName, std::allocator<FileName> >\n      group_name: \n      description: |\n        The input file for each App.  If this parameter only contains one input file it will be used for all of the Apps.  When using \'positions_from_file\' it is also admissable to provide one input_file per file.\n    - name: interpolate_transfers\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Only valid when sub_cycling.  This allows transferred values to be interpolated over the time frame the MultiApp is executing over when sub_cycling\n    - name: library_path\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Path to search for dynamic libraries (please avoid committing absolute paths in addition to MOOSE_LIBRARY_PATH)\n    - name: max_catch_up_steps\n      required: No\n      default: !!str 2\n      cpp_type: double\n      group_name: \n      description: |\n        Maximum number of steps to allow an app to take when trying to catch back up after a failed solve.\n    - name: max_failures\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of solve failures tolerated while sub_cycling.\n    - name: max_procs_per_app\n      required: No\n      default: !!str 4294967295\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of processors to give to each App in this MultiApp.  Useful for restricting small solves to just a few procs so they don\'t get spread out\n    - name: move_apps\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        Apps, designated by their \'numbers\' starting with 0 corresponding to the order of the App positions, to be moved at move_time to move_positions\n    - name: move_positions\n      required: No\n      default: !!str \n      cpp_type: std::vector<libMesh::Point, std::allocator<libMesh::Point> >\n      group_name: \n      description: |\n        The positions corresponding to each move_app.\n    - name: move_time\n      required: No\n      default: !!str 1.79769e+308\n      cpp_type: double\n      group_name: \n      description: |\n        The time at which Apps designated by move_apps are moved to move_positions.\n    - name: output_in_position\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true this will cause the output from the MultiApp to be \'moved\' by its position vector\n    - name: output_sub_cycles\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true then every sub-cycle will be output.\n    - name: print_sub_cycles\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Toggle the display of sub-cycles on the screen.\n    - name: reset_apps\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        The Apps that will be reset when \'reset_time\' is hit.  These are the App \'numbers\' starting with 0 corresponding to the order of the App positions.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of \'new\' material for that app.\n    - name: reset_time\n      required: No\n      default: !!str 1.79769e+308\n      cpp_type: double\n      group_name: \n      description: |\n        The time at which to reset Apps given by the \'reset_apps\' parameter.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of \'new\' material for that app.\n    - name: steady_state_tol\n      required: No\n      default: !!str 1e-08\n      cpp_type: double\n      group_name: \n      description: |\n        The relative difference between the new solution and the old solution that will be considered to be at steady state\n    - name: sub_cycling\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true to allow this MultiApp to take smaller timesteps than the rest of the simulation.  More than one timestep will be performed for each \'master\' timestep\n    - name: tolerate_failure\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true this MultiApp won\'t participate in dt decisions and will always be fast-forwarded to the current time.\n    - name: type\n      required: No\n      default: !!str AutoPositionsMultiApp\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /MultiApps/FullSolveMultiApp\n    description: |\n      \n    parameters:\n    - name: app_type\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: BirdApp BirdTestApp\n      description: |\n        The type of application to build (applications not registered can be loaded with dynamic libraries. Master application type will be used if not provided.\n    - name: bounding_box_inflation\n      required: No\n      default: !!str 0.01\n      cpp_type: double\n      group_name: \n      description: |\n        Relative amount to \'inflate\' the bounding box of this MultiApp.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_begin\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: input_files\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<FileName, std::allocator<FileName> >\n      group_name: \n      description: |\n        The input file for each App.  If this parameter only contains one input file it will be used for all of the Apps.  When using \'positions_from_file\' it is also admissable to provide one input_file per file.\n    - name: library_path\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Path to search for dynamic libraries (please avoid committing absolute paths in addition to MOOSE_LIBRARY_PATH)\n    - name: max_procs_per_app\n      required: No\n      default: !!str 4294967295\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of processors to give to each App in this MultiApp.  Useful for restricting small solves to just a few procs so they don\'t get spread out\n    - name: move_apps\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        Apps, designated by their \'numbers\' starting with 0 corresponding to the order of the App positions, to be moved at move_time to move_positions\n    - name: move_positions\n      required: No\n      default: !!str \n      cpp_type: std::vector<libMesh::Point, std::allocator<libMesh::Point> >\n      group_name: \n      description: |\n        The positions corresponding to each move_app.\n    - name: move_time\n      required: No\n      default: !!str 1.79769e+308\n      cpp_type: double\n      group_name: \n      description: |\n        The time at which Apps designated by move_apps are moved to move_positions.\n    - name: output_in_position\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true this will cause the output from the MultiApp to be \'moved\' by its position vector\n    - name: positions\n      required: No\n      default: !!str \n      cpp_type: std::vector<libMesh::Point, std::allocator<libMesh::Point> >\n      group_name: \n      description: |\n        The positions of the App locations.  Each set of 3 values will represent a Point.  This and \'positions_file\' cannot be both supplied. If this and \'positions_file\' are not supplied, a single position (0,0,0) will be used\n    - name: positions_file\n      required: No\n      default: !!str \n      cpp_type: std::vector<FileName, std::allocator<FileName> >\n      group_name: \n      description: |\n        A filename that should be looked in for positions. Each set of 3 values in that file will represent a Point.  This and \'positions\' cannot be both supplied\n    - name: reset_apps\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        The Apps that will be reset when \'reset_time\' is hit.  These are the App \'numbers\' starting with 0 corresponding to the order of the App positions.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of \'new\' material for that app.\n    - name: reset_time\n      required: No\n      default: !!str 1.79769e+308\n      cpp_type: double\n      group_name: \n      description: |\n        The time at which to reset Apps given by the \'reset_apps\' parameter.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of \'new\' material for that app.\n    - name: type\n      required: No\n      default: !!str FullSolveMultiApp\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /MultiApps/TransientMultiApp\n    description: |\n      \n    parameters:\n    - name: app_type\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: BirdApp BirdTestApp\n      description: |\n        The type of application to build (applications not registered can be loaded with dynamic libraries. Master application type will be used if not provided.\n    - name: bounding_box_inflation\n      required: No\n      default: !!str 0.01\n      cpp_type: double\n      group_name: \n      description: |\n        Relative amount to \'inflate\' the bounding box of this MultiApp.\n    - name: catch_up\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true this will allow failed solves to attempt to \'catch up\' using smaller timesteps.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: detect_steady_state\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true then while sub_cycling a steady state check will be done.  In this mode output will only be done once the MultiApp reaches the target time or steady state is reached\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_begin\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: input_files\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<FileName, std::allocator<FileName> >\n      group_name: \n      description: |\n        The input file for each App.  If this parameter only contains one input file it will be used for all of the Apps.  When using \'positions_from_file\' it is also admissable to provide one input_file per file.\n    - name: interpolate_transfers\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Only valid when sub_cycling.  This allows transferred values to be interpolated over the time frame the MultiApp is executing over when sub_cycling\n    - name: library_path\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Path to search for dynamic libraries (please avoid committing absolute paths in addition to MOOSE_LIBRARY_PATH)\n    - name: max_catch_up_steps\n      required: No\n      default: !!str 2\n      cpp_type: double\n      group_name: \n      description: |\n        Maximum number of steps to allow an app to take when trying to catch back up after a failed solve.\n    - name: max_failures\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of solve failures tolerated while sub_cycling.\n    - name: max_procs_per_app\n      required: No\n      default: !!str 4294967295\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of processors to give to each App in this MultiApp.  Useful for restricting small solves to just a few procs so they don\'t get spread out\n    - name: move_apps\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        Apps, designated by their \'numbers\' starting with 0 corresponding to the order of the App positions, to be moved at move_time to move_positions\n    - name: move_positions\n      required: No\n      default: !!str \n      cpp_type: std::vector<libMesh::Point, std::allocator<libMesh::Point> >\n      group_name: \n      description: |\n        The positions corresponding to each move_app.\n    - name: move_time\n      required: No\n      default: !!str 1.79769e+308\n      cpp_type: double\n      group_name: \n      description: |\n        The time at which Apps designated by move_apps are moved to move_positions.\n    - name: output_in_position\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true this will cause the output from the MultiApp to be \'moved\' by its position vector\n    - name: output_sub_cycles\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true then every sub-cycle will be output.\n    - name: positions\n      required: No\n      default: !!str \n      cpp_type: std::vector<libMesh::Point, std::allocator<libMesh::Point> >\n      group_name: \n      description: |\n        The positions of the App locations.  Each set of 3 values will represent a Point.  This and \'positions_file\' cannot be both supplied. If this and \'positions_file\' are not supplied, a single position (0,0,0) will be used\n    - name: positions_file\n      required: No\n      default: !!str \n      cpp_type: std::vector<FileName, std::allocator<FileName> >\n      group_name: \n      description: |\n        A filename that should be looked in for positions. Each set of 3 values in that file will represent a Point.  This and \'positions\' cannot be both supplied\n    - name: print_sub_cycles\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Toggle the display of sub-cycles on the screen.\n    - name: reset_apps\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        The Apps that will be reset when \'reset_time\' is hit.  These are the App \'numbers\' starting with 0 corresponding to the order of the App positions.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of \'new\' material for that app.\n    - name: reset_time\n      required: No\n      default: !!str 1.79769e+308\n      cpp_type: double\n      group_name: \n      description: |\n        The time at which to reset Apps given by the \'reset_apps\' parameter.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of \'new\' material for that app.\n    - name: steady_state_tol\n      required: No\n      default: !!str 1e-08\n      cpp_type: double\n      group_name: \n      description: |\n        The relative difference between the new solution and the old solution that will be considered to be at steady state\n    - name: sub_cycling\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true to allow this MultiApp to take smaller timesteps than the rest of the simulation.  More than one timestep will be performed for each \'master\' timestep\n    - name: tolerate_failure\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true this MultiApp won\'t participate in dt decisions and will always be fast-forwarded to the current time.\n    - name: type\n      required: No\n      default: !!str TransientMultiApp\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n- name: /NodalKernels\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /NodalKernels/*\n    description: |\n      \n    parameters:\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: isObjectAction\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates that this is a MooseObjectAction.\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /NodalKernels/ConstantRate\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: rate\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The constant rate in \'du/dt = rate\'\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ConstantRate\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /NodalKernels/TimeDerivativeNodalKernel\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str TimeDerivativeNodalKernel\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /NodalKernels/UserForcingFunctionNodalKernel\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The forcing function\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The name of auxiliary variables to save this BC\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str UserForcingFunctionNodalKernel\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n- name: /NodalNormals\n  description: |\n    \n  parameters:\n  - name: boundary\n    required: No\n    default: !!str ANY_BOUNDARY_ID \n    cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n    group_name: \n    description: |\n      The boundary ID or name where the normals will be computed\n  - name: corner_boundary\n    required: No\n    default: !!str \n    cpp_type: BoundaryName\n    group_name: \n    description: |\n      boundary ID or name with nodes at \'corners\'\n  - name: inactive\n    required: No\n    default: !!str \n    cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n    group_name: \n    description: |\n      If specified blocks matching these identifiers will be skipped.\n  - name: order\n    required: No\n    default: !!str FIRST\n    cpp_type: MooseEnum\n    group_name: \n    options: FIRST SECOND\n    description: |\n      Specifies the order of variables that hold the nodal normals. Needs to match the order of the mesh\n  subblocks:\n- name: /Outputs\n  description: |\n    \n  parameters:\n  - name: append_date\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      When true the date and time are appended to the output filename.\n  - name: append_date_format\n    required: No\n    default: !!str \n    cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n    group_name: \n    description: |\n      The format of the date/time to append (see http://www.cplusplus.com/reference/ctime/strftime).\n  - name: checkpoint\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Create checkpoint files using the default options.\n  - name: color\n    required: No\n    default: !!str 1\n    cpp_type: bool\n    group_name: \n    description: |\n      Set to false to turn off all coloring in all outputs\n  - name: console\n    required: No\n    default: !!str 1\n    cpp_type: bool\n    group_name: \n    description: |\n      Output the results using the default settings for Console output\n  - name: controls\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Enable the screen output of Control systems.\n  - name: csv\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Output the scalar variable and postprocessors to a *.csv file using the default CSV output.\n  - name: dofmap\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Create the dof map .json output file\n  - name: execute_on\n    required: No\n    default: !!str initial timestep_end\n    cpp_type: MultiMooseEnum\n    group_name: \n    options: none initial linear nonlinear timestep_end timestep_begin final failed\n    description: |\n      Set to (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment (default: \'initial timestep_end\')\n  - name: exodus\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Output the results using the default settings for Exodus output\n  - name: file_base\n    required: No\n    default: !!str \n    cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n    group_name: \n    description: |\n      Common file base name to be utilized with all output objects\n  - name: gmv\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Output the results using the default settings for GMV output\n  - name: gnuplot\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Output the scalar and postprocessor results using the default settings for GNUPlot output\n  - name: hide\n    required: No\n    default: !!str \n    cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n    group_name: \n    description: |\n      A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n  - name: inactive\n    required: No\n    default: !!str \n    cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n    group_name: \n    description: |\n      If specified blocks matching these identifiers will be skipped.\n  - name: interval\n    required: No\n    default: !!str 1\n    cpp_type: unsigned int\n    group_name: \n    description: |\n      The interval at which timesteps are output to the solution file\n  - name: nemesis\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Output the results using the default settings for Nemesis output\n  - name: output_if_base_contains\n    required: No\n    default: !!str \n    cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n    group_name: \n    description: |\n      If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n  - name: print_linear_residuals\n    required: No\n    default: !!str 1\n    cpp_type: bool\n    group_name: \n    description: |\n      Enable printing of linear residuals to the screen (Console)\n  - name: print_mesh_changed_info\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      When true, each time the mesh is changed the mesh information is printed\n  - name: print_perf_log\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Enable printing of the performance log to the screen (Console)\n  - name: show\n    required: No\n    default: !!str \n    cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n    group_name: \n    description: |\n      A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n  - name: solution_history\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Print a solution history file (.slh) using the default settings\n  - name: sync_times\n    required: No\n    default: !!str \n    cpp_type: std::vector<double, std::allocator<double> >\n    group_name: \n    description: |\n      Times at which the output and solution is forced to occur\n  - name: tecplot\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Output the results using the default settings for Tecplot output\n  - name: vtk\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Output the results using the default settings for VTKOutput output\n  - name: xda\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Output the results using the default settings for XDA/XDR output (ascii)\n  - name: xdr\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Output the results using the default settings for XDA/XDR output (binary)\n  subblocks:\n  - name: /Outputs/*\n    description: |\n      \n    parameters:\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: isObjectAction\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates that this is a MooseObjectAction.\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /Outputs/CSV\n    description: |\n      \n    parameters:\n    - name: additional_execute_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: align\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Align the outputted csv data by padding the numbers with trailing whitespace\n    - name: append_date\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true the date and time are appended to the output filename.\n    - name: append_date_format\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n    - name: append_restart\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Append existing file on restart\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: delimiter\n      required: No\n      default: !!str ","\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Assign the delimiter (default is \',\'\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time at which this output object stop operating\n    - name: execute_elemental_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of elemental variables\n    - name: execute_input\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of input file information\n    - name: execute_nodal_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of nodal variables\n    - name: execute_on\n      required: No\n      default: !!str initial timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: execute_postprocessors_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \'Variables\'\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Control of when postprocessors are output\n    - name: execute_scalar_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of aux scalar variables\n    - name: execute_scalars_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \'Variables\'\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Control the output of scalar variables\n    - name: execute_system_information\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of the simulation information\n    - name: execute_vector_postprocessors\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of vector postprocessors\n    - name: execute_vector_postprocessors_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \'Variables\'\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Enable/disable the output of VectorPostprocessors\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The desired solution output name without an extension\n    - name: hide\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: \'Variables\'\n      description: |\n        A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \'Timing\'\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'PETSc\'\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'PETSc\'\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_linear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: output_nonlinear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_postprocessors\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of postprocessors\n    - name: precision\n      required: No\n      default: !!str 14\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Set the output precision\n    - name: show\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: \'Variables\'\n      description: |\n        A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: sort_columns\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Toggle the sorting of columns alphabetically.\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Timing\'\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \'Timing\'\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_column\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not the \'time\' column should be written for Postprocessor CSV files\n    - name: time_data\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true and VecptorPostprocessor data exists, write a csv file containing the timestep and time information.\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str CSV\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/Checkpoint\n    description: |\n      \n    parameters:\n    - name: additional_execute_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: append_date\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true the date and time are appended to the output filename.\n    - name: append_date_format\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n    - name: binary\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Toggle the output of binary files\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time at which this output object stop operating\n    - name: execute_on\n      required: No\n      default: !!str initial timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The desired solution output name without an extension\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \'Timing\'\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'PETSc\'\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'PETSc\'\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: num_files\n      required: No\n      default: !!str 2\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of the restart files to save\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_linear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: output_nonlinear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: padding\n      required: No\n      default: !!str 4\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The number of for extension suffix (e.g., out.e-s002)\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time at which this output object begins to operate\n    - name: suffix\n      required: No\n      default: !!str cp\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        This will be appended to the file_base to create the directory name for checkpoint files.\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Timing\'\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \'Timing\'\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str Checkpoint\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/Console\n    description: |\n      \n    parameters:\n    - name: additional_execute_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: all_variable_norms\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Norms\'\n      description: |\n        If true, all variable norms will be printed after each solve\n    - name: append_date\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true the date and time are appended to the output filename.\n    - name: append_date_format\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n    - name: append_restart\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Append existing file on restart\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time at which this output object stop operating\n    - name: execute_elemental_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of elemental variables\n    - name: execute_input\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of input file information\n    - name: execute_input_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \'Variables\'\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Enable/disable the output of the input file\n    - name: execute_nodal_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of nodal variables\n    - name: execute_on\n      required: No\n      default: !!str initial timestep_end initial timestep_begin linear nonlinear failed\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: execute_postprocessors_on\n      required: No\n      default: !!str initial timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \'Variables\'\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Control of when postprocessors are output\n    - name: execute_scalar_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of aux scalar variables\n    - name: execute_scalars_on\n      required: No\n      default: !!str initial timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \'Variables\'\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Control the output of scalar variables\n    - name: execute_system_information\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of the simulation information\n    - name: execute_system_information_on\n      required: No\n      default: !!str initial\n      cpp_type: MultiMooseEnum\n      group_name: \'Variables\'\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Control when the output of the simulation information occurs\n    - name: execute_vector_postprocessors\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of vector postprocessors\n    - name: execute_vector_postprocessors_on\n      required: No\n      default: !!str initial timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \'Variables\'\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Enable/disable the output of VectorPostprocessors\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The desired solution output name without an extension\n    - name: fit_mode\n      required: No\n      default: !!str ENVIRONMENT\n      cpp_type: MooseEnum\n      group_name: \n      options: ENVIRONMENT AUTO 80 120 160\n      description: |\n        Specifies the wrapping mode for post-processor tables that are printed to the screen (ENVIRONMENT: Read "MOOSE_PPS_WIDTH" for desired width, AUTO: Attempt to determine width automatically (serial only), <n>: Desired width\n    - name: hide\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: \'Variables\'\n      description: |\n        A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \'Timing\'\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: libmesh_log\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Performance Log\'\n      description: |\n        Print the libMesh performance log, requires libMesh to be configured with --enable-perflog\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'PETSc\'\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: max_rows\n      required: No\n      default: !!str 15\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The maximum number of postprocessor/scalar values displayed on screen during a timestep (set to 0 for unlimited)\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'PETSc\'\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: outlier_multiplier\n      required: No\n      default: !!str 0.8 2 \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \'Norms\'\n      description: |\n        Multiplier utilized to determine if a residual norm is an outlier. If the variable residual is less than multiplier[0] times the total residual it is colored red. If the variable residual is less than multiplier[1] times the average residual it is colored yellow.\n    - name: outlier_variable_norms\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Norms\'\n      description: |\n        If true, outlier variable norms will be printed after each solve\n    - name: output_file\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Output to the file\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_linear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: output_nonlinear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_postprocessors\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of postprocessors\n    - name: output_screen\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Output to the screen\n    - name: padding\n      required: No\n      default: !!str 4\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The number of for extension suffix (e.g., out.e-s002)\n    - name: perf_header\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \'Perf Log\'\n      description: |\n        Print the libMesh performance log header (requires that \'perf_log = true\')\n    - name: perf_log\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Perf Log\'\n      description: |\n        If true, all performance logs will be printed. The individual log settings will override this option.\n    - name: perf_log_interval\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        If set, the performance log will be printed every n time steps\n    - name: print_mesh_changed_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true, each time the mesh is changed the mesh information is printed\n    - name: scientific_time\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Control the printing of time and dt in scientific notation\n    - name: setup_log\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \'Perf Log\'\n      description: |\n        Toggles the printing of the \'Setup Performance\' log\n    - name: setup_log_early\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Perf Log\'\n      description: |\n        Specifies whether or not the Setup Performance log should be printed before the first time step.  It will still be printed at the end if perf_log is also enabled and likewise disabled if perf_log is false\n    - name: show\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: \'Variables\'\n      description: |\n        A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: show_multiapp_name\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Indent multiapp output using the multiapp name\n    - name: solve_log\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \'Perf Log\'\n      description: |\n        Toggles the printing of the \'Moose Test Performance\' log\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Timing\'\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \'Timing\'\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: system_info\n      required: No\n      default: !!str framework mesh aux nonlinear execution\n      cpp_type: MultiMooseEnum\n      group_name: \'Advanced\'\n      options: framework mesh aux nonlinear execution output\n      description: |\n        List of information types to display (\'framework\', \'mesh\', \'aux\', \'nonlinear\', \'execution\', \'output\')\n    - name: time_column\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not the \'time\' column should be written for Postprocessor CSV files\n    - name: time_data\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true and VecptorPostprocessor data exists, write a csv file containing the timestep and time information.\n    - name: time_precision\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of significant digits that are printed on time related outputs\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str Console\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    - name: verbose\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Print detailed diagnostics on timestep calculation\n    subblocks:\n  - name: /Outputs/ControlOutput\n    description: |\n      \n    parameters:\n    - name: additional_execute_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: clear_after_output\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Clear the active control display after each output.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time at which this output object stop operating\n    - name: execute_on\n      required: No\n      default: !!str initial timestep_begin\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \'Timing\'\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: show_active_objects\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        List active MooseObjects.\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Timing\'\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \'Timing\'\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str ControlOutput\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/DOFMap\n    description: |\n      \n    parameters:\n    - name: additional_execute_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: append_date\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true the date and time are appended to the output filename.\n    - name: append_date_format\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time at which this output object stop operating\n    - name: execute_on\n      required: No\n      default: !!str initial\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The desired solution output name without an extension\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \'Timing\'\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'PETSc\'\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'PETSc\'\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_file\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Output to the file\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_linear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: output_nonlinear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_screen\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Output to the screen\n    - name: padding\n      required: No\n      default: !!str 4\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The number of for extension suffix (e.g., out.e-s002)\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Timing\'\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \'Timing\'\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: system_name\n      required: No\n      default: !!str nl0\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        System to output\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str DOFMap\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/Exodus\n    description: |\n      Object for output data in the Exodus II format\n    parameters:\n    - name: additional_execute_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: append_date\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true the date and time are appended to the output filename.\n    - name: append_date_format\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n    - name: append_oversample\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Append \'_oversample\' to the output file base\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: elemental_as_nodal\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Variables\'\n      description: |\n        Output elemental nonlinear variables as nodal\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time at which this output object stop operating\n    - name: execute_elemental_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \'Variables\'\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Control the output of elemental variables\n    - name: execute_elemental_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of elemental variables\n    - name: execute_input\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of input file information\n    - name: execute_input_on\n      required: No\n      default: !!str initial\n      cpp_type: MultiMooseEnum\n      group_name: \'Variables\'\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Enable/disable the output of the input file\n    - name: execute_nodal_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \'Variables\'\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Control the output of nodal variables\n    - name: execute_nodal_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of nodal variables\n    - name: execute_on\n      required: No\n      default: !!str initial timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: execute_postprocessors_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \'Variables\'\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Control of when postprocessors are output\n    - name: execute_scalar_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of aux scalar variables\n    - name: execute_scalars_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \'Variables\'\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Control the output of scalar variables\n    - name: execute_system_information\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of the simulation information\n    - name: execute_vector_postprocessors\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of vector postprocessors\n    - name: file\n      required: No\n      default: !!str \n      cpp_type: MeshFileName\n      group_name: \'Oversampling\'\n      description: |\n        The name of the mesh file to read, for oversampling\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The desired solution output name without an extension\n    - name: hide\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: \'Variables\'\n      description: |\n        A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \'Timing\'\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'PETSc\'\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'PETSc\'\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_linear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: output_material_properties\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Materials\'\n      description: |\n        Flag indicating if material properties should be output\n    - name: output_nonlinear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_postprocessors\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of postprocessors\n    - name: oversample\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true to enable oversampling\n    - name: overwrite\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true the latest timestep will overwrite the existing file, so only a single timestep exists.\n    - name: padding\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The number of for extension suffix (e.g., out.e-s002)\n    - name: position\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \'Oversampling\'\n      description: |\n        Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n    - name: refinements\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Oversampling\'\n      description: |\n        Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n    - name: scalar_as_nodal\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Variables\'\n      description: |\n        Output scalar variables as nodal\n    - name: sequence\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable sequential file output (enabled by default when \'use_displace = true\', otherwise defaults to false\n    - name: show\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: \'Variables\'\n      description: |\n        A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: show_material_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Materials\'\n      description: |\n        List of materialproperties that should be written to the output\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Timing\'\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \'Timing\'\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str Exodus\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    - name: use_problem_dimension\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Use the problem dimension to the mesh output. Set to false when outputting lower dimensional meshes embedded in a higher dimensional space.\n    subblocks:\n  - name: /Outputs/GMV\n    description: |\n      Object for outputting data in the GMV format\n    parameters:\n    - name: additional_execute_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: append_date\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true the date and time are appended to the output filename.\n    - name: append_date_format\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n    - name: append_oversample\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Append \'_oversample\' to the output file base\n    - name: binary\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Output the file in binary format\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time at which this output object stop operating\n    - name: execute_elemental_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of elemental variables\n    - name: execute_input\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of input file information\n    - name: execute_nodal_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of nodal variables\n    - name: execute_on\n      required: No\n      default: !!str initial timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: execute_scalar_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of aux scalar variables\n    - name: execute_system_information\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of the simulation information\n    - name: execute_vector_postprocessors\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of vector postprocessors\n    - name: file\n      required: No\n      default: !!str \n      cpp_type: MeshFileName\n      group_name: \'Oversampling\'\n      description: |\n        The name of the mesh file to read, for oversampling\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The desired solution output name without an extension\n    - name: hide\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: \'Variables\'\n      description: |\n        A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \'Timing\'\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'PETSc\'\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'PETSc\'\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_linear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: output_nonlinear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_postprocessors\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of postprocessors\n    - name: oversample\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true to enable oversampling\n    - name: padding\n      required: No\n      default: !!str 4\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The number of for extension suffix (e.g., out.e-s002)\n    - name: position\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \'Oversampling\'\n      description: |\n        Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n    - name: refinements\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Oversampling\'\n      description: |\n        Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n    - name: show\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: \'Variables\'\n      description: |\n        A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Timing\'\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \'Timing\'\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str GMV\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/Gnuplot\n    description: |\n      \n    parameters:\n    - name: additional_execute_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: append_date\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true the date and time are appended to the output filename.\n    - name: append_date_format\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n    - name: append_restart\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Append existing file on restart\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time at which this output object stop operating\n    - name: execute_elemental_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of elemental variables\n    - name: execute_input\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of input file information\n    - name: execute_nodal_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of nodal variables\n    - name: execute_on\n      required: No\n      default: !!str initial timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: execute_postprocessors_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \'Variables\'\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Control of when postprocessors are output\n    - name: execute_scalar_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of aux scalar variables\n    - name: execute_scalars_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \'Variables\'\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Control the output of scalar variables\n    - name: execute_system_information\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of the simulation information\n    - name: execute_vector_postprocessors\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of vector postprocessors\n    - name: execute_vector_postprocessors_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \'Variables\'\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Enable/disable the output of VectorPostprocessors\n    - name: extension\n      required: No\n      default: !!str png\n      cpp_type: MooseEnum\n      group_name: \n      options: png ps gif\n      description: |\n        GNU plot file extension\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The desired solution output name without an extension\n    - name: hide\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: \'Variables\'\n      description: |\n        A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \'Timing\'\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'PETSc\'\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'PETSc\'\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_linear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: output_nonlinear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_postprocessors\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of postprocessors\n    - name: padding\n      required: No\n      default: !!str 4\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The number of for extension suffix (e.g., out.e-s002)\n    - name: show\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: \'Variables\'\n      description: |\n        A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Timing\'\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \'Timing\'\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_column\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not the \'time\' column should be written for Postprocessor CSV files\n    - name: time_data\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true and VecptorPostprocessor data exists, write a csv file containing the timestep and time information.\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str Gnuplot\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/MaterialPropertyDebugOutput\n    description: |\n      \n    parameters:\n    - name: additional_execute_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time at which this output object stop operating\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \'Timing\'\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Timing\'\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \'Timing\'\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str MaterialPropertyDebugOutput\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/Nemesis\n    description: |\n      Object for output data in the Nemesis format\n    parameters:\n    - name: additional_execute_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: append_date\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true the date and time are appended to the output filename.\n    - name: append_date_format\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time at which this output object stop operating\n    - name: execute_elemental_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of elemental variables\n    - name: execute_input\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of input file information\n    - name: execute_input_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \'Variables\'\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Enable/disable the output of the input file\n    - name: execute_nodal_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of nodal variables\n    - name: execute_on\n      required: No\n      default: !!str initial timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: execute_postprocessors_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \'Variables\'\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Control of when postprocessors are output\n    - name: execute_scalar_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of aux scalar variables\n    - name: execute_scalars_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \'Variables\'\n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Control the output of scalar variables\n    - name: execute_system_information\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of the simulation information\n    - name: execute_vector_postprocessors\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of vector postprocessors\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The desired solution output name without an extension\n    - name: hide\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: \'Variables\'\n      description: |\n        A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \'Timing\'\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'PETSc\'\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'PETSc\'\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_linear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: output_nonlinear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_postprocessors\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of postprocessors\n    - name: padding\n      required: No\n      default: !!str 4\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The number of for extension suffix (e.g., out.e-s002)\n    - name: show\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: \'Variables\'\n      description: |\n        A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Timing\'\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \'Timing\'\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str Nemesis\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/SolutionHistory\n    description: |\n      \n    parameters:\n    - name: additional_execute_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: append_date\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true the date and time are appended to the output filename.\n    - name: append_date_format\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time at which this output object stop operating\n    - name: execute_on\n      required: No\n      default: !!str initial timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The desired solution output name without an extension\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \'Timing\'\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'PETSc\'\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'PETSc\'\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_linear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: output_nonlinear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: padding\n      required: No\n      default: !!str 4\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The number of for extension suffix (e.g., out.e-s002)\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Timing\'\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \'Timing\'\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str SolutionHistory\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/Tecplot\n    description: |\n      Object for outputting data in the Tecplot format\n    parameters:\n    - name: additional_execute_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: append_date\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true the date and time are appended to the output filename.\n    - name: append_date_format\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n    - name: append_oversample\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Append \'_oversample\' to the output file base\n    - name: ascii_append\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true, append to an existing ASCII file rather than creating a new file each time\n    - name: binary\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set Tecplot files to output in binary format\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time at which this output object stop operating\n    - name: execute_elemental_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of elemental variables\n    - name: execute_input\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of input file information\n    - name: execute_nodal_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of nodal variables\n    - name: execute_on\n      required: No\n      default: !!str initial timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: execute_scalar_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of aux scalar variables\n    - name: execute_system_information\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of the simulation information\n    - name: execute_vector_postprocessors\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of vector postprocessors\n    - name: file\n      required: No\n      default: !!str \n      cpp_type: MeshFileName\n      group_name: \'Oversampling\'\n      description: |\n        The name of the mesh file to read, for oversampling\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The desired solution output name without an extension\n    - name: hide\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: \'Variables\'\n      description: |\n        A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \'Timing\'\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'PETSc\'\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'PETSc\'\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_linear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: output_nonlinear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_postprocessors\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of postprocessors\n    - name: oversample\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true to enable oversampling\n    - name: padding\n      required: No\n      default: !!str 4\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The number of for extension suffix (e.g., out.e-s002)\n    - name: position\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \'Oversampling\'\n      description: |\n        Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n    - name: refinements\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Oversampling\'\n      description: |\n        Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n    - name: show\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: \'Variables\'\n      description: |\n        A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Timing\'\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \'Timing\'\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str Tecplot\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/TopResidualDebugOutput\n    description: |\n      \n    parameters:\n    - name: additional_execute_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time at which this output object stop operating\n    - name: execute_on\n      required: No\n      default: !!str linear nonlinear timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \'Timing\'\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'PETSc\'\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'PETSc\'\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: num_residuals\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of top residuals to print out (0 = no output)\n    - name: output_linear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: output_nonlinear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Timing\'\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \'Timing\'\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str TopResidualDebugOutput\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/VariableResidualNormsDebugOutput\n    description: |\n      \n    parameters:\n    - name: additional_execute_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time at which this output object stop operating\n    - name: execute_on\n      required: No\n      default: !!str nonlinear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \'Timing\'\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'PETSc\'\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'PETSc\'\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_linear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: output_nonlinear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Timing\'\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \'Timing\'\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str VariableResidualNormsDebugOutput\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/XDA\n    description: |\n      Object for outputting data in the XDA/XDR format\n    parameters:\n    - name: additional_execute_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: append_date\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true the date and time are appended to the output filename.\n    - name: append_date_format\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n    - name: append_oversample\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Append \'_oversample\' to the output file base\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time at which this output object stop operating\n    - name: execute_elemental_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of elemental variables\n    - name: execute_input\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of input file information\n    - name: execute_nodal_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of nodal variables\n    - name: execute_on\n      required: No\n      default: !!str initial timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: execute_scalar_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of aux scalar variables\n    - name: execute_system_information\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of the simulation information\n    - name: execute_vector_postprocessors\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of vector postprocessors\n    - name: file\n      required: No\n      default: !!str \n      cpp_type: MeshFileName\n      group_name: \'Oversampling\'\n      description: |\n        The name of the mesh file to read, for oversampling\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The desired solution output name without an extension\n    - name: hide\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: \'Variables\'\n      description: |\n        A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \'Timing\'\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'PETSc\'\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'PETSc\'\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_linear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: output_nonlinear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_postprocessors\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of postprocessors\n    - name: oversample\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true to enable oversampling\n    - name: padding\n      required: No\n      default: !!str 4\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The number of for extension suffix (e.g., out.e-s002)\n    - name: position\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \'Oversampling\'\n      description: |\n        Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n    - name: refinements\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Oversampling\'\n      description: |\n        Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n    - name: show\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: \'Variables\'\n      description: |\n        A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Timing\'\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \'Timing\'\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str XDA\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/XDR\n    description: |\n      Object for outputting data in the XDA/XDR format\n    parameters:\n    - name: additional_execute_on\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: append_date\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true the date and time are appended to the output filename.\n    - name: append_date_format\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n    - name: append_oversample\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Append \'_oversample\' to the output file base\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time at which this output object stop operating\n    - name: execute_elemental_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of elemental variables\n    - name: execute_input\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of input file information\n    - name: execute_nodal_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of nodal variables\n    - name: execute_on\n      required: No\n      default: !!str initial timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin final failed\n      description: |\n        Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n    - name: execute_scalar_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of aux scalar variables\n    - name: execute_system_information\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of the simulation information\n    - name: execute_vector_postprocessors\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of vector postprocessors\n    - name: file\n      required: No\n      default: !!str \n      cpp_type: MeshFileName\n      group_name: \'Oversampling\'\n      description: |\n        The name of the mesh file to read, for oversampling\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The desired solution output name without an extension\n    - name: hide\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: \'Variables\'\n      description: |\n        A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \'Timing\'\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'PETSc\'\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'PETSc\'\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'PETSc\'\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_linear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: output_nonlinear\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_postprocessors\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the output of postprocessors\n    - name: oversample\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true to enable oversampling\n    - name: padding\n      required: No\n      default: !!str 4\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The number of for extension suffix (e.g., out.e-s002)\n    - name: position\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \'Oversampling\'\n      description: |\n        Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n    - name: refinements\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Oversampling\'\n      description: |\n        Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n    - name: show\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: \'Variables\'\n      description: |\n        A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Timing\'\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \'Timing\'\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: \'Timing\'\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str XDR\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n- name: /Postprocessors\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /Postprocessors/*\n    description: |\n      \n    parameters:\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: isObjectAction\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates that this is a MooseObjectAction.\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /Postprocessors/AreaPostprocessor\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str AreaPostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/AverageElementSize\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str AverageElementSize\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /Postprocessors/AverageGrainVolume\n    description: |\n      Calculate average grain area in a polycrystal\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: feature_counter\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The FeatureFloodCount UserObject to get values from.\n    - name: grain_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        number of grains to create\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Array of coupled variables (num_name)\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str AverageGrainVolume\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: var_name_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Array of coupled variables (base_name)\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variables\n    subblocks:\n  - name: /Postprocessors/AverageNodalVariableValue\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str AverageNodalVariableValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: unique_node_execute\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /Postprocessors/AxisymmetricCenterlineAverageValue\n    description: |\n      Computes the average value of a variable on a sideset located along the centerline of an axisymmetric model.\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str AxisymmetricCenterlineAverageValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /Postprocessors/CavityPressurePostprocessor\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: cavity_pressure_uo\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The CavityPressureUserObject that computes the initial moles\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: quantity\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The quantity to report\n    - name: type\n      required: No\n      default: !!str CavityPressurePostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/ChangeOverTimestepPostprocessor\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: compute_relative_change\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Compute magnitude of relative change instead of change\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: postprocessor\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the postprocessor\n    - name: type\n      required: No\n      default: !!str ChangeOverTimestepPostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/CrackFrontData\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: crack_front_definition\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The CrackFrontDefinition user object name\n    - name: crack_front_point_index\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index of the point on the crack front where data is to be reported\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        A scale factor to be applied to the reported quantity\n    - name: type\n      required: No\n      default: !!str CrackFrontData\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of a variable whose value at the crack front is to be reported\n    subblocks:\n  - name: /Postprocessors/CumulativeValuePostprocessor\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: postprocessor\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the postprocessor\n    - name: type\n      required: No\n      default: !!str CumulativeValuePostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/DifferencePostprocessor\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str DifferencePostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value1\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        First value\n    - name: value2\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        Second value\n    subblocks:\n  - name: /Postprocessors/ElementAverageTimeDerivative\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementAverageTimeDerivative\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /Postprocessors/ElementAverageValue\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementAverageValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /Postprocessors/ElementExtremeValue\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementExtremeValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value_type\n      required: No\n      default: !!str max\n      cpp_type: MooseEnum\n      group_name: \n      options: max min\n      description: |\n        Type of extreme value to return. \'max\' returns the maximum value. \'min\' returns the minimum value.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /Postprocessors/ElementH1Error\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: p\n      required: No\n      default: !!str 2\n      cpp_type: double\n      group_name: \n      description: |\n        The exponent used in the norm.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementH1Error\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /Postprocessors/ElementH1SemiError\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementH1SemiError\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /Postprocessors/ElementIntegralMaterialProperty\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mat_prop\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The name of the material property\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementIntegralMaterialProperty\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/ElementIntegralVariablePostprocessor\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementIntegralVariablePostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /Postprocessors/ElementL2Difference\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: other_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable to compare to\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementL2Difference\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /Postprocessors/ElementL2Error\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementL2Error\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /Postprocessors/ElementL2Norm\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementL2Norm\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /Postprocessors/ElementVectorL2Error\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function_x\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: function_y\n      required: No\n      default: !!str 0\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: function_z\n      required: No\n      default: !!str 0\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementVectorL2Error\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: var_x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The FE solution in x direction\n    - name: var_y\n      required: No\n      default: !!str 0\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The FE solution in y direction\n    - name: var_z\n      required: No\n      default: !!str 0\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The FE solution in z direction\n    subblocks:\n  - name: /Postprocessors/ElementW1pError\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: p\n      required: No\n      default: !!str 2\n      cpp_type: double\n      group_name: \n      description: |\n        The exponent used in the norm.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementW1pError\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /Postprocessors/ElementalVariableValue\n    description: |\n      Outputs an elemental variable value at a particular location\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: elementid\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The ID of the element where we monitor\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str ElementalVariableValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to be monitored\n    subblocks:\n  - name: /Postprocessors/EmptyPostprocessor\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str EmptyPostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/ExecutionerAttributeReporter\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str ExecutionerAttributeReporter\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/FauxGrainTracker\n    description: |\n      Fake grain tracker object for cases where the number of grains is equal to the number of order parameters.\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: compute_halo_maps\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to communicate proper halo information to all ranks\n    - name: compute_var_to_feature_map\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to compute the active vars to features map\n    - name: condense_map_info\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether we condense all the node values when in multimap mode (default: false)\n    - name: connecting_threshold\n      required: No\n      default: !!str 0.09\n      cpp_type: double\n      group_name: \n      description: |\n        The threshold for which an existing feature may be extended (defaults to "threshold")\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: enable_var_coloring\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to populate the variable index map.\n    - name: error_on_grain_creation\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Terminate with an error if a grain is created (does not include initial callback to start simulation)\n    - name: execute_on\n      required: No\n      default: !!str initial timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: flood_entity_type\n      required: No\n      default: !!str ELEMENTAL\n      cpp_type: MooseEnum\n      group_name: \n      options: NODAL ELEMENTAL\n      description: |\n        Determines whether the flood algorithm runs on nodes or elements\n    - name: halo_level\n      required: No\n      default: !!str 2\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The thickness of the halo surrounding each feature.\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Array of coupled variables (num_name)\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: polycrystal_ic_uo\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Optional: Polycrystal IC object\n    - name: remap_grains\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates whether remapping should be done or not (default: true)\n    - name: reserve_op\n      required: No\n      default: !!str 0\n      cpp_type: unsigned short\n      group_name: \n      description: |\n        Indicates the number of reserved ops (variables that cannot be remapped to)\n    - name: reserve_op_threshold\n      required: No\n      default: !!str 0.95\n      cpp_type: double\n      group_name: \n      description: |\n        Threshold for locating a new feature on the reserved op variable(s)\n    - name: threshold\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        The threshold value for which a new feature may be started\n    - name: tracking_step\n      required: No\n      default: !!str 0\n      cpp_type: int\n      group_name: \n      description: |\n        The timestep for when we should start tracking grains\n    - name: type\n      required: No\n      default: !!str FauxGrainTracker\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_global_numbering\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determine whether or not global numbers are used to label features on multiple maps (default: true)\n    - name: use_less_than_threshold_comparison\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Controls whether features are defined to be less than or greater than the threshold value.\n    - name: use_single_map\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n    - name: var_name_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Array of coupled variables (base_name)\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variables\n    subblocks:\n  - name: /Postprocessors/FeatureFloodCount\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: compute_halo_maps\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to communicate proper halo information to all ranks\n    - name: compute_var_to_feature_map\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to compute the active vars to features map\n    - name: condense_map_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether we condense all the node values when in multimap mode (default: false)\n    - name: connecting_threshold\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The threshold for which an existing feature may be extended (defaults to "threshold")\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: enable_var_coloring\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to populate the variable index map.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: flood_entity_type\n      required: No\n      default: !!str ELEMENTAL\n      cpp_type: MooseEnum\n      group_name: \n      options: NODAL ELEMENTAL\n      description: |\n        Determines whether the flood algorithm runs on nodes or elements\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: threshold\n      required: No\n      default: !!str 0.5\n      cpp_type: double\n      group_name: \n      description: |\n        The threshold value for which a new feature may be started\n    - name: type\n      required: No\n      default: !!str FeatureFloodCount\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_global_numbering\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determine whether or not global numbers are used to label features on multiple maps (default: true)\n    - name: use_less_than_threshold_comparison\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Controls whether features are defined to be less than or greater than the threshold value.\n    - name: use_single_map\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable(s) for which to find connected regions of interests, i.e. "features".\n    subblocks:\n  - name: /Postprocessors/FeatureVolumeFraction\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: equil_fraction\n      required: No\n      default: !!str -1\n      cpp_type: double\n      group_name: \n      description: |\n        Equilibrium volume fraction of 2nd phase for Avrami analysis\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: feature_volumes\n      required: Yes\n      default: !!str \n      cpp_type: VectorPostprocessorName\n      group_name: \n      description: |\n        The feature volume VectorPostprocessorValue.\n    - name: mesh_volume\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        Postprocessor from which to get mesh volume\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str FeatureVolumeFraction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value_type\n      required: No\n      default: !!str VOLUME_FRACTION\n      cpp_type: MooseEnum\n      group_name: \n      options: VOLUME_FRACTION AVRAMI\n      description: |\n        The value to output (VOLUME_FRACTION or AVRAMI value)\n    subblocks:\n  - name: /Postprocessors/FindValueOnLine\n    description: |\n      Find a specific target value along a sampling line. The variable values along the line should change monotonically. The target value is searched using a bisection algorithm.\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depth\n      required: No\n      default: !!str 36\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of bisections to perform.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: end_point\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        End point of the sampling line.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: start_point\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        Start point of the sampling line.\n    - name: target\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Target value to locate.\n    - name: tol\n      required: No\n      default: !!str 1e-10\n      cpp_type: double\n      group_name: \n      description: |\n        Stop search if a value is found that is equal to the target with this tolerance applied.\n    - name: type\n      required: No\n      default: !!str FindValueOnLine\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variable to inspect\n    subblocks:\n  - name: /Postprocessors/FunctionSideIntegral\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: No\n      default: !!str 1\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        This postprocessor will return the integral of this function over the boundary\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str FunctionSideIntegral\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/FunctionValuePostprocessor\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The function which supplies the postprocessor value.\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: point\n      required: No\n      default: !!str 0 0 0\n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        A point in space to be given to the function Default: (0, 0, 0)\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        A scale factor to be applied to the function\n    - name: type\n      required: No\n      default: !!str FunctionValuePostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/GrainBoundaryArea\n    description: |\n      Calculate total grain boundary length in 2D and area in 3D\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: grains_per_side\n      required: No\n      default: !!str 2\n      cpp_type: double\n      group_name: \n      description: |\n        Number of order parameters contacting a boundary (should be 2.0 in polycrystals and 1.0 for dispersed particles)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Array of coupled variables (num_name)\n    - name: op_range\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Range over which order parameters change across an interface. By default order parameters are assumed to vary from 0 to 1\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str GrainBoundaryArea\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variables\n    - name: var_name_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Array of coupled variables (base_name)\n    subblocks:\n  - name: /Postprocessors/GrainTracker\n    description: |\n      Grain Tracker object for running reduced order parameter simulations without grain coalescence.\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: compute_halo_maps\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to communicate proper halo information to all ranks\n    - name: compute_var_to_feature_map\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to compute the active vars to features map\n    - name: condense_map_info\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether we condense all the node values when in multimap mode (default: false)\n    - name: connecting_threshold\n      required: No\n      default: !!str 0.09\n      cpp_type: double\n      group_name: \n      description: |\n        The threshold for which an existing feature may be extended (defaults to "threshold")\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: enable_var_coloring\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to populate the variable index map.\n    - name: error_on_grain_creation\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Terminate with an error if a grain is created (does not include initial callback to start simulation)\n    - name: execute_on\n      required: No\n      default: !!str initial timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: flood_entity_type\n      required: No\n      default: !!str ELEMENTAL\n      cpp_type: MooseEnum\n      group_name: \n      options: NODAL ELEMENTAL\n      description: |\n        Determines whether the flood algorithm runs on nodes or elements\n    - name: halo_level\n      required: No\n      default: !!str 2\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The thickness of the halo surrounding each feature.\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Array of coupled variables (num_name)\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: polycrystal_ic_uo\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Optional: Polycrystal IC object\n    - name: remap_grains\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates whether remapping should be done or not (default: true)\n    - name: reserve_op\n      required: No\n      default: !!str 0\n      cpp_type: unsigned short\n      group_name: \n      description: |\n        Indicates the number of reserved ops (variables that cannot be remapped to)\n    - name: reserve_op_threshold\n      required: No\n      default: !!str 0.95\n      cpp_type: double\n      group_name: \n      description: |\n        Threshold for locating a new feature on the reserved op variable(s)\n    - name: threshold\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        The threshold value for which a new feature may be started\n    - name: tracking_step\n      required: No\n      default: !!str 0\n      cpp_type: int\n      group_name: \n      description: |\n        The timestep for when we should start tracking grains\n    - name: type\n      required: No\n      default: !!str GrainTracker\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_global_numbering\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determine whether or not global numbers are used to label features on multiple maps (default: true)\n    - name: use_less_than_threshold_comparison\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Controls whether features are defined to be less than or greater than the threshold value.\n    - name: use_single_map\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n    - name: var_name_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Array of coupled variables (base_name)\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable(s) for which to find connected regions of interests, i.e. "features".\n    subblocks:\n  - name: /Postprocessors/GrainTrackerElasticity\n    description: |\n      Grain Tracker object for running reduced order parameter simulations without grain coalescence.\n    parameters:\n    - name: C_ijkl\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Unrotated stiffness tensor\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: compute_halo_maps\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to communicate proper halo information to all ranks\n    - name: compute_var_to_feature_map\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to compute the active vars to features map\n    - name: condense_map_info\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether we condense all the node values when in multimap mode (default: false)\n    - name: connecting_threshold\n      required: No\n      default: !!str 0.09\n      cpp_type: double\n      group_name: \n      description: |\n        The threshold for which an existing feature may be extended (defaults to "threshold")\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: enable_var_coloring\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to populate the variable index map.\n    - name: error_on_grain_creation\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Terminate with an error if a grain is created (does not include initial callback to start simulation)\n    - name: euler_angle_provider\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Name of Euler angle provider user object\n    - name: execute_on\n      required: No\n      default: !!str initial timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: fill_method\n      required: No\n      default: !!str symmetric9\n      cpp_type: MooseEnum\n      group_name: \n      options: antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic symmetric_isotropic_E_nu antisymmetric_isotropic axisymmetric_rz general principal\n      description: |\n        The fill method\n    - name: flood_entity_type\n      required: No\n      default: !!str ELEMENTAL\n      cpp_type: MooseEnum\n      group_name: \n      options: NODAL ELEMENTAL\n      description: |\n        Determines whether the flood algorithm runs on nodes or elements\n    - name: halo_level\n      required: No\n      default: !!str 2\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The thickness of the halo surrounding each feature.\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Array of coupled variables (num_name)\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: polycrystal_ic_uo\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Optional: Polycrystal IC object\n    - name: random_rotations\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Generate random rotations when the Euler Angle provider runs out of data (otherwise error out)\n    - name: remap_grains\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates whether remapping should be done or not (default: true)\n    - name: reserve_op\n      required: No\n      default: !!str 0\n      cpp_type: unsigned short\n      group_name: \n      description: |\n        Indicates the number of reserved ops (variables that cannot be remapped to)\n    - name: reserve_op_threshold\n      required: No\n      default: !!str 0.95\n      cpp_type: double\n      group_name: \n      description: |\n        Threshold for locating a new feature on the reserved op variable(s)\n    - name: threshold\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        The threshold value for which a new feature may be started\n    - name: tracking_step\n      required: No\n      default: !!str 0\n      cpp_type: int\n      group_name: \n      description: |\n        The timestep for when we should start tracking grains\n    - name: type\n      required: No\n      default: !!str GrainTrackerElasticity\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_global_numbering\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determine whether or not global numbers are used to label features on multiple maps (default: true)\n    - name: use_less_than_threshold_comparison\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Controls whether features are defined to be less than or greater than the threshold value.\n    - name: use_single_map\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n    - name: var_name_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Array of coupled variables (base_name)\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable(s) for which to find connected regions of interests, i.e. "features".\n    subblocks:\n  - name: /Postprocessors/InteractionIntegral\n    description: |\n      \n    parameters:\n    - name: K_factor\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Conversion factor between interaction integral and stress intensity factor K\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: crack_front_definition\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The CrackFrontDefinition user object name\n    - name: crack_front_point_index\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index of the point on the crack front corresponding to this q function\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: poissons_ratio\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Poisson\'s ratio for the material.\n    - name: q_function_type\n      required: No\n      default: !!str Geometry\n      cpp_type: MooseEnum\n      group_name: \n      options: Geometry Topology\n      description: |\n        The method used to define the integration domain. Options are: Geometry Topology\n    - name: ring_index\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Ring ID\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: sif_mode\n      required: Yes\n      default: !!str KI\n      cpp_type: MooseEnum\n      group_name: \n      options: KI KII KIII T\n      description: |\n        Stress intensity factor to calculate. Choices are: KI KII KIII T\n    - name: symmetry_plane\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Account for a symmetry plane passing through the plane of the crack, normal to the specified axis (0=x, 1=y, 2=z)\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The temperature (optional). Must be provided to correctly compute stress intensity factors in models with thermal strain gradients.\n    - name: type\n      required: No\n      default: !!str InteractionIntegral\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: youngs_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Young\'s modulus of the material.\n    subblocks:\n  - name: /Postprocessors/JIntegral\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: convert_J_to_K\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Convert J-integral to stress intensity factor K.\n    - name: crack_front_definition\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The CrackFrontDefinition user object name\n    - name: crack_front_point_index\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index of the point on the crack front corresponding to this q function\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: poissons_ratio\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Poisson\'s ratio\n    - name: q_function_type\n      required: No\n      default: !!str Geometry\n      cpp_type: MooseEnum\n      group_name: \n      options: Geometry Topology\n      description: |\n        The method used to define the integration domain. Options are: Geometry Topology\n    - name: ring_first\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        First Ring ID\n    - name: ring_index\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Ring ID\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: symmetry_plane\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Account for a symmetry plane passing through the plane of the crack, normal to the specified axis (0=x, 1=y, 2=z)\n    - name: type\n      required: No\n      default: !!str JIntegral\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: youngs_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Young\'s modulus of the material.\n    subblocks:\n  - name: /Postprocessors/LinearCombinationPostprocessor\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: b\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Additional value to add to sum\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: pp_coefs\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        List of linear combination coefficients for each post-processor\n    - name: pp_names\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<PostprocessorName, std::allocator<PostprocessorName> >\n      group_name: \n      description: |\n        List of post-processors\n    - name: type\n      required: No\n      default: !!str LinearCombinationPostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/Mass\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str Mass\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /Postprocessors/MaterialTensorIntegral\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: index_i\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index i of ij for the tensor to output (0, 1, 2)\n    - name: index_j\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index j of ij for the tensor to output (0, 1, 2)\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: rank_two_tensor\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The rank two material tensor name\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialTensorIntegral\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/MaterialTimeStepPostprocessor\n    description: |\n      This postprocessor estimates a timestep that reduces the increment change in a aux variable below a given threshold.\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialTimeStepPostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/MemoryUsage\n    description: |\n      Memory usage statistics for the running simulation.\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: mem_type\n      required: No\n      default: !!str virtual_memory\n      cpp_type: MooseEnum\n      group_name: \n      options: virtual_memory physical_memory page_faults\n      description: |\n        Memory metric to report.\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: report_peak_value\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        If the postprocessor is executed more than one during a time step, report the aggregated peak value.\n    - name: type\n      required: No\n      default: !!str MemoryUsage\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value_type\n      required: No\n      default: !!str total\n      cpp_type: MooseEnum\n      group_name: \n      options: total average max_process min_processs\n      description: |\n        Aggregation method to apply to the requested memory metric.\n    subblocks:\n  - name: /Postprocessors/MixedModeEquivalentK\n    description: |\n      \n    parameters:\n    - name: KIII_name\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the KIII postprocessor\n    - name: KII_name\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the KII postprocessor\n    - name: KI_name\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the KI postprocessor\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: poissons_ratio\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Poisson\'s ratio for the material.\n    - name: type\n      required: No\n      default: !!str MixedModeEquivalentK\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/NodalExtremeValue\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalExtremeValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: unique_node_execute\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value_type\n      required: No\n      default: !!str max\n      cpp_type: MooseEnum\n      group_name: \n      options: max min\n      description: |\n        Type of extreme value to return. \'max\' returns the maximum value. \'min\' returns the minimum value.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /Postprocessors/NodalL2Error\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalL2Error\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: unique_node_execute\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /Postprocessors/NodalL2Norm\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalL2Norm\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: unique_node_execute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /Postprocessors/NodalMaxValue\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalMaxValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: unique_node_execute\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /Postprocessors/NodalProxyMaxValue\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalProxyMaxValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: unique_node_execute\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /Postprocessors/NodalSum\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalSum\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: unique_node_execute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /Postprocessors/NodalVariableValue\n    description: |\n      Outputs values of a nodal variable at a particular location\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: nodeid\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The ID of the node where we monitor\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        A scale factor to be applied to the variable\n    - name: type\n      required: No\n      default: !!str NodalVariableValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to be monitored\n    subblocks:\n  - name: /Postprocessors/NumDOFs\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: system\n      required: No\n      default: !!str ALL\n      cpp_type: MooseEnum\n      group_name: \n      options: NL AUX ALL\n      description: |\n        The system(s) to retrieve the number of DOFs from (NL, AUX, ALL). Default == ALL\n    - name: type\n      required: No\n      default: !!str NumDOFs\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/NumElems\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: elem_filter\n      required: No\n      default: !!str active\n      cpp_type: MooseEnum\n      group_name: \n      options: active total\n      description: |\n        The type of elements to include in the count (active, total). Default == active\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str NumElems\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/NumLinearIterations\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str NumLinearIterations\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/NumNodes\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str NumNodes\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/NumNonlinearIterations\n    description: |\n      Outputs the number of nonlinear iterations\n    parameters:\n    - name: accumulate_over_step\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When set to true, accumulates to count the total over all Picard iterations for each step\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str NumNonlinearIterations\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/NumPicardIterations\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str NumPicardIterations\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/NumResidualEvaluations\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str NumResidualEvaluations\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/NumVars\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: system\n      required: No\n      default: !!str nonlinear\n      cpp_type: MooseEnum\n      group_name: \n      options: nonlinear auxiliary\n      description: |\n        The system for which you want to print the number of variables.\n    - name: type\n      required: No\n      default: !!str NumVars\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/PFCElementEnergyIntegral\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: temp\n      required: No\n      default: !!str 1833\n      cpp_type: double\n      group_name: \n      description: |\n        Temperature of simulation\n    - name: type\n      required: No\n      default: !!str PFCElementEnergyIntegral\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /Postprocessors/PercentChangePostprocessor\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: postprocessor\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the postprocessor used for exit criterion\n    - name: type\n      required: No\n      default: !!str PercentChangePostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/PerformanceData\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: category\n      required: No\n      default: !!str Execution\n      cpp_type: MooseEnum\n      group_name: \n      options: Application Execution Output Setup Utility\n      description: |\n        The category for the event\n    - name: column\n      required: No\n      default: !!str total_time_with_sub\n      cpp_type: MooseEnum\n      group_name: \n      options: n_calls total_time average_time total_time_with_sub average_time_with_sub percent_of_active_time percent_of_active_time_with_sub\n      description: |\n        The column you want the value of (Default: total_time_with_sub).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: event\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: ACTIVE ALIVE solve() compute_residual() compute_jacobian()\n      description: |\n        The name or "label" of the event. Must match event name exactly including parenthesis if applicable. ("ALIVE" and "ACTIVE" are also valid events, category and column are ignored for these cases).\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str PerformanceData\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/PointValue\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: point\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        The physical point where the solution will be evaluated.\n    - name: type\n      required: No\n      default: !!str PointValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on.\n    subblocks:\n  - name: /Postprocessors/PolycrystalCircles\n    description: |\n      Polycrystal circles generated from a vector input or read from a file\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: coloring_algorithm\n      required: No\n      default: !!str jp\n      cpp_type: MooseEnum\n      group_name: \n      options: jp power greedy bt\n      description: |\n        The grain neighbor graph coloring algorithm to use: "jp" (DEFAULT) Jones and Plassmann, an efficient coloring algorithm, "power" an alternative stochastic algorithm, "greedy", a greedy assignment algorithm with stochastic updates to guarantee a valid coloring, "bt", a back tracking algorithm that produces good distributions but may experience exponential run time in the worst case scenario (works well on medium to large 2D problems)\n    - name: columnar_3D\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        3D microstructure will be columnar in the z-direction?\n    - name: compute_halo_maps\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to communicate proper halo information to all ranks\n    - name: compute_var_to_feature_map\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to compute the active vars to features map\n    - name: condense_map_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether we condense all the node values when in multimap mode (default: false)\n    - name: connecting_threshold\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The threshold for which an existing feature may be extended (defaults to "threshold")\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: enable_var_coloring\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to populate the variable index map.\n    - name: execute_on\n      required: No\n      default: !!str initial\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: file_name\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        File containing circle centers and radii\n    - name: flood_entity_type\n      required: No\n      default: !!str ELEMENTAL\n      cpp_type: MooseEnum\n      group_name: \n      options: NODAL ELEMENTAL\n      description: |\n        Determines whether the flood algorithm runs on nodes or elements\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Array of coupled variables (num_name)\n    - name: output_adjacency_matrix\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Output the Grain Adjacency Matrix used in the coloring algorithms. Additionally, the grain to OP assignments will be printed\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: radii\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The radius for each circle\n    - name: read_from_file\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true to read the position and radius vectors from a file rather than inputing them manually\n    - name: threshold\n      required: No\n      default: !!str 0.5\n      cpp_type: double\n      group_name: \n      description: |\n        The threshold value for which a new feature may be started\n    - name: type\n      required: No\n      default: !!str PolycrystalCircles\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_global_numbering\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determine whether or not global numbers are used to label features on multiple maps (default: true)\n    - name: use_less_than_threshold_comparison\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Controls whether features are defined to be less than or greater than the threshold value.\n    - name: use_single_map\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n    - name: var_name_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Array of coupled variables (base_name)\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variables\n    - name: x_positions\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        x coordinate for each circle center\n    - name: y_positions\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        y coordinate for each circle center\n    - name: z_positions\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        z coordinate for each circle center\n    subblocks:\n  - name: /Postprocessors/PolycrystalEBSD\n    description: |\n      Object for setting up a polycrystal structure from an EBSD Datafile\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: coloring_algorithm\n      required: No\n      default: !!str jp\n      cpp_type: MooseEnum\n      group_name: \n      options: jp power greedy bt\n      description: |\n        The grain neighbor graph coloring algorithm to use: "jp" (DEFAULT) Jones and Plassmann, an efficient coloring algorithm, "power" an alternative stochastic algorithm, "greedy", a greedy assignment algorithm with stochastic updates to guarantee a valid coloring, "bt", a back tracking algorithm that produces good distributions but may experience exponential run time in the worst case scenario (works well on medium to large 2D problems)\n    - name: compute_halo_maps\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to communicate proper halo information to all ranks\n    - name: compute_var_to_feature_map\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to compute the active vars to features map\n    - name: condense_map_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether we condense all the node values when in multimap mode (default: false)\n    - name: connecting_threshold\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The threshold for which an existing feature may be extended (defaults to "threshold")\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: ebsd_reader\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        EBSD Reader for initial condition\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: enable_var_coloring\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to populate the variable index map.\n    - name: execute_on\n      required: No\n      default: !!str initial\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: flood_entity_type\n      required: No\n      default: !!str ELEMENTAL\n      cpp_type: MooseEnum\n      group_name: \n      options: NODAL ELEMENTAL\n      description: |\n        Determines whether the flood algorithm runs on nodes or elements\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Array of coupled variables (num_name)\n    - name: output_adjacency_matrix\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Output the Grain Adjacency Matrix used in the coloring algorithms. Additionally, the grain to OP assignments will be printed\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: phase\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The phase to use for all queries. (Default: 0 ALL)\n    - name: threshold\n      required: No\n      default: !!str 0.5\n      cpp_type: double\n      group_name: \n      description: |\n        The threshold value for which a new feature may be started\n    - name: type\n      required: No\n      default: !!str PolycrystalEBSD\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_global_numbering\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determine whether or not global numbers are used to label features on multiple maps (default: true)\n    - name: use_less_than_threshold_comparison\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Controls whether features are defined to be less than or greater than the threshold value.\n    - name: use_single_map\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n    - name: var_name_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Array of coupled variables (base_name)\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variables\n    subblocks:\n  - name: /Postprocessors/PolycrystalHex\n    description: |\n      Perturbed hexagonal polycrystal\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: coloring_algorithm\n      required: No\n      default: !!str jp\n      cpp_type: MooseEnum\n      group_name: \n      options: jp power greedy bt\n      description: |\n        The grain neighbor graph coloring algorithm to use: "jp" (DEFAULT) Jones and Plassmann, an efficient coloring algorithm, "power" an alternative stochastic algorithm, "greedy", a greedy assignment algorithm with stochastic updates to guarantee a valid coloring, "bt", a back tracking algorithm that produces good distributions but may experience exponential run time in the worst case scenario (works well on medium to large 2D problems)\n    - name: columnar_3D\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        3D microstructure will be columnar in the z-direction?\n    - name: compute_halo_maps\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to communicate proper halo information to all ranks\n    - name: compute_var_to_feature_map\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to compute the active vars to features map\n    - name: condense_map_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether we condense all the node values when in multimap mode (default: false)\n    - name: connecting_threshold\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The threshold for which an existing feature may be extended (defaults to "threshold")\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: enable_var_coloring\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to populate the variable index map.\n    - name: execute_on\n      required: No\n      default: !!str initial\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: flood_entity_type\n      required: No\n      default: !!str ELEMENTAL\n      cpp_type: MooseEnum\n      group_name: \n      options: NODAL ELEMENTAL\n      description: |\n        Determines whether the flood algorithm runs on nodes or elements\n    - name: grain_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of grains being represented by the order parameters\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Array of coupled variables (num_name)\n    - name: output_adjacency_matrix\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Output the Grain Adjacency Matrix used in the coloring algorithms. Additionally, the grain to OP assignments will be printed\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: perturbation_percent\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The percent to randomly perturb centers of grains relative to the size of the grain\n    - name: rand_seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The random seed\n    - name: threshold\n      required: No\n      default: !!str 0.5\n      cpp_type: double\n      group_name: \n      description: |\n        The threshold value for which a new feature may be started\n    - name: type\n      required: No\n      default: !!str PolycrystalHex\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_global_numbering\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determine whether or not global numbers are used to label features on multiple maps (default: true)\n    - name: use_less_than_threshold_comparison\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Controls whether features are defined to be less than or greater than the threshold value.\n    - name: use_single_map\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n    - name: var_name_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Array of coupled variables (base_name)\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variables\n    - name: x_offset\n      required: No\n      default: !!str 0.5\n      cpp_type: double\n      group_name: \n      description: |\n        Specifies offset of hexagon grid in x-direction\n    subblocks:\n  - name: /Postprocessors/PolycrystalVoronoi\n    description: |\n      Random Voronoi tesselation polycrystal (used by PolycrystalVoronoiAction)\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: coloring_algorithm\n      required: No\n      default: !!str jp\n      cpp_type: MooseEnum\n      group_name: \n      options: jp power greedy bt\n      description: |\n        The grain neighbor graph coloring algorithm to use: "jp" (DEFAULT) Jones and Plassmann, an efficient coloring algorithm, "power" an alternative stochastic algorithm, "greedy", a greedy assignment algorithm with stochastic updates to guarantee a valid coloring, "bt", a back tracking algorithm that produces good distributions but may experience exponential run time in the worst case scenario (works well on medium to large 2D problems)\n    - name: columnar_3D\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        3D microstructure will be columnar in the z-direction?\n    - name: compute_halo_maps\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to communicate proper halo information to all ranks\n    - name: compute_var_to_feature_map\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to compute the active vars to features map\n    - name: condense_map_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether we condense all the node values when in multimap mode (default: false)\n    - name: connecting_threshold\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The threshold for which an existing feature may be extended (defaults to "threshold")\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: enable_var_coloring\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to populate the variable index map.\n    - name: execute_on\n      required: No\n      default: !!str initial\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: flood_entity_type\n      required: No\n      default: !!str ELEMENTAL\n      cpp_type: MooseEnum\n      group_name: \n      options: NODAL ELEMENTAL\n      description: |\n        Determines whether the flood algorithm runs on nodes or elements\n    - name: grain_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of grains being represented by the order parameters\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Array of coupled variables (num_name)\n    - name: output_adjacency_matrix\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Output the Grain Adjacency Matrix used in the coloring algorithms. Additionally, the grain to OP assignments will be printed\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: rand_seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The random seed\n    - name: threshold\n      required: No\n      default: !!str 0.5\n      cpp_type: double\n      group_name: \n      description: |\n        The threshold value for which a new feature may be started\n    - name: type\n      required: No\n      default: !!str PolycrystalVoronoi\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_global_numbering\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determine whether or not global numbers are used to label features on multiple maps (default: true)\n    - name: use_less_than_threshold_comparison\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Controls whether features are defined to be less than or greater than the threshold value.\n    - name: use_single_map\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n    - name: var_name_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Array of coupled variables (base_name)\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variables\n    subblocks:\n  - name: /Postprocessors/Receiver\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: default\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The default value\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: initialize_old\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Initialize the old postprocessor value with the default value\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str Receiver\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/RelativeDifferencePostprocessor\n    description: |\n      Computes the absolute value of the relative difference between 2 post-processor values.\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str RelativeDifferencePostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value1\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        First post-processor\n    - name: value2\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        Second post-processor, base for relative difference\n    subblocks:\n  - name: /Postprocessors/RelativeSolutionDifferenceNorm\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str RelativeSolutionDifferenceNorm\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/Residual\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: residual_type\n      required: No\n      default: !!str FINAL\n      cpp_type: MooseEnum\n      group_name: \n      options: FINAL INITIAL_BEFORE_PRESET INITIAL_AFTER_PRESET\n      description: |\n        Type of residual to be reported.  Choices are: FINAL INITIAL_BEFORE_PRESET INITIAL_AFTER_PRESET\n    - name: type\n      required: No\n      default: !!str Residual\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/ScalarL2Error\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str ScalarL2Error\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the scalar variable\n    subblocks:\n  - name: /Postprocessors/ScalarVariable\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: component\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Component to output for this variable\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str ScalarVariable\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        Name of the variable\n    subblocks:\n  - name: /Postprocessors/ScalePostprocessor\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: scaling_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The scaling factor\n    - name: type\n      required: No\n      default: !!str ScalePostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The postprocessor to be scaled\n    subblocks:\n  - name: /Postprocessors/SideAverageValue\n    description: |\n      Computes the average value of a variable on a sideset. Note that this cannot be used on the centerline of an axisymmetric model.\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str SideAverageValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /Postprocessors/SideFluxAverage\n    description: |\n      Computes the integral of the flux over the specified boundary\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diffusivity\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The name of the diffusivity material property that will be used in the flux computation.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str SideFluxAverage\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /Postprocessors/SideFluxIntegral\n    description: |\n      Computes the integral of the flux over the specified boundary\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diffusivity\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The name of the diffusivity material property that will be used in the flux computation.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str SideFluxIntegral\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /Postprocessors/SideIntegralVariablePostprocessor\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str SideIntegralVariablePostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /Postprocessors/TimeExtremeValue\n    description: |\n      A postprocessor for reporting the extreme value of another postprocessor over time.\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: postprocessor\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the postprocessor used for reporting time extreme values\n    - name: type\n      required: No\n      default: !!str TimeExtremeValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value_type\n      required: No\n      default: !!str max\n      cpp_type: MooseEnum\n      group_name: \n      options: max min abs_max abs_min\n      description: |\n        Type of extreme value to return.\'max\' returns the maximum value.\'min\' returns the minimum value.\'abs_max\' returns the maximum absolute value.\'abs_min\' returns the minimum absolute value.\n    subblocks:\n  - name: /Postprocessors/TimestepSize\n    description: |\n      Reports the timestep size\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str TimestepSize\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/TorqueReaction\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: axis_origin\n      required: No\n      default: !!str 0 0 0\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Origin of the axis of rotation used to calculate the torque\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction_vector\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        The direction vector of the axis of rotation about which the calculated torque is calculated\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: react\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The reaction variables\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str TorqueReaction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: unique_node_execute\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/TotalVariableValue\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str TotalVariableValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: No\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the postprocessor\n    subblocks:\n  - name: /Postprocessors/VariableInnerProduct\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: second_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the second variable in the inner product (variable, second_variable)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str VariableInnerProduct\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /Postprocessors/VariableResidual\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str VariableResidual\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable to compute the residual for\n    subblocks:\n  - name: /Postprocessors/VolumePostprocessor\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str VolumePostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n- name: /Preconditioning\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /Preconditioning/*\n    description: |\n      \n    parameters:\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: isObjectAction\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates that this is a MooseObjectAction.\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n    - name: /Preconditioning/*/*\n      description: |\n        \n      parameters:\n      - name: inactive\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          If specified blocks matching these identifiers will be skipped.\n      - name: isObjectAction\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          Indicates that this is a MooseObjectAction.\n      - name: petsc_options\n        required: No\n        default: !!str \n        cpp_type: MultiMooseEnum\n        group_name: \n        options: -dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew\n        description: |\n          Singleton PETSc options\n      - name: petsc_options_iname\n        required: No\n        default: !!str \n        cpp_type: MultiMooseEnum\n        group_name: \n        options: -ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type\n        description: |\n          Names of PETSc name/value pairs\n      - name: petsc_options_value\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n      - name: type\n        required: Yes\n        default: !!str Split\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          Classname of the split object\n      - name: vars\n        required: No\n        default: !!str \n        cpp_type: std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >\n        group_name: \n        description: |\n          variables for this field\n      subblocks:\n    - name: /Preconditioning/*/Split\n      description: |\n        \n      parameters:\n      - name: blocks\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          Mesh blocks Split operates on (omitting this implies "all blocks"\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \'Advanced\'\n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: enable\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Set the enabled status of the MooseObject.\n      - name: petsc_options\n        required: No\n        default: !!str \n        cpp_type: MultiMooseEnum\n        group_name: \n        options: -dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew\n        description: |\n          PETSc flags for the FieldSplit solver\n      - name: petsc_options_iname\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          PETSc option names for the FieldSplit solver\n      - name: petsc_options_value\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          PETSc option values for the FieldSplit solver\n      - name: schur_ainv\n        required: No\n        default: !!str diag\n        cpp_type: MooseEnum\n        group_name: \n        options: diag lump\n        description: |\n          Type of approximation to inv(A) used when forming S = D - C inv(A) B\n      - name: schur_pre\n        required: No\n        default: !!str S\n        cpp_type: MooseEnum\n        group_name: \n        options: S Sp A11\n        description: |\n          Type of Schur complement preconditioner matrix\n      - name: schur_type\n        required: No\n        default: !!str full\n        cpp_type: MooseEnum\n        group_name: \n        options: full upper lower\n        description: |\n          Type of Schur complement\n      - name: sides\n        required: No\n        default: !!str \n        cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n        group_name: \n        description: |\n          Sidesets Split operates on (omitting this implies "no sidesets"\n      - name: splitting\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          The names of the splits (subsystems) in the decomposition of this split\n      - name: splitting_type\n        required: No\n        default: !!str additive\n        cpp_type: MooseEnum\n        group_name: \n        options: additive multiplicative symmetric_multiplicative schur\n        description: |\n          Split decomposition type\n      - name: type\n        required: No\n        default: !!str Split\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: unsides\n        required: No\n        default: !!str \n        cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n        group_name: \n        description: |\n          Sidesets Split excludes (omitting this implies "do not exclude any sidesets"\n      - name: vars\n        required: No\n        default: !!str \n        cpp_type: std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >\n        group_name: \n        description: |\n          Variables Split operates on (omitting this implies "all variables"\n      subblocks:\n  - name: /Preconditioning/FDP\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: finite_difference_type\n      required: No\n      default: !!str coloring\n      cpp_type: MooseEnum\n      group_name: \n      options: standard coloring\n      description: |\n        standard: standard finite differencecoloring: finite difference based on coloring\n    - name: full\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true if you want the full set of couplings.  Simply for convenience so you don\'t have to set every off_diag_row and off_diag_column combination.\n    - name: implicit_geometric_coupling\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true if you want to add entries into the matrix for degrees of freedom that might be coupled by inspection of the geometric search objects.\n    - name: ksp_norm\n      required: No\n      default: !!str unpreconditioned\n      cpp_type: MooseEnum\n      group_name: \n      options: none preconditioned unpreconditioned natural default\n      description: |\n        Sets the norm that is used for convergence testing\n    - name: line_search\n      required: No\n      default: !!str default\n      cpp_type: MooseEnum\n      group_name: \n      options: default shell none basic l2 bt cp\n      description: |\n        Specifies the line search type (Note: none = basic)\n    - name: mffd_type\n      required: No\n      default: !!str wp\n      cpp_type: MooseEnum\n      group_name: \n      options: wp ds\n      description: |\n        Specifies the finite differencing type for Jacobian-free solve types. Note that the default is wp (for Walker and Pernice).\n    - name: off_diag_column\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n    - name: off_diag_row\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n    - name: pc_side\n      required: No\n      default: !!str default\n      cpp_type: MooseEnum\n      group_name: \n      options: left right symmetric default\n      description: |\n        Preconditioning side\n    - name: petsc_options\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: -dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew\n      description: |\n        Singleton PETSc options\n    - name: petsc_options_iname\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: -ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type\n      description: |\n        Names of PETSc name/value pairs\n    - name: petsc_options_value\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n    - name: solve_type\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: PJFNK JFNK NEWTON FD LINEAR\n      description: |\n        PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n    - name: type\n      required: No\n      default: !!str FDP\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Preconditioning/FSP\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: full\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true if you want the full set of couplings.  Simply for convenience so you don\'t have to set every off_diag_row and off_diag_column combination.\n    - name: ksp_norm\n      required: No\n      default: !!str unpreconditioned\n      cpp_type: MooseEnum\n      group_name: \n      options: none preconditioned unpreconditioned natural default\n      description: |\n        Sets the norm that is used for convergence testing\n    - name: line_search\n      required: No\n      default: !!str default\n      cpp_type: MooseEnum\n      group_name: \n      options: default shell none basic l2 bt cp\n      description: |\n        Specifies the line search type (Note: none = basic)\n    - name: mffd_type\n      required: No\n      default: !!str wp\n      cpp_type: MooseEnum\n      group_name: \n      options: wp ds\n      description: |\n        Specifies the finite differencing type for Jacobian-free solve types. Note that the default is wp (for Walker and Pernice).\n    - name: off_diag_column\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n    - name: off_diag_row\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n    - name: pc_side\n      required: No\n      default: !!str default\n      cpp_type: MooseEnum\n      group_name: \n      options: left right symmetric default\n      description: |\n        Preconditioning side\n    - name: petsc_options\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: -dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew\n      description: |\n        Singleton PETSc options\n    - name: petsc_options_iname\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: -ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type\n      description: |\n        Names of PETSc name/value pairs\n    - name: petsc_options_value\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n    - name: solve_type\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: PJFNK JFNK NEWTON FD LINEAR\n      description: |\n        PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n    - name: topsplit\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        entrance to splits, the top split will specify how splits will go.\n    - name: type\n      required: No\n      default: !!str FSP\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Preconditioning/PBP\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: ksp_norm\n      required: No\n      default: !!str unpreconditioned\n      cpp_type: MooseEnum\n      group_name: \n      options: none preconditioned unpreconditioned natural default\n      description: |\n        Sets the norm that is used for convergence testing\n    - name: line_search\n      required: No\n      default: !!str default\n      cpp_type: MooseEnum\n      group_name: \n      options: default shell none basic l2 bt cp\n      description: |\n        Specifies the line search type (Note: none = basic)\n    - name: mffd_type\n      required: No\n      default: !!str wp\n      cpp_type: MooseEnum\n      group_name: \n      options: wp ds\n      description: |\n        Specifies the finite differencing type for Jacobian-free solve types. Note that the default is wp (for Walker and Pernice).\n    - name: off_diag_column\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n    - name: off_diag_row\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n    - name: pc_side\n      required: No\n      default: !!str default\n      cpp_type: MooseEnum\n      group_name: \n      options: left right symmetric default\n      description: |\n        Preconditioning side\n    - name: petsc_options\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: -dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew\n      description: |\n        Singleton PETSc options\n    - name: petsc_options_iname\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: -ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type\n      description: |\n        Names of PETSc name/value pairs\n    - name: petsc_options_value\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n    - name: preconditioner\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        TODO: docstring\n    - name: solve_order\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The order the block rows will be solved in.  Put the name of variables here to stand for solving that variable\'s block row.  A variable may appear more than once (to create cylces if you like).\n    - name: solve_type\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: PJFNK JFNK NEWTON FD LINEAR\n      description: |\n        PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n    - name: type\n      required: No\n      default: !!str PBP\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Preconditioning/SMP\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: coupled_groups\n      required: No\n      default: !!str \n      cpp_type: std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >\n      group_name: \n      description: |\n        List multiple space separated groups of comma separated variables. Off-diagonal jacobians will be generated for all pairs within a group.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: full\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true if you want the full set of couplings.  Simply for convenience so you don\'t have to set every off_diag_row and off_diag_column combination.\n    - name: ksp_norm\n      required: No\n      default: !!str unpreconditioned\n      cpp_type: MooseEnum\n      group_name: \n      options: none preconditioned unpreconditioned natural default\n      description: |\n        Sets the norm that is used for convergence testing\n    - name: line_search\n      required: No\n      default: !!str default\n      cpp_type: MooseEnum\n      group_name: \n      options: default shell none basic l2 bt cp\n      description: |\n        Specifies the line search type (Note: none = basic)\n    - name: mffd_type\n      required: No\n      default: !!str wp\n      cpp_type: MooseEnum\n      group_name: \n      options: wp ds\n      description: |\n        Specifies the finite differencing type for Jacobian-free solve types. Note that the default is wp (for Walker and Pernice).\n    - name: off_diag_column\n      required: No\n      default: !!str \n      cpp_type: std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >\n      group_name: \n      description: |\n        The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n    - name: off_diag_row\n      required: No\n      default: !!str \n      cpp_type: std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >\n      group_name: \n      description: |\n        The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n    - name: pc_side\n      required: No\n      default: !!str default\n      cpp_type: MooseEnum\n      group_name: \n      options: left right symmetric default\n      description: |\n        Preconditioning side\n    - name: petsc_options\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: -dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew\n      description: |\n        Singleton PETSc options\n    - name: petsc_options_iname\n      required: No\n      default: !!str \n      cpp_type: MultiMooseEnum\n      group_name: \n      options: -ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type\n      description: |\n        Names of PETSc name/value pairs\n    - name: petsc_options_value\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n    - name: solve_type\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: PJFNK JFNK NEWTON FD LINEAR\n      description: |\n        PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n    - name: type\n      required: No\n      default: !!str SMP\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    subblocks:\n- name: /Problem\n  description: |\n    \n  parameters:\n  - name: block\n    required: No\n    default: !!str \n    cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n    group_name: \n    description: |\n      Block IDs for the coordinate systems\n  - name: coord_type\n    required: No\n    default: !!str XYZ\n    cpp_type: MultiMooseEnum\n    group_name: \n    options: XYZ RZ RSPHERICAL\n    description: |\n      Type of the coordinate system per block param\n  - name: fe_cache\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Whether or not to turn on the finite element shape function caching system.  This can increase speed with an associated memory cost.\n  - name: inactive\n    required: No\n    default: !!str \n    cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n    group_name: \n    description: |\n      If specified blocks matching these identifiers will be skipped.\n  - name: isObjectAction\n    required: No\n    default: !!str 1\n    cpp_type: bool\n    group_name: \n    description: |\n      Indicates that this is a MooseObjectAction.\n  - name: kernel_coverage_check\n    required: No\n    default: !!str 1\n    cpp_type: bool\n    group_name: \n    description: |\n      Set to false to disable kernel->subdomain coverage check\n  - name: material_coverage_check\n    required: No\n    default: !!str 1\n    cpp_type: bool\n    group_name: \n    description: |\n      Set to false to disable material->subdomain coverage check\n  - name: name\n    required: No\n    default: !!str MOOSE Problem\n    cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n    group_name: \n    description: |\n      The name the problem\n  - name: restart_file_base\n    required: No\n    default: !!str \n    cpp_type: FileNameNoExtension\n    group_name: \n    description: |\n      File base name used for restart (e.g. <path>/<filebase> or <path>/LATEST to grab the latest file available)\n  - name: rz_coord_axis\n    required: No\n    default: !!str Y\n    cpp_type: MooseEnum\n    group_name: \n    options: X Y\n    description: |\n      The rotation axis (X | Y) for axisymetric coordinates\n  - name: type\n    required: Yes\n    default: !!str FEProblem\n    cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n    group_name: \n    description: |\n      A string representing the Moose Object that will be built by this Action\n  - name: library_path\n    required: No\n    default: !!str \n    cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n    group_name: \n    description: |\n      Path to search for dynamic libraries (please avoid committing absolute paths in addition to MOOSE_LIBRARY_PATH)\n  - name: object_names\n    required: No\n    default: !!str \n    cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n    group_name: \n    description: |\n      The names of the objects to register (Default: register all).\n  - name: register_objects_from\n    required: No\n    default: !!str \n    cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n    group_name: \n    description: |\n      The names of other applications from which objects will be registered from (dynamic registration).\n  subblocks:\n  - name: /Problem/<type>\n    description: |\n      \n    parameters:\n    subblocks:\n    - name: /Problem/<type>/DisplacedProblem\n      description: |\n        \n      parameters:\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \'Advanced\'\n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: enable\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Set the enabled status of the MooseObject.\n      - name: type\n        required: No\n        default: !!str DisplacedProblem\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      subblocks:\n    - name: /Problem/<type>/EigenProblem\n      description: |\n        \n      parameters:\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \'Advanced\'\n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: enable\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Set the enabled status of the MooseObject.\n      - name: error_on_jacobian_nonzero_reallocation\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          This causes PETSc to error if it had to reallocate memory in the Jacobian matrix due to not having enough nonzeros\n      - name: force_restart\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          EXPERIMENTAL: If true, a sub_app may use a restart file instead of using of using the master backup file\n      - name: ignore_zeros_in_jacobian\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          Do not explicitly store zero values in the Jacobian matrix if true\n      - name: near_null_space_dimension\n        required: No\n        default: !!str 0\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          The dimension of the near nullspace\n      - name: null_space_dimension\n        required: No\n        default: !!str 0\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          The dimension of the nullspace\n      - name: skip_additional_restart_data\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          True to skip additional data in equation system for restart. It is useful for starting a transient calculation with a steady-state solution\n      - name: solve\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          Whether or not to actually solve the Nonlinear system.  This is handy in the case that all you want to do is execute AuxKernels, Transfers, etc. without actually solving anything\n      - name: transpose_null_space_dimension\n        required: No\n        default: !!str 0\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          The dimension of the transpose nullspace\n      - name: type\n        required: No\n        default: !!str EigenProblem\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: use_nonlinear\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          Determines whether to use a Nonlinear vs a Eigenvalue system (Automatically determined based on executioner)\n      subblocks:\n    - name: /Problem/<type>/FEProblem\n      description: |\n        \n      parameters:\n      - name: control_tags\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \'Advanced\'\n        description: |\n          Adds user-defined labels for accessing object parameters via control logic.\n      - name: enable\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \'Advanced\'\n        description: |\n          Set the enabled status of the MooseObject.\n      - name: error_on_jacobian_nonzero_reallocation\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          This causes PETSc to error if it had to reallocate memory in the Jacobian matrix due to not having enough nonzeros\n      - name: force_restart\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          EXPERIMENTAL: If true, a sub_app may use a restart file instead of using of using the master backup file\n      - name: ignore_zeros_in_jacobian\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          Do not explicitly store zero values in the Jacobian matrix if true\n      - name: near_null_space_dimension\n        required: No\n        default: !!str 0\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          The dimension of the near nullspace\n      - name: null_space_dimension\n        required: No\n        default: !!str 0\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          The dimension of the nullspace\n      - name: skip_additional_restart_data\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          True to skip additional data in equation system for restart. It is useful for starting a transient calculation with a steady-state solution\n      - name: solve\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          Whether or not to actually solve the Nonlinear system.  This is handy in the case that all you want to do is execute AuxKernels, Transfers, etc. without actually solving anything\n      - name: transpose_null_space_dimension\n        required: No\n        default: !!str 0\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          The dimension of the transpose nullspace\n      - name: type\n        required: No\n        default: !!str FEProblem\n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          \n      - name: use_nonlinear\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          Determines whether to use a Nonlinear vs a Eigenvalue system (Automatically determined based on executioner)\n      subblocks:\n- name: /Samplers\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /Samplers/*\n    description: |\n      \n    parameters:\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: isObjectAction\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates that this is a MooseObjectAction.\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n- name: /ScalarKernels\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /ScalarKernels/*\n    description: |\n      \n    parameters:\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: isObjectAction\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates that this is a MooseObjectAction.\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /ScalarKernels/CoupledODETimeDerivative\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: type\n      required: No\n      default: !!str CoupledODETimeDerivative\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled variable.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this kernel operates on\n    subblocks:\n  - name: /ScalarKernels/GeneralizedPlaneStrain\n    description: |\n      Generalized Plane Strain Scalar Kernel\n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: generalized_plane_strain\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The name of the GeneralizedPlaneStrainUserObject\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: scalar_out_of_plane_strain_index\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index number of scalar_out_of_plane_strain this kernel acts on\n    - name: type\n      required: No\n      default: !!str GeneralizedPlaneStrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this kernel operates on\n    subblocks:\n  - name: /ScalarKernels/NodalEqualValueConstraint\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: nodes\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        Node ids\n    - name: type\n      required: No\n      default: !!str NodalEqualValueConstraint\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: var\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variable(s) to put the constraint on\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this kernel operates on\n    subblocks:\n  - name: /ScalarKernels/ODETimeDerivative\n    description: |\n      \n    parameters:\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: type\n      required: No\n      default: !!str ODETimeDerivative\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this kernel operates on\n    subblocks:\n  - name: /ScalarKernels/ParsedODEKernel\n    description: |\n      Parsed ODE function kernel.\n    parameters:\n    - name: args\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        additional coupled variables\n    - name: constant_expressions\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector of values for the constants in constant_names (can be an FParser expression)\n    - name: constant_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Vector of constants used in the parsed function (use this for kB etc.)\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: disable_fpoptimizer\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Disable the function parser algebraic optimizer\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: enable_ad_cache\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable cacheing of function derivatives for faster startup time\n    - name: enable_auto_optimize\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable automatic immediate optimization of derivatives\n    - name: enable_jit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Enable just-in-time compilation of function expressions for faster evaluation\n    - name: fail_on_evalerror\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        function expression\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: type\n      required: No\n      default: !!str ParsedODEKernel\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this kernel operates on\n    subblocks:\n- name: /Transfers\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /Transfers/*\n    description: |\n      \n    parameters:\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: isObjectAction\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates that this is a MooseObjectAction.\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /Transfers/MultiAppCopyTransfer\n    description: |\n      Copies variables (nonlinear and auxiliary) between multiapps that have identical meshes.\n    parameters:\n    - name: check_multiapp_execute_on\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false the check between the multiapp and transfer execute on flags is not preformed.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: to_multiapp from_multiapp\n      description: |\n        Whether this Transfer will be \'to\' or \'from\' a MultiApp.\n    - name: displaced_source_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the source mesh.\n    - name: displaced_target_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the target mesh.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str same_as_multiapp\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: multi_app\n      required: Yes\n      default: !!str \n      cpp_type: MultiAppName\n      group_name: \n      description: |\n        The name of the MultiApp to use.\n    - name: source_variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to transfer from.\n    - name: type\n      required: No\n      default: !!str MultiAppCopyTransfer\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to store the transferred values in.\n    subblocks:\n  - name: /Transfers/MultiAppInterpolationTransfer\n    description: |\n      Transfers the value to the target domain from the nearest node in the source domain.\n    parameters:\n    - name: check_multiapp_execute_on\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false the check between the multiapp and transfer execute on flags is not preformed.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: to_multiapp from_multiapp\n      description: |\n        Whether this Transfer will be \'to\' or \'from\' a MultiApp.\n    - name: displaced_source_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the source mesh.\n    - name: displaced_target_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the target mesh.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str same_as_multiapp\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: interp_type\n      required: No\n      default: !!str inverse_distance\n      cpp_type: MooseEnum\n      group_name: \n      options: inverse_distance radial_basis\n      description: |\n        The algorithm to use for interpolation.\n    - name: multi_app\n      required: Yes\n      default: !!str \n      cpp_type: MultiAppName\n      group_name: \n      description: |\n        The name of the MultiApp to use.\n    - name: num_points\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of nearest points to use for interpolation.\n    - name: power\n      required: No\n      default: !!str 2\n      cpp_type: double\n      group_name: \n      description: |\n        The polynomial power to use for calculation of the decay in the interpolation.\n    - name: radius\n      required: No\n      default: !!str -1\n      cpp_type: double\n      group_name: \n      description: |\n        Radius to use for radial_basis interpolation.  If negative then the radius is taken as the max distance between points.\n    - name: source_variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to transfer from.\n    - name: type\n      required: No\n      default: !!str MultiAppInterpolationTransfer\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The auxiliary variable to store the transferred values in.\n    subblocks:\n  - name: /Transfers/MultiAppMeshFunctionTransfer\n    description: |\n      \n    parameters:\n    - name: check_multiapp_execute_on\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false the check between the multiapp and transfer execute on flags is not preformed.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: to_multiapp from_multiapp\n      description: |\n        Whether this Transfer will be \'to\' or \'from\' a MultiApp.\n    - name: displaced_source_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the source mesh.\n    - name: displaced_target_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the target mesh.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: error_on_miss\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to error in the case that a target point is not found in the source domain.\n    - name: execute_on\n      required: No\n      default: !!str same_as_multiapp\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: multi_app\n      required: Yes\n      default: !!str \n      cpp_type: MultiAppName\n      group_name: \n      description: |\n        The name of the MultiApp to use.\n    - name: source_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: \n      description: |\n        The variable to transfer from.\n    - name: type\n      required: No\n      default: !!str MultiAppMeshFunctionTransfer\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The auxiliary variable to store the transferred values in.\n    subblocks:\n  - name: /Transfers/MultiAppNearestNodeTransfer\n    description: |\n      \n    parameters:\n    - name: check_multiapp_execute_on\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false the check between the multiapp and transfer execute on flags is not preformed.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: to_multiapp from_multiapp\n      description: |\n        Whether this Transfer will be \'to\' or \'from\' a MultiApp.\n    - name: displaced_source_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the source mesh.\n    - name: displaced_target_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the target mesh.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str same_as_multiapp\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: fixed_meshes\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true when the meshes are not changing (ie, no movement or adaptivity).  This will cache nearest node neighbors to greatly speed up the transfer.\n    - name: multi_app\n      required: Yes\n      default: !!str \n      cpp_type: MultiAppName\n      group_name: \n      description: |\n        The name of the MultiApp to use.\n    - name: source_boundary\n      required: No\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary we are transferring from (if not specified, whole domain is used).\n    - name: source_variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to transfer from.\n    - name: target_boundary\n      required: No\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary we are transferring to (if not specified, whole domain is used).\n    - name: type\n      required: No\n      default: !!str MultiAppNearestNodeTransfer\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The auxiliary variable to store the transferred values in.\n    subblocks:\n  - name: /Transfers/MultiAppPostprocessorInterpolationTransfer\n    description: |\n      \n    parameters:\n    - name: check_multiapp_execute_on\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false the check between the multiapp and transfer execute on flags is not preformed.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: to_multiapp from_multiapp\n      description: |\n        Whether this Transfer will be \'to\' or \'from\' a MultiApp.\n    - name: displaced_source_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the source mesh.\n    - name: displaced_target_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the target mesh.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str same_as_multiapp\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: interp_type\n      required: No\n      default: !!str inverse_distance\n      cpp_type: MooseEnum\n      group_name: \n      options: inverse_distance radial_basis\n      description: |\n        The algorithm to use for interpolation.\n    - name: multi_app\n      required: Yes\n      default: !!str \n      cpp_type: MultiAppName\n      group_name: \n      description: |\n        The name of the MultiApp to use.\n    - name: num_points\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of nearest points to use for interpolation.\n    - name: postprocessor\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The Postprocessor to interpolate.\n    - name: power\n      required: No\n      default: !!str 2\n      cpp_type: double\n      group_name: \n      description: |\n        The polynomial power to use for calculation of the decay in the interpolation.\n    - name: radius\n      required: No\n      default: !!str -1\n      cpp_type: double\n      group_name: \n      description: |\n        Radius to use for radial_basis interpolation.  If negative then the radius is taken as the max distance between points.\n    - name: type\n      required: No\n      default: !!str MultiAppPostprocessorInterpolationTransfer\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The auxiliary variable to store the transferred values in.\n    subblocks:\n  - name: /Transfers/MultiAppPostprocessorToAuxScalarTransfer\n    description: |\n      \n    parameters:\n    - name: check_multiapp_execute_on\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false the check between the multiapp and transfer execute on flags is not preformed.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: to_multiapp from_multiapp\n      description: |\n        Whether this Transfer will be \'to\' or \'from\' a MultiApp.\n    - name: displaced_source_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the source mesh.\n    - name: displaced_target_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the target mesh.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str same_as_multiapp\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: from_postprocessor\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the Postprocessor in the Master to transfer the value from.\n    - name: multi_app\n      required: Yes\n      default: !!str \n      cpp_type: MultiAppName\n      group_name: \n      description: |\n        The name of the MultiApp to use.\n    - name: to_aux_scalar\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the scalar Aux variable in the MultiApp to transfer the value to.\n    - name: type\n      required: No\n      default: !!str MultiAppPostprocessorToAuxScalarTransfer\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Transfers/MultiAppPostprocessorTransfer\n    description: |\n      \n    parameters:\n    - name: check_multiapp_execute_on\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false the check between the multiapp and transfer execute on flags is not preformed.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: to_multiapp from_multiapp\n      description: |\n        Whether this Transfer will be \'to\' or \'from\' a MultiApp.\n    - name: displaced_source_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the source mesh.\n    - name: displaced_target_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the target mesh.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str same_as_multiapp\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: from_postprocessor\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the Postprocessor in the Master to transfer the value from.\n    - name: multi_app\n      required: Yes\n      default: !!str \n      cpp_type: MultiAppName\n      group_name: \n      description: |\n        The name of the MultiApp to use.\n    - name: reduction_type\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: average sum maximum minimum\n      description: |\n        The type of reduction to perform to reduce postprocessor values from multiple SubApps to a single value\n    - name: to_postprocessor\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the Postprocessor in the MultiApp to transfer the value to.  This should most likely be a Reporter Postprocessor.\n    - name: type\n      required: No\n      default: !!str MultiAppPostprocessorTransfer\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Transfers/MultiAppProjectionTransfer\n    description: |\n      \n    parameters:\n    - name: check_multiapp_execute_on\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false the check between the multiapp and transfer execute on flags is not preformed.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: to_multiapp from_multiapp\n      description: |\n        Whether this Transfer will be \'to\' or \'from\' a MultiApp.\n    - name: displaced_source_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the source mesh.\n    - name: displaced_target_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the target mesh.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str same_as_multiapp\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: fixed_meshes\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true when the meshes are not changing (ie, no movement or adaptivity).  This will cache some information to speed up the transfer.\n    - name: multi_app\n      required: Yes\n      default: !!str \n      cpp_type: MultiAppName\n      group_name: \n      description: |\n        The name of the MultiApp to use.\n    - name: proj_type\n      required: No\n      default: !!str l2\n      cpp_type: MooseEnum\n      group_name: \n      options: l2\n      description: |\n        The type of the projection.\n    - name: source_variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to transfer from.\n    - name: type\n      required: No\n      default: !!str MultiAppProjectionTransfer\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The auxiliary variable to store the transferred values in.\n    subblocks:\n  - name: /Transfers/MultiAppScalarToAuxScalarTransfer\n    description: |\n      \n    parameters:\n    - name: check_multiapp_execute_on\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false the check between the multiapp and transfer execute on flags is not preformed.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: to_multiapp from_multiapp\n      description: |\n        Whether this Transfer will be \'to\' or \'from\' a MultiApp.\n    - name: displaced_source_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the source mesh.\n    - name: displaced_target_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the target mesh.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str same_as_multiapp\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: multi_app\n      required: Yes\n      default: !!str \n      cpp_type: MultiAppName\n      group_name: \n      description: |\n        The name of the MultiApp to use.\n    - name: source_variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the scalar variable in the MultiApp to transfer the value from.\n    - name: to_aux_scalar\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the scalar Aux variable in the MultiApp to transfer the value to.\n    - name: type\n      required: No\n      default: !!str MultiAppScalarToAuxScalarTransfer\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Transfers/MultiAppUserObjectTransfer\n    description: |\n      \n    parameters:\n    - name: check_multiapp_execute_on\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false the check between the multiapp and transfer execute on flags is not preformed.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: to_multiapp from_multiapp\n      description: |\n        Whether this Transfer will be \'to\' or \'from\' a MultiApp.\n    - name: displaced_source_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the source mesh.\n    - name: displaced_target_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the target mesh.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str same_as_multiapp\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: multi_app\n      required: Yes\n      default: !!str \n      cpp_type: MultiAppName\n      group_name: \n      description: |\n        The name of the MultiApp to use.\n    - name: type\n      required: No\n      default: !!str MultiAppUserObjectTransfer\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: user_object\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The UserObject you want to transfer values from.  Note: This might be a UserObject from your MultiApp\'s input file!\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The auxiliary variable to store the transferred values in.\n    subblocks:\n  - name: /Transfers/MultiAppVariableValueSamplePostprocessorTransfer\n    description: |\n      \n    parameters:\n    - name: check_multiapp_execute_on\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false the check between the multiapp and transfer execute on flags is not preformed.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: to_multiapp from_multiapp\n      description: |\n        Whether this Transfer will be \'to\' or \'from\' a MultiApp.\n    - name: displaced_source_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the source mesh.\n    - name: displaced_target_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the target mesh.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str same_as_multiapp\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: multi_app\n      required: Yes\n      default: !!str \n      cpp_type: MultiAppName\n      group_name: \n      description: |\n        The name of the MultiApp to use.\n    - name: postprocessor\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the postprocessor in the MultiApp to transfer the value to.  This should most likely be a Reporter Postprocessor.\n    - name: source_variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to transfer from.\n    - name: type\n      required: No\n      default: !!str MultiAppVariableValueSamplePostprocessorTransfer\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Transfers/MultiAppVariableValueSampleTransfer\n    description: |\n      \n    parameters:\n    - name: check_multiapp_execute_on\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false the check between the multiapp and transfer execute on flags is not preformed.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: to_multiapp from_multiapp\n      description: |\n        Whether this Transfer will be \'to\' or \'from\' a MultiApp.\n    - name: displaced_source_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the source mesh.\n    - name: displaced_target_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the target mesh.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str same_as_multiapp\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: multi_app\n      required: Yes\n      default: !!str \n      cpp_type: MultiAppName\n      group_name: \n      description: |\n        The name of the MultiApp to use.\n    - name: source_variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to transfer from.\n    - name: type\n      required: No\n      default: !!str MultiAppVariableValueSampleTransfer\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The auxiliary variable to store the transferred values in.\n    subblocks:\n- name: /UserObjects\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /UserObjects/*\n    description: |\n      \n    parameters:\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: isObjectAction\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates that this is a MooseObjectAction.\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /UserObjects/AreaPostprocessor\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str AreaPostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/AverageElementSize\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str AverageElementSize\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/AverageGrainVolume\n    description: |\n      Calculate average grain area in a polycrystal\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: feature_counter\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The FeatureFloodCount UserObject to get values from.\n    - name: grain_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        number of grains to create\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Array of coupled variables (num_name)\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str AverageGrainVolume\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: var_name_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Array of coupled variables (base_name)\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variables\n    subblocks:\n  - name: /UserObjects/AverageNodalVariableValue\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str AverageNodalVariableValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: unique_node_execute\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /UserObjects/AxisymmetricCenterlineAverageValue\n    description: |\n      Computes the average value of a variable on a sideset located along the centerline of an axisymmetric model.\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str AxisymmetricCenterlineAverageValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /UserObjects/CavityPressurePostprocessor\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: cavity_pressure_uo\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The CavityPressureUserObject that computes the initial moles\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: quantity\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The quantity to report\n    - name: type\n      required: No\n      default: !!str CavityPressurePostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/CavityPressureUserObject\n    description: |\n      \n    parameters:\n    - name: R\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The universal gas constant for the units used.\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: initial_pressure\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The initial pressure in the cavity.  If not given, a zero initial pressure will be used.\n    - name: initial_temperature\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Initial temperature (optional)\n    - name: material_input\n      required: No\n      default: !!str \n      cpp_type: std::vector<PostprocessorName, std::allocator<PostprocessorName> >\n      group_name: \n      description: |\n        The name of the postprocessor(s) that holds the amount of material injected into the cavity.\n    - name: startup_time\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The amount of time during which the pressure will ramp from zero to its true value.\n    - name: temperature\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the average temperature postprocessor value.\n    - name: type\n      required: No\n      default: !!str CavityPressureUserObject\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: volume\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the internal volume postprocessor value.\n    subblocks:\n  - name: /UserObjects/ChangeOverTimestepPostprocessor\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: compute_relative_change\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Compute magnitude of relative change instead of change\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: postprocessor\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the postprocessor\n    - name: type\n      required: No\n      default: !!str ChangeOverTimestepPostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/ComputeExternalGrainForceAndTorque\n    description: |\n      Userobject for calculating force and torque acting on a grain\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: c\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Concentration field\n    - name: compute_jacobians\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Compute Jacobians for coupled variables\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: etas\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled order parameters\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: force_density\n      required: No\n      default: !!str force_density\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Force density material\n    - name: grain_data\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        center of mass of grains\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputeExternalGrainForceAndTorque\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/ComputeGrainForceAndTorque\n    description: |\n      Userobject for calculating force and torque acting on a grain\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: c\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Concentration field\n    - name: compute_jacobians\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Compute Jacobians for coupled variables\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: etas\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled order parameters\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: force_density\n      required: No\n      default: !!str force_density\n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Force density material\n    - name: grain_data\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        center of mass of grains\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ComputeGrainForceAndTorque\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/ConservedMaskedNormalNoise\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_begin\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mask\n      required: No\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Material property to multiply the random numbers with\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ConservedMaskedNormalNoise\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/ConservedMaskedUniformNoise\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_begin\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mask\n      required: No\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Material property to multiply the random numbers with\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ConservedMaskedUniformNoise\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/ConservedNormalNoise\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_begin\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ConservedNormalNoise\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/ConservedUniformNoise\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_begin\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ConservedUniformNoise\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/ConstantGrainForceAndTorque\n    description: |\n      Userobject for calculating force and torque acting on a grain\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: force\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        force acting on grains\n    - name: torque\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        torque acting on grains\n    - name: type\n      required: No\n      default: !!str ConstantGrainForceAndTorque\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/CrackFrontData\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: crack_front_definition\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The CrackFrontDefinition user object name\n    - name: crack_front_point_index\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index of the point on the crack front where data is to be reported\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        A scale factor to be applied to the reported quantity\n    - name: type\n      required: No\n      default: !!str CrackFrontData\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of a variable whose value at the crack front is to be reported\n    subblocks:\n  - name: /UserObjects/CrackFrontDefinition\n    description: |\n      \n    parameters:\n    - name: 2d\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Treat body as two-dimensional\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: axis_2d\n      required: No\n      default: !!str 2\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Out of plane axis for models treated as two-dimensional (0=x, 1=y, 2=z)\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: closed_loop\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set of points forms forms a closed loop\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: crack_direction_method\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: CrackDirectionVector CrackMouth CurvedCrackFront\n      description: |\n        Method to determine direction of crack propagation.  Choices are: CrackDirectionVector CrackMouth CurvedCrackFront\n    - name: crack_direction_vector\n      required: No\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Direction of crack propagation\n    - name: crack_direction_vector_end_1\n      required: No\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Direction of crack propagation for the node at end 1 of the crack\n    - name: crack_direction_vector_end_2\n      required: No\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Direction of crack propagation for the node at end 2 of the crack\n    - name: crack_end_direction_method\n      required: No\n      default: !!str NoSpecialTreatment\n      cpp_type: MooseEnum\n      group_name: \n      options: NoSpecialTreatment CrackDirectionVector\n      description: |\n        Method to determine direction of crack propagation at ends of crack.  Choices are: NoSpecialTreatment CrackDirectionVector\n    - name: crack_front_points\n      required: No\n      default: !!str \n      cpp_type: std::vector<libMesh::Point, std::allocator<libMesh::Point> >\n      group_name: \n      description: |\n        Set of points to define crack front\n    - name: crack_mouth_boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        Boundaries whose average coordinate defines the crack mouth\n    - name: disp_x\n      required: No\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        Variable containing the x displacement\n    - name: disp_y\n      required: No\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        Variable containing the y displacement\n    - name: disp_z\n      required: No\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        Variable containing the z displacement\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: first_ring\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of rings of nodes to generate\n    - name: intersecting_boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        Boundaries intersected by ends of crack\n    - name: j_integral_radius_inner\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Radius for J-Integral calculation\n    - name: j_integral_radius_outer\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Radius for J-Integral calculation\n    - name: last_ring\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of rings of nodes to generate\n    - name: q_function_rings\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Generate rings of nodes for q-function\n    - name: q_function_type\n      required: No\n      default: !!str Geometry\n      cpp_type: MooseEnum\n      group_name: \n      options: Geometry Topology\n      description: |\n        The method used to define the integration domain. Options are: Geometry Topology\n    - name: symmetry_plane\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Account for a symmetry plane passing through the plane of the crack, normal to the specified axis (0=x, 1=y, 2=z)\n    - name: t_stress\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Calculate T-stress\n    - name: type\n      required: No\n      default: !!str CrackFrontDefinition\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/CrystalPlasticitySlipRateGSS\n    description: |\n      Phenomenological constitutive model slip rate class.  Override the virtual functions in your class\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: flowprops\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Parameters used in slip rate equations\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: num_slip_sys_flowrate_props\n      required: No\n      default: !!str 2\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of flow rate properties for a slip system\n    - name: num_slip_sys_props\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of slip system specific properties provided in the file containing slip system normals and directions\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: slip_incr_tol\n      required: No\n      default: !!str 0.02\n      cpp_type: double\n      group_name: \n      description: |\n        Maximum allowable slip in an increment\n    - name: slip_sys_file_name\n      required: Yes\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        Name of the file containing the slip system\n    - name: slip_sys_flow_prop_file_name\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        Name of the file containing the values of slip rate equation parameters\n    - name: type\n      required: No\n      default: !!str CrystalPlasticitySlipRateGSS\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: uo_state_var_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name of state variable property: Same as state variable user object specified in input file.\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable_size\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The userobject\'s variable size.\n    subblocks:\n  - name: /UserObjects/CrystalPlasticitySlipResistanceGSS\n    description: |\n      Phenomenological constitutive models\' slip resistance base class.  Override the virtual functions in your class\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CrystalPlasticitySlipResistanceGSS\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: uo_state_var_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name of state variable property: Same as state variable user object specified in input file.\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable_size\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The userobject\'s variable size.\n    subblocks:\n  - name: /UserObjects/CrystalPlasticityStateVarRateComponentGSS\n    description: |\n      Phenomenological constitutive model state variable evolution rate component base class.  Override the virtual functions in your class\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: hprops\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Hardening properties\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: slip_sys_hard_prop_file_name\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        Name of the file containing the values of hardness evolution parameters\n    - name: type\n      required: No\n      default: !!str CrystalPlasticityStateVarRateComponentGSS\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: uo_slip_rate_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name of slip rate property: Same as slip rate user object specified in input file.\n    - name: uo_state_var_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name of state variable property: Same as state variable user object specified in input file.\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable_size\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The userobject\'s variable size.\n    subblocks:\n  - name: /UserObjects/CrystalPlasticityStateVariable\n    description: |\n      Crystal plasticity state variable class.  Override the virtual functions in your class\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: group_values\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The initial values correspoinding to each group, i.e. \'0.0 1.0 2.0\' means 0-4 = 0.0, 4-8 = 1.0 and 8-12 = 2.0 \n    - name: groups\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        To group the initial values on different slip systems \'format: [start end)\', i.e.\'0 4 8 11\' groups 0-3, 4-7 and 8-11 \n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: intvar_read_type\n      required: No\n      default: !!str inline_input\n      cpp_type: MooseEnum\n      group_name: \n      options: file_input inline_input user_input\n      description: |\n        Read from options for initial value of internal variables: Default from .i file\n    - name: scale_factor\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Scale factor of individual component.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: state_variable_file_name\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        Name of the file containing the initial values of slip system resistances\n    - name: type\n      required: No\n      default: !!str CrystalPlasticityStateVariable\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: uo_state_var_evol_rate_comp_name\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Name of state variable evolution rate component property: Same as state variable evolution rate component user object specified in input file.\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable_size\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The userobject\'s variable size.\n    - name: zero\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Numerical zero for interval variable\n    subblocks:\n  - name: /UserObjects/CumulativeValuePostprocessor\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: postprocessor\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the postprocessor\n    - name: type\n      required: No\n      default: !!str CumulativeValuePostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/DifferencePostprocessor\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str DifferencePostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value1\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        First value\n    - name: value2\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        Second value\n    subblocks:\n  - name: /UserObjects/DiscreteNucleationInserter\n    description: |\n      Manages the list of currently active nucleation sites and adds new sites according to a given probability function.\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: hold_time\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Time to keep each nucleus active\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: probability\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        Probability density for inserting a discrete nucleus\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: test\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        Insert a fixed nucleus at a point in the simulation cell\n    - name: type\n      required: No\n      default: !!str DiscreteNucleationInserter\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/DiscreteNucleationMap\n    description: |\n      Generates a spatial smoothed map of all nucleation sites with the data of the DiscreteNucleationInserter for use by the DiscreteNucleation material.\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_begin\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: inserter\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        DiscreteNucleationInserter user object\n    - name: int_width\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Nucleus interface width for smooth nuclei\n    - name: periodic\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Use the periodicity settings of this variable to populate the grain map\n    - name: radius\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Radius for the inserted nuclei\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str DiscreteNucleationMap\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/EBSDReader\n    description: |\n      Load and manage DREAM.3D EBSD data files for running simulations on reconstructed microstructures.\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: custom_columns\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of additional custom data columns to read from the EBSD file\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: type\n      required: No\n      default: !!str EBSDReader\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/ElementAverageTimeDerivative\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementAverageTimeDerivative\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/ElementAverageValue\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementAverageValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/ElementExtremeValue\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementExtremeValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value_type\n      required: No\n      default: !!str max\n      cpp_type: MooseEnum\n      group_name: \n      options: max min\n      description: |\n        Type of extreme value to return. \'max\' returns the maximum value. \'min\' returns the minimum value.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /UserObjects/ElementH1Error\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: p\n      required: No\n      default: !!str 2\n      cpp_type: double\n      group_name: \n      description: |\n        The exponent used in the norm.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementH1Error\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/ElementH1SemiError\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementH1SemiError\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/ElementIntegralMaterialProperty\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: mat_prop\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The name of the material property\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementIntegralMaterialProperty\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/ElementIntegralVariablePostprocessor\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementIntegralVariablePostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/ElementIntegralVariableUserObject\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementIntegralVariableUserObject\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/ElementL2Difference\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: other_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable to compare to\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementL2Difference\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/ElementL2Error\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementL2Error\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/ElementL2Norm\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementL2Norm\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/ElementPropertyReadFile\n    description: |\n      User Object to read property data from an external file and assign to elements: Works only for Rectangular geometry (2D-3D)\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: ngrain\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of grains\n    - name: nprop\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of tabulated property values\n    - name: prop_file_name\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        Name of the property file name\n    - name: rand_seed\n      required: No\n      default: !!str 2000\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        random seed\n    - name: read_type\n      required: No\n      default: !!str none\n      cpp_type: MooseEnum\n      group_name: \n      options: element grain none\n      description: |\n        Type of property distribution: element:element by element property variation; grain:voronoi grain structure\n    - name: rve_type\n      required: No\n      default: !!str none\n      cpp_type: MooseEnum\n      group_name: \n      options: periodic none\n      description: |\n        Periodic or non-periodic grain distribution: Default is non-periodic\n    - name: type\n      required: No\n      default: !!str ElementPropertyReadFile\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/ElementVectorL2Error\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function_x\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: function_y\n      required: No\n      default: !!str 0\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: function_z\n      required: No\n      default: !!str 0\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementVectorL2Error\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: var_x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The FE solution in x direction\n    - name: var_y\n      required: No\n      default: !!str 0\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The FE solution in y direction\n    - name: var_z\n      required: No\n      default: !!str 0\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The FE solution in z direction\n    subblocks:\n  - name: /UserObjects/ElementW1pError\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: p\n      required: No\n      default: !!str 2\n      cpp_type: double\n      group_name: \n      description: |\n        The exponent used in the norm.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementW1pError\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/ElementalVariableValue\n    description: |\n      Outputs an elemental variable value at a particular location\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: elementid\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The ID of the element where we monitor\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str ElementalVariableValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to be monitored\n    subblocks:\n  - name: /UserObjects/EmptyPostprocessor\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str EmptyPostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/EulerAngleFileReader\n    description: |\n      Read Euler angle data from a file and provide it to other objects.\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: file_name\n      required: Yes\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        Euler angle data file name\n    - name: type\n      required: No\n      default: !!str EulerAngleFileReader\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/EulerAngleUpdater\n    description: |\n      Provide updated euler angles after rigid body rotation of the grains.\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: euler_angle_provider\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Name of Euler angle provider user object\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: grain_torques_object\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Name of Euler angle provider user object\n    - name: grain_tracker_object\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The FeatureFloodCount UserObject to get values from.\n    - name: grain_volumes\n      required: Yes\n      default: !!str \n      cpp_type: VectorPostprocessorName\n      group_name: \n      description: |\n        The feature volume VectorPostprocessorValue.\n    - name: rotation_constant\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Constant value characterizing grain rotation\n    - name: type\n      required: No\n      default: !!str EulerAngleUpdater\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/ExecutionerAttributeReporter\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str ExecutionerAttributeReporter\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/FauxGrainTracker\n    description: |\n      Fake grain tracker object for cases where the number of grains is equal to the number of order parameters.\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: compute_halo_maps\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to communicate proper halo information to all ranks\n    - name: compute_var_to_feature_map\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to compute the active vars to features map\n    - name: condense_map_info\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether we condense all the node values when in multimap mode (default: false)\n    - name: connecting_threshold\n      required: No\n      default: !!str 0.09\n      cpp_type: double\n      group_name: \n      description: |\n        The threshold for which an existing feature may be extended (defaults to "threshold")\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: enable_var_coloring\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to populate the variable index map.\n    - name: error_on_grain_creation\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Terminate with an error if a grain is created (does not include initial callback to start simulation)\n    - name: execute_on\n      required: No\n      default: !!str initial timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: flood_entity_type\n      required: No\n      default: !!str ELEMENTAL\n      cpp_type: MooseEnum\n      group_name: \n      options: NODAL ELEMENTAL\n      description: |\n        Determines whether the flood algorithm runs on nodes or elements\n    - name: halo_level\n      required: No\n      default: !!str 2\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The thickness of the halo surrounding each feature.\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Array of coupled variables (num_name)\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: polycrystal_ic_uo\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Optional: Polycrystal IC object\n    - name: remap_grains\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates whether remapping should be done or not (default: true)\n    - name: reserve_op\n      required: No\n      default: !!str 0\n      cpp_type: unsigned short\n      group_name: \n      description: |\n        Indicates the number of reserved ops (variables that cannot be remapped to)\n    - name: reserve_op_threshold\n      required: No\n      default: !!str 0.95\n      cpp_type: double\n      group_name: \n      description: |\n        Threshold for locating a new feature on the reserved op variable(s)\n    - name: threshold\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        The threshold value for which a new feature may be started\n    - name: tracking_step\n      required: No\n      default: !!str 0\n      cpp_type: int\n      group_name: \n      description: |\n        The timestep for when we should start tracking grains\n    - name: type\n      required: No\n      default: !!str FauxGrainTracker\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_global_numbering\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determine whether or not global numbers are used to label features on multiple maps (default: true)\n    - name: use_less_than_threshold_comparison\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Controls whether features are defined to be less than or greater than the threshold value.\n    - name: use_single_map\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n    - name: var_name_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Array of coupled variables (base_name)\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variables\n    subblocks:\n  - name: /UserObjects/FeatureFloodCount\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: compute_halo_maps\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to communicate proper halo information to all ranks\n    - name: compute_var_to_feature_map\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to compute the active vars to features map\n    - name: condense_map_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether we condense all the node values when in multimap mode (default: false)\n    - name: connecting_threshold\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The threshold for which an existing feature may be extended (defaults to "threshold")\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: enable_var_coloring\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to populate the variable index map.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: flood_entity_type\n      required: No\n      default: !!str ELEMENTAL\n      cpp_type: MooseEnum\n      group_name: \n      options: NODAL ELEMENTAL\n      description: |\n        Determines whether the flood algorithm runs on nodes or elements\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: threshold\n      required: No\n      default: !!str 0.5\n      cpp_type: double\n      group_name: \n      description: |\n        The threshold value for which a new feature may be started\n    - name: type\n      required: No\n      default: !!str FeatureFloodCount\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_global_numbering\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determine whether or not global numbers are used to label features on multiple maps (default: true)\n    - name: use_less_than_threshold_comparison\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Controls whether features are defined to be less than or greater than the threshold value.\n    - name: use_single_map\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable(s) for which to find connected regions of interests, i.e. "features".\n    subblocks:\n  - name: /UserObjects/FeatureVolumeFraction\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: equil_fraction\n      required: No\n      default: !!str -1\n      cpp_type: double\n      group_name: \n      description: |\n        Equilibrium volume fraction of 2nd phase for Avrami analysis\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: feature_volumes\n      required: Yes\n      default: !!str \n      cpp_type: VectorPostprocessorName\n      group_name: \n      description: |\n        The feature volume VectorPostprocessorValue.\n    - name: mesh_volume\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        Postprocessor from which to get mesh volume\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str FeatureVolumeFraction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value_type\n      required: No\n      default: !!str VOLUME_FRACTION\n      cpp_type: MooseEnum\n      group_name: \n      options: VOLUME_FRACTION AVRAMI\n      description: |\n        The value to output (VOLUME_FRACTION or AVRAMI value)\n    subblocks:\n  - name: /UserObjects/FindValueOnLine\n    description: |\n      Find a specific target value along a sampling line. The variable values along the line should change monotonically. The target value is searched using a bisection algorithm.\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: depth\n      required: No\n      default: !!str 36\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of bisections to perform.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: end_point\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        End point of the sampling line.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: start_point\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        Start point of the sampling line.\n    - name: target\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Target value to locate.\n    - name: tol\n      required: No\n      default: !!str 1e-10\n      cpp_type: double\n      group_name: \n      description: |\n        Stop search if a value is found that is equal to the target with this tolerance applied.\n    - name: type\n      required: No\n      default: !!str FindValueOnLine\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variable to inspect\n    subblocks:\n  - name: /UserObjects/FunctionSideIntegral\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: No\n      default: !!str 1\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        This postprocessor will return the integral of this function over the boundary\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str FunctionSideIntegral\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/FunctionValuePostprocessor\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The function which supplies the postprocessor value.\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: point\n      required: No\n      default: !!str 0 0 0\n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        A point in space to be given to the function Default: (0, 0, 0)\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        A scale factor to be applied to the function\n    - name: type\n      required: No\n      default: !!str FunctionValuePostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/GeneralizedPlaneStrainUserObject\n    description: |\n      Generalized Plane Strain UserObject to provide Residual and diagonal Jacobian entry\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Material properties base name\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str linear\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Scale factor applied to prescribed pressure\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: out_of_plane_pressure\n      required: No\n      default: !!str 0\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Function used to prescribe pressure in the out-of-plane direction\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: subblock_index_provider\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        SubblockIndexProvider user object name\n    - name: type\n      required: No\n      default: !!str GeneralizedPlaneStrainUserObject\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/GeometrySphere\n    description: |\n      Snap nodes to the surface of a sphere on adaptivity\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        List of boundaries whose nodes are snapped to a given geometry\n    - name: center\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        Sphere center\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: radius\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Sphere radius\n    - name: type\n      required: No\n      default: !!str GeometrySphere\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/GrainBoundaryArea\n    description: |\n      Calculate total grain boundary length in 2D and area in 3D\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: grains_per_side\n      required: No\n      default: !!str 2\n      cpp_type: double\n      group_name: \n      description: |\n        Number of order parameters contacting a boundary (should be 2.0 in polycrystals and 1.0 for dispersed particles)\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Array of coupled variables (num_name)\n    - name: op_range\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Range over which order parameters change across an interface. By default order parameters are assumed to vary from 0 to 1\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str GrainBoundaryArea\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variables\n    - name: var_name_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Array of coupled variables (base_name)\n    subblocks:\n  - name: /UserObjects/GrainForceAndTorqueSum\n    description: |\n      Userobject for summing forces and torques acting on a grain\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: grain_forces\n      required: No\n      default: !!str \n      cpp_type: std::vector<UserObjectName, std::allocator<UserObjectName> >\n      group_name: \n      description: |\n        List of names of user objects that provides forces and torques applied to grains\n    - name: grain_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of grains\n    - name: type\n      required: No\n      default: !!str GrainForceAndTorqueSum\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/GrainTracker\n    description: |\n      Grain Tracker object for running reduced order parameter simulations without grain coalescence.\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: compute_halo_maps\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to communicate proper halo information to all ranks\n    - name: compute_var_to_feature_map\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to compute the active vars to features map\n    - name: condense_map_info\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether we condense all the node values when in multimap mode (default: false)\n    - name: connecting_threshold\n      required: No\n      default: !!str 0.09\n      cpp_type: double\n      group_name: \n      description: |\n        The threshold for which an existing feature may be extended (defaults to "threshold")\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: enable_var_coloring\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to populate the variable index map.\n    - name: error_on_grain_creation\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Terminate with an error if a grain is created (does not include initial callback to start simulation)\n    - name: execute_on\n      required: No\n      default: !!str initial timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: flood_entity_type\n      required: No\n      default: !!str ELEMENTAL\n      cpp_type: MooseEnum\n      group_name: \n      options: NODAL ELEMENTAL\n      description: |\n        Determines whether the flood algorithm runs on nodes or elements\n    - name: halo_level\n      required: No\n      default: !!str 2\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The thickness of the halo surrounding each feature.\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Array of coupled variables (num_name)\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: polycrystal_ic_uo\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Optional: Polycrystal IC object\n    - name: remap_grains\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates whether remapping should be done or not (default: true)\n    - name: reserve_op\n      required: No\n      default: !!str 0\n      cpp_type: unsigned short\n      group_name: \n      description: |\n        Indicates the number of reserved ops (variables that cannot be remapped to)\n    - name: reserve_op_threshold\n      required: No\n      default: !!str 0.95\n      cpp_type: double\n      group_name: \n      description: |\n        Threshold for locating a new feature on the reserved op variable(s)\n    - name: threshold\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        The threshold value for which a new feature may be started\n    - name: tracking_step\n      required: No\n      default: !!str 0\n      cpp_type: int\n      group_name: \n      description: |\n        The timestep for when we should start tracking grains\n    - name: type\n      required: No\n      default: !!str GrainTracker\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_global_numbering\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determine whether or not global numbers are used to label features on multiple maps (default: true)\n    - name: use_less_than_threshold_comparison\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Controls whether features are defined to be less than or greater than the threshold value.\n    - name: use_single_map\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n    - name: var_name_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Array of coupled variables (base_name)\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable(s) for which to find connected regions of interests, i.e. "features".\n    subblocks:\n  - name: /UserObjects/GrainTrackerElasticity\n    description: |\n      Grain Tracker object for running reduced order parameter simulations without grain coalescence.\n    parameters:\n    - name: C_ijkl\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Unrotated stiffness tensor\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: compute_halo_maps\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to communicate proper halo information to all ranks\n    - name: compute_var_to_feature_map\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to compute the active vars to features map\n    - name: condense_map_info\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether we condense all the node values when in multimap mode (default: false)\n    - name: connecting_threshold\n      required: No\n      default: !!str 0.09\n      cpp_type: double\n      group_name: \n      description: |\n        The threshold for which an existing feature may be extended (defaults to "threshold")\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: enable_var_coloring\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to populate the variable index map.\n    - name: error_on_grain_creation\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Terminate with an error if a grain is created (does not include initial callback to start simulation)\n    - name: euler_angle_provider\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Name of Euler angle provider user object\n    - name: execute_on\n      required: No\n      default: !!str initial timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: fill_method\n      required: No\n      default: !!str symmetric9\n      cpp_type: MooseEnum\n      group_name: \n      options: antisymmetric symmetric9 symmetric21 general_isotropic symmetric_isotropic symmetric_isotropic_E_nu antisymmetric_isotropic axisymmetric_rz general principal\n      description: |\n        The fill method\n    - name: flood_entity_type\n      required: No\n      default: !!str ELEMENTAL\n      cpp_type: MooseEnum\n      group_name: \n      options: NODAL ELEMENTAL\n      description: |\n        Determines whether the flood algorithm runs on nodes or elements\n    - name: halo_level\n      required: No\n      default: !!str 2\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The thickness of the halo surrounding each feature.\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Array of coupled variables (num_name)\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: polycrystal_ic_uo\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Optional: Polycrystal IC object\n    - name: random_rotations\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Generate random rotations when the Euler Angle provider runs out of data (otherwise error out)\n    - name: remap_grains\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates whether remapping should be done or not (default: true)\n    - name: reserve_op\n      required: No\n      default: !!str 0\n      cpp_type: unsigned short\n      group_name: \n      description: |\n        Indicates the number of reserved ops (variables that cannot be remapped to)\n    - name: reserve_op_threshold\n      required: No\n      default: !!str 0.95\n      cpp_type: double\n      group_name: \n      description: |\n        Threshold for locating a new feature on the reserved op variable(s)\n    - name: threshold\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        The threshold value for which a new feature may be started\n    - name: tracking_step\n      required: No\n      default: !!str 0\n      cpp_type: int\n      group_name: \n      description: |\n        The timestep for when we should start tracking grains\n    - name: type\n      required: No\n      default: !!str GrainTrackerElasticity\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_global_numbering\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determine whether or not global numbers are used to label features on multiple maps (default: true)\n    - name: use_less_than_threshold_comparison\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Controls whether features are defined to be less than or greater than the threshold value.\n    - name: use_single_map\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n    - name: var_name_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Array of coupled variables (base_name)\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable(s) for which to find connected regions of interests, i.e. "features".\n    subblocks:\n  - name: /UserObjects/HEVPEqvPlasticStrain\n    description: |\n      User Object to integrate equivalent plastic strain\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: intvar_rate_prop_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name of internal variable property: Same as internal variable rate user object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str HEVPEqvPlasticStrain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/HEVPEqvPlasticStrainRate\n    description: |\n      User Object computing equivalent plastic strain rate\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: flow_rate_prop_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name of flow rate property: Same as the flow rate user object name specified in input file\n    - name: h_scaling\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Scaling parameter\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str HEVPEqvPlasticStrainRate\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/HEVPFlowRatePowerLawJ2\n    description: |\n      User object to evaluate power law flow rate and flow direction based on J2\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: base_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name of tensor properties to fetch\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: flow_rate_exponent\n      required: No\n      default: !!str 10\n      cpp_type: double\n      group_name: \n      description: |\n        Power law exponent in flow rate equation\n    - name: flow_rate_tol\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: \n      description: |\n        Tolerance for flow rate\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: reference_flow_rate\n      required: No\n      default: !!str 0.001\n      cpp_type: double\n      group_name: \n      description: |\n        Reference flow rate for rate dependent flow\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: strength_prop_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name of strength property: Same as strength user object specified in input file\n    - name: type\n      required: No\n      default: !!str HEVPFlowRatePowerLawJ2\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/HEVPLinearHardening\n    description: |\n      User Object for linear hardening\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: intvar_prop_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name of internal variable property to calculate material resistance: Same as internal variable user object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: slope\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Linear hardening slope\n    - name: type\n      required: No\n      default: !!str HEVPLinearHardening\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_stress\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Yield strength\n    subblocks:\n  - name: /UserObjects/HEVPRambergOsgoodHardening\n    description: |\n      User object for Ramberg-Osgood hardening power law hardening\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: hardening_exponent\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The hardening exponent value\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: intvar_prop_name\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Name of internal variable property to calculate material resistance: Same as internal variable user object\n    - name: reference_plastic_strain\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Reference plastic strain value\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str HEVPRambergOsgoodHardening\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_stress\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Yield strength\n    subblocks:\n  - name: /UserObjects/InteractionIntegral\n    description: |\n      \n    parameters:\n    - name: K_factor\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Conversion factor between interaction integral and stress intensity factor K\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: crack_front_definition\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The CrackFrontDefinition user object name\n    - name: crack_front_point_index\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index of the point on the crack front corresponding to this q function\n    - name: displacements\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The displacements appropriate for the simulation geometry and coordinate system\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: poissons_ratio\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Poisson\'s ratio for the material.\n    - name: q_function_type\n      required: No\n      default: !!str Geometry\n      cpp_type: MooseEnum\n      group_name: \n      options: Geometry Topology\n      description: |\n        The method used to define the integration domain. Options are: Geometry Topology\n    - name: ring_index\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Ring ID\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: sif_mode\n      required: Yes\n      default: !!str KI\n      cpp_type: MooseEnum\n      group_name: \n      options: KI KII KIII T\n      description: |\n        Stress intensity factor to calculate. Choices are: KI KII KIII T\n    - name: symmetry_plane\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Account for a symmetry plane passing through the plane of the crack, normal to the specified axis (0=x, 1=y, 2=z)\n    - name: temp\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The temperature (optional). Must be provided to correctly compute stress intensity factors in models with thermal strain gradients.\n    - name: type\n      required: No\n      default: !!str InteractionIntegral\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: youngs_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Young\'s modulus of the material.\n    subblocks:\n  - name: /UserObjects/JIntegral\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: convert_J_to_K\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Convert J-integral to stress intensity factor K.\n    - name: crack_front_definition\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The CrackFrontDefinition user object name\n    - name: crack_front_point_index\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index of the point on the crack front corresponding to this q function\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: poissons_ratio\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Poisson\'s ratio\n    - name: q_function_type\n      required: No\n      default: !!str Geometry\n      cpp_type: MooseEnum\n      group_name: \n      options: Geometry Topology\n      description: |\n        The method used to define the integration domain. Options are: Geometry Topology\n    - name: ring_first\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        First Ring ID\n    - name: ring_index\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Ring ID\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: symmetry_plane\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Account for a symmetry plane passing through the plane of the crack, normal to the specified axis (0=x, 1=y, 2=z)\n    - name: type\n      required: No\n      default: !!str JIntegral\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: youngs_modulus\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Young\'s modulus of the material.\n    subblocks:\n  - name: /UserObjects/LayeredAverage\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: average_radius\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        When using \'average\' sampling this is how the number of values both above and below the layer that will be averaged.\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: bounds\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The \'bounding\' positions of the layers i.e.: \'0, 1.2, 3.7, 4.2\' will mean 3 layers between those positions.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: cumulative\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true the value in each layer is the sum of the values up to and including that layer\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z\n      description: |\n        The direction of the layers.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: num_layers\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of layers.\n    - name: sample_type\n      required: No\n      default: !!str direct\n      cpp_type: MooseEnum\n      group_name: \n      options: direct interpolate average\n      description: |\n        How to sample the layers.  \'direct\' means get the value of the layer the point falls in directly (or average if that layer has no value).  \'interpolate\' does a linear interpolation between the two closest layers.  \'average\' averages the two closest layers.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str LayeredAverage\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/LayeredIntegral\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: average_radius\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        When using \'average\' sampling this is how the number of values both above and below the layer that will be averaged.\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: bounds\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The \'bounding\' positions of the layers i.e.: \'0, 1.2, 3.7, 4.2\' will mean 3 layers between those positions.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: cumulative\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true the value in each layer is the sum of the values up to and including that layer\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z\n      description: |\n        The direction of the layers.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: num_layers\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of layers.\n    - name: sample_type\n      required: No\n      default: !!str direct\n      cpp_type: MooseEnum\n      group_name: \n      options: direct interpolate average\n      description: |\n        How to sample the layers.  \'direct\' means get the value of the layer the point falls in directly (or average if that layer has no value).  \'interpolate\' does a linear interpolation between the two closest layers.  \'average\' averages the two closest layers.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str LayeredIntegral\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/LayeredSideAverage\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: average_radius\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        When using \'average\' sampling this is how the number of values both above and below the layer that will be averaged.\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bounds\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The \'bounding\' positions of the layers i.e.: \'0, 1.2, 3.7, 4.2\' will mean 3 layers between those positions.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: cumulative\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true the value in each layer is the sum of the values up to and including that layer\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z\n      description: |\n        The direction of the layers.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: num_layers\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of layers.\n    - name: sample_type\n      required: No\n      default: !!str direct\n      cpp_type: MooseEnum\n      group_name: \n      options: direct interpolate average\n      description: |\n        How to sample the layers.  \'direct\' means get the value of the layer the point falls in directly (or average if that layer has no value).  \'interpolate\' does a linear interpolation between the two closest layers.  \'average\' averages the two closest layers.\n    - name: type\n      required: No\n      default: !!str LayeredSideAverage\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /UserObjects/LayeredSideFluxAverage\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: average_radius\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        When using \'average\' sampling this is how the number of values both above and below the layer that will be averaged.\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bounds\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The \'bounding\' positions of the layers i.e.: \'0, 1.2, 3.7, 4.2\' will mean 3 layers between those positions.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: cumulative\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true the value in each layer is the sum of the values up to and including that layer\n    - name: diffusivity\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The name of the diffusivity material property that will be used in the flux computation.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z\n      description: |\n        The direction of the layers.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: num_layers\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of layers.\n    - name: sample_type\n      required: No\n      default: !!str direct\n      cpp_type: MooseEnum\n      group_name: \n      options: direct interpolate average\n      description: |\n        How to sample the layers.  \'direct\' means get the value of the layer the point falls in directly (or average if that layer has no value).  \'interpolate\' does a linear interpolation between the two closest layers.  \'average\' averages the two closest layers.\n    - name: type\n      required: No\n      default: !!str LayeredSideFluxAverage\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /UserObjects/LayeredSideIntegral\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: average_radius\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        When using \'average\' sampling this is how the number of values both above and below the layer that will be averaged.\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bounds\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The \'bounding\' positions of the layers i.e.: \'0, 1.2, 3.7, 4.2\' will mean 3 layers between those positions.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: cumulative\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true the value in each layer is the sum of the values up to and including that layer\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z\n      description: |\n        The direction of the layers.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: num_layers\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of layers.\n    - name: sample_type\n      required: No\n      default: !!str direct\n      cpp_type: MooseEnum\n      group_name: \n      options: direct interpolate average\n      description: |\n        How to sample the layers.  \'direct\' means get the value of the layer the point falls in directly (or average if that layer has no value).  \'interpolate\' does a linear interpolation between the two closest layers.  \'average\' averages the two closest layers.\n    - name: type\n      required: No\n      default: !!str LayeredSideIntegral\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /UserObjects/LinearCombinationPostprocessor\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: b\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Additional value to add to sum\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: pp_coefs\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        List of linear combination coefficients for each post-processor\n    - name: pp_names\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<PostprocessorName, std::allocator<PostprocessorName> >\n      group_name: \n      description: |\n        List of post-processors\n    - name: type\n      required: No\n      default: !!str LinearCombinationPostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/LinearViscoelasticityManager\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: creep_strain_name\n      required: No\n      default: !!str creep_strain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        name of the creep strain tensor used for the viscoelastic update\n    - name: elastic_strain_name\n      required: No\n      default: !!str elastic_strain\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        name of the elastic strain tensor used for the viscoelastic update\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: stress_name\n      required: No\n      default: !!str stress\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        name of the stress tensor used for the viscoelastic update\n    - name: type\n      required: No\n      default: !!str LinearViscoelasticityManager\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: viscoelastic_model\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        name of the LinearViscoelasticityBase object to manage\n    subblocks:\n  - name: /UserObjects/MaskedGrainForceAndTorque\n    description: |\n      Userobject for masking/pinning grains and making forces and torques acting on that grain zero\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: grain_force\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        userobject for getting force and torque acting on grains\n    - name: pinned_grains\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        Grain numbers for pinned grains\n    - name: type\n      required: No\n      default: !!str MaskedGrainForceAndTorque\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/Mass\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str Mass\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/MaterialTensorIntegral\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: index_i\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index i of ij for the tensor to output (0, 1, 2)\n    - name: index_j\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index j of ij for the tensor to output (0, 1, 2)\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: rank_two_tensor\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The rank two material tensor name\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialTensorIntegral\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/MaterialTimeStepPostprocessor\n    description: |\n      This postprocessor estimates a timestep that reduces the increment change in a aux variable below a given threshold.\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialTimeStepPostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/MemoryUsage\n    description: |\n      Memory usage statistics for the running simulation.\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: mem_type\n      required: No\n      default: !!str virtual_memory\n      cpp_type: MooseEnum\n      group_name: \n      options: virtual_memory physical_memory page_faults\n      description: |\n        Memory metric to report.\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: report_peak_value\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        If the postprocessor is executed more than one during a time step, report the aggregated peak value.\n    - name: type\n      required: No\n      default: !!str MemoryUsage\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value_type\n      required: No\n      default: !!str total\n      cpp_type: MooseEnum\n      group_name: \n      options: total average max_process min_processs\n      description: |\n        Aggregation method to apply to the requested memory metric.\n    subblocks:\n  - name: /UserObjects/MixedModeEquivalentK\n    description: |\n      \n    parameters:\n    - name: KIII_name\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the KIII postprocessor\n    - name: KII_name\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the KII postprocessor\n    - name: KI_name\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the KI postprocessor\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: poissons_ratio\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Poisson\'s ratio for the material.\n    - name: type\n      required: No\n      default: !!str MixedModeEquivalentK\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/NearestPointLayeredAverage\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: average_radius\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        When using \'average\' sampling this is how the number of values both above and below the layer that will be averaged.\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: bounds\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The \'bounding\' positions of the layers i.e.: \'0, 1.2, 3.7, 4.2\' will mean 3 layers between those positions.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: cumulative\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true the value in each layer is the sum of the values up to and including that layer\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z\n      description: |\n        The direction of the layers.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: num_layers\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of layers.\n    - name: points\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<libMesh::Point, std::allocator<libMesh::Point> >\n      group_name: \n      description: |\n        Computations will be lumped into values at these points.\n    - name: sample_type\n      required: No\n      default: !!str direct\n      cpp_type: MooseEnum\n      group_name: \n      options: direct interpolate average\n      description: |\n        How to sample the layers.  \'direct\' means get the value of the layer the point falls in directly (or average if that layer has no value).  \'interpolate\' does a linear interpolation between the two closest layers.  \'average\' averages the two closest layers.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NearestPointLayeredAverage\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/NodalExtremeValue\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalExtremeValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: unique_node_execute\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value_type\n      required: No\n      default: !!str max\n      cpp_type: MooseEnum\n      group_name: \n      options: max min\n      description: |\n        Type of extreme value to return. \'max\' returns the maximum value. \'min\' returns the minimum value.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /UserObjects/NodalL2Error\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalL2Error\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: unique_node_execute\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /UserObjects/NodalL2Norm\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalL2Norm\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: unique_node_execute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /UserObjects/NodalMaxValue\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalMaxValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: unique_node_execute\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /UserObjects/NodalNormalsCorner\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: corner_boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        Node set ID which contains the nodes that are in \'corners\'.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: type\n      required: No\n      default: !!str NodalNormalsCorner\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/NodalNormalsEvaluator\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalNormalsEvaluator\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: unique_node_execute\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/NodalNormalsPreprocessor\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: corner_boundary\n      required: No\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        Node set ID which contains the nodes that are in \'corners\'.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalNormalsPreprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/NodalProxyMaxValue\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalProxyMaxValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: unique_node_execute\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /UserObjects/NodalSum\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalSum\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: unique_node_execute\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /UserObjects/NodalVariableValue\n    description: |\n      Outputs values of a nodal variable at a particular location\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: nodeid\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The ID of the node where we monitor\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        A scale factor to be applied to the variable\n    - name: type\n      required: No\n      default: !!str NodalVariableValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to be monitored\n    subblocks:\n  - name: /UserObjects/NumDOFs\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: system\n      required: No\n      default: !!str ALL\n      cpp_type: MooseEnum\n      group_name: \n      options: NL AUX ALL\n      description: |\n        The system(s) to retrieve the number of DOFs from (NL, AUX, ALL). Default == ALL\n    - name: type\n      required: No\n      default: !!str NumDOFs\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/NumElems\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: elem_filter\n      required: No\n      default: !!str active\n      cpp_type: MooseEnum\n      group_name: \n      options: active total\n      description: |\n        The type of elements to include in the count (active, total). Default == active\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str NumElems\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/NumLinearIterations\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str NumLinearIterations\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/NumNodes\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str NumNodes\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/NumNonlinearIterations\n    description: |\n      Outputs the number of nonlinear iterations\n    parameters:\n    - name: accumulate_over_step\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When set to true, accumulates to count the total over all Picard iterations for each step\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str NumNonlinearIterations\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/NumPicardIterations\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str NumPicardIterations\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/NumResidualEvaluations\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str NumResidualEvaluations\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/NumVars\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: system\n      required: No\n      default: !!str nonlinear\n      cpp_type: MooseEnum\n      group_name: \n      options: nonlinear auxiliary\n      description: |\n        The system for which you want to print the number of variables.\n    - name: type\n      required: No\n      default: !!str NumVars\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/PFCElementEnergyIntegral\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: temp\n      required: No\n      default: !!str 1833\n      cpp_type: double\n      group_name: \n      description: |\n        Temperature of simulation\n    - name: type\n      required: No\n      default: !!str PFCElementEnergyIntegral\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/PercentChangePostprocessor\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: postprocessor\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the postprocessor used for exit criterion\n    - name: type\n      required: No\n      default: !!str PercentChangePostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/PerformanceData\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: category\n      required: No\n      default: !!str Execution\n      cpp_type: MooseEnum\n      group_name: \n      options: Application Execution Output Setup Utility\n      description: |\n        The category for the event\n    - name: column\n      required: No\n      default: !!str total_time_with_sub\n      cpp_type: MooseEnum\n      group_name: \n      options: n_calls total_time average_time total_time_with_sub average_time_with_sub percent_of_active_time percent_of_active_time_with_sub\n      description: |\n        The column you want the value of (Default: total_time_with_sub).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: event\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: ACTIVE ALIVE solve() compute_residual() compute_jacobian()\n      description: |\n        The name or "label" of the event. Must match event name exactly including parenthesis if applicable. ("ALIVE" and "ACTIVE" are also valid events, category and column are ignored for these cases).\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str PerformanceData\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/PointValue\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: point\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        The physical point where the solution will be evaluated.\n    - name: type\n      required: No\n      default: !!str PointValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on.\n    subblocks:\n  - name: /UserObjects/PolycrystalCircles\n    description: |\n      Polycrystal circles generated from a vector input or read from a file\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: coloring_algorithm\n      required: No\n      default: !!str jp\n      cpp_type: MooseEnum\n      group_name: \n      options: jp power greedy bt\n      description: |\n        The grain neighbor graph coloring algorithm to use: "jp" (DEFAULT) Jones and Plassmann, an efficient coloring algorithm, "power" an alternative stochastic algorithm, "greedy", a greedy assignment algorithm with stochastic updates to guarantee a valid coloring, "bt", a back tracking algorithm that produces good distributions but may experience exponential run time in the worst case scenario (works well on medium to large 2D problems)\n    - name: columnar_3D\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        3D microstructure will be columnar in the z-direction?\n    - name: compute_halo_maps\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to communicate proper halo information to all ranks\n    - name: compute_var_to_feature_map\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to compute the active vars to features map\n    - name: condense_map_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether we condense all the node values when in multimap mode (default: false)\n    - name: connecting_threshold\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The threshold for which an existing feature may be extended (defaults to "threshold")\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: enable_var_coloring\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to populate the variable index map.\n    - name: execute_on\n      required: No\n      default: !!str initial\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: file_name\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        File containing circle centers and radii\n    - name: flood_entity_type\n      required: No\n      default: !!str ELEMENTAL\n      cpp_type: MooseEnum\n      group_name: \n      options: NODAL ELEMENTAL\n      description: |\n        Determines whether the flood algorithm runs on nodes or elements\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Array of coupled variables (num_name)\n    - name: output_adjacency_matrix\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Output the Grain Adjacency Matrix used in the coloring algorithms. Additionally, the grain to OP assignments will be printed\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: radii\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The radius for each circle\n    - name: read_from_file\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true to read the position and radius vectors from a file rather than inputing them manually\n    - name: threshold\n      required: No\n      default: !!str 0.5\n      cpp_type: double\n      group_name: \n      description: |\n        The threshold value for which a new feature may be started\n    - name: type\n      required: No\n      default: !!str PolycrystalCircles\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_global_numbering\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determine whether or not global numbers are used to label features on multiple maps (default: true)\n    - name: use_less_than_threshold_comparison\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Controls whether features are defined to be less than or greater than the threshold value.\n    - name: use_single_map\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n    - name: var_name_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Array of coupled variables (base_name)\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variables\n    - name: x_positions\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        x coordinate for each circle center\n    - name: y_positions\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        y coordinate for each circle center\n    - name: z_positions\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        z coordinate for each circle center\n    subblocks:\n  - name: /UserObjects/PolycrystalEBSD\n    description: |\n      Object for setting up a polycrystal structure from an EBSD Datafile\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: coloring_algorithm\n      required: No\n      default: !!str jp\n      cpp_type: MooseEnum\n      group_name: \n      options: jp power greedy bt\n      description: |\n        The grain neighbor graph coloring algorithm to use: "jp" (DEFAULT) Jones and Plassmann, an efficient coloring algorithm, "power" an alternative stochastic algorithm, "greedy", a greedy assignment algorithm with stochastic updates to guarantee a valid coloring, "bt", a back tracking algorithm that produces good distributions but may experience exponential run time in the worst case scenario (works well on medium to large 2D problems)\n    - name: compute_halo_maps\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to communicate proper halo information to all ranks\n    - name: compute_var_to_feature_map\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to compute the active vars to features map\n    - name: condense_map_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether we condense all the node values when in multimap mode (default: false)\n    - name: connecting_threshold\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The threshold for which an existing feature may be extended (defaults to "threshold")\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: ebsd_reader\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        EBSD Reader for initial condition\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: enable_var_coloring\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to populate the variable index map.\n    - name: execute_on\n      required: No\n      default: !!str initial\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: flood_entity_type\n      required: No\n      default: !!str ELEMENTAL\n      cpp_type: MooseEnum\n      group_name: \n      options: NODAL ELEMENTAL\n      description: |\n        Determines whether the flood algorithm runs on nodes or elements\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Array of coupled variables (num_name)\n    - name: output_adjacency_matrix\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Output the Grain Adjacency Matrix used in the coloring algorithms. Additionally, the grain to OP assignments will be printed\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: phase\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The phase to use for all queries. (Default: 0 ALL)\n    - name: threshold\n      required: No\n      default: !!str 0.5\n      cpp_type: double\n      group_name: \n      description: |\n        The threshold value for which a new feature may be started\n    - name: type\n      required: No\n      default: !!str PolycrystalEBSD\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_global_numbering\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determine whether or not global numbers are used to label features on multiple maps (default: true)\n    - name: use_less_than_threshold_comparison\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Controls whether features are defined to be less than or greater than the threshold value.\n    - name: use_single_map\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n    - name: var_name_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Array of coupled variables (base_name)\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variables\n    subblocks:\n  - name: /UserObjects/PolycrystalHex\n    description: |\n      Perturbed hexagonal polycrystal\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: coloring_algorithm\n      required: No\n      default: !!str jp\n      cpp_type: MooseEnum\n      group_name: \n      options: jp power greedy bt\n      description: |\n        The grain neighbor graph coloring algorithm to use: "jp" (DEFAULT) Jones and Plassmann, an efficient coloring algorithm, "power" an alternative stochastic algorithm, "greedy", a greedy assignment algorithm with stochastic updates to guarantee a valid coloring, "bt", a back tracking algorithm that produces good distributions but may experience exponential run time in the worst case scenario (works well on medium to large 2D problems)\n    - name: columnar_3D\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        3D microstructure will be columnar in the z-direction?\n    - name: compute_halo_maps\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to communicate proper halo information to all ranks\n    - name: compute_var_to_feature_map\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to compute the active vars to features map\n    - name: condense_map_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether we condense all the node values when in multimap mode (default: false)\n    - name: connecting_threshold\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The threshold for which an existing feature may be extended (defaults to "threshold")\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: enable_var_coloring\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to populate the variable index map.\n    - name: execute_on\n      required: No\n      default: !!str initial\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: flood_entity_type\n      required: No\n      default: !!str ELEMENTAL\n      cpp_type: MooseEnum\n      group_name: \n      options: NODAL ELEMENTAL\n      description: |\n        Determines whether the flood algorithm runs on nodes or elements\n    - name: grain_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of grains being represented by the order parameters\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Array of coupled variables (num_name)\n    - name: output_adjacency_matrix\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Output the Grain Adjacency Matrix used in the coloring algorithms. Additionally, the grain to OP assignments will be printed\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: perturbation_percent\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The percent to randomly perturb centers of grains relative to the size of the grain\n    - name: rand_seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The random seed\n    - name: threshold\n      required: No\n      default: !!str 0.5\n      cpp_type: double\n      group_name: \n      description: |\n        The threshold value for which a new feature may be started\n    - name: type\n      required: No\n      default: !!str PolycrystalHex\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_global_numbering\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determine whether or not global numbers are used to label features on multiple maps (default: true)\n    - name: use_less_than_threshold_comparison\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Controls whether features are defined to be less than or greater than the threshold value.\n    - name: use_single_map\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n    - name: var_name_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Array of coupled variables (base_name)\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variables\n    - name: x_offset\n      required: No\n      default: !!str 0.5\n      cpp_type: double\n      group_name: \n      description: |\n        Specifies offset of hexagon grid in x-direction\n    subblocks:\n  - name: /UserObjects/PolycrystalVoronoi\n    description: |\n      Random Voronoi tesselation polycrystal (used by PolycrystalVoronoiAction)\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: coloring_algorithm\n      required: No\n      default: !!str jp\n      cpp_type: MooseEnum\n      group_name: \n      options: jp power greedy bt\n      description: |\n        The grain neighbor graph coloring algorithm to use: "jp" (DEFAULT) Jones and Plassmann, an efficient coloring algorithm, "power" an alternative stochastic algorithm, "greedy", a greedy assignment algorithm with stochastic updates to guarantee a valid coloring, "bt", a back tracking algorithm that produces good distributions but may experience exponential run time in the worst case scenario (works well on medium to large 2D problems)\n    - name: columnar_3D\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        3D microstructure will be columnar in the z-direction?\n    - name: compute_halo_maps\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to communicate proper halo information to all ranks\n    - name: compute_var_to_feature_map\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to compute the active vars to features map\n    - name: condense_map_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether we condense all the node values when in multimap mode (default: false)\n    - name: connecting_threshold\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The threshold for which an existing feature may be extended (defaults to "threshold")\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: enable_var_coloring\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the Postprocessor to populate the variable index map.\n    - name: execute_on\n      required: No\n      default: !!str initial\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: flood_entity_type\n      required: No\n      default: !!str ELEMENTAL\n      cpp_type: MooseEnum\n      group_name: \n      options: NODAL ELEMENTAL\n      description: |\n        Determines whether the flood algorithm runs on nodes or elements\n    - name: grain_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of grains being represented by the order parameters\n    - name: op_num\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Array of coupled variables (num_name)\n    - name: output_adjacency_matrix\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Output the Grain Adjacency Matrix used in the coloring algorithms. Additionally, the grain to OP assignments will be printed\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: rand_seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The random seed\n    - name: threshold\n      required: No\n      default: !!str 0.5\n      cpp_type: double\n      group_name: \n      description: |\n        The threshold value for which a new feature may be started\n    - name: type\n      required: No\n      default: !!str PolycrystalVoronoi\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_global_numbering\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determine whether or not global numbers are used to label features on multiple maps (default: true)\n    - name: use_less_than_threshold_comparison\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Controls whether features are defined to be less than or greater than the threshold value.\n    - name: use_single_map\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n    - name: var_name_base\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Array of coupled variables (base_name)\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variables\n    subblocks:\n  - name: /UserObjects/RandomEulerAngleProvider\n    description: |\n      Assign random euler angles for each grain.\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: grain_tracker_object\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The FeatureFloodCount UserObject to get values from.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Seed value for the random number generator\n    - name: type\n      required: No\n      default: !!str RandomEulerAngleProvider\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/Receiver\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: default\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The default value\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: initialize_old\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Initialize the old postprocessor value with the default value\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str Receiver\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/RelativeDifferencePostprocessor\n    description: |\n      Computes the absolute value of the relative difference between 2 post-processor values.\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str RelativeDifferencePostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value1\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        First post-processor\n    - name: value2\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        Second post-processor, base for relative difference\n    subblocks:\n  - name: /UserObjects/RelativeSolutionDifferenceNorm\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str RelativeSolutionDifferenceNorm\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/Residual\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: residual_type\n      required: No\n      default: !!str FINAL\n      cpp_type: MooseEnum\n      group_name: \n      options: FINAL INITIAL_BEFORE_PRESET INITIAL_AFTER_PRESET\n      description: |\n        Type of residual to be reported.  Choices are: FINAL INITIAL_BEFORE_PRESET INITIAL_AFTER_PRESET\n    - name: type\n      required: No\n      default: !!str Residual\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/ScalarL2Error\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str ScalarL2Error\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the scalar variable\n    subblocks:\n  - name: /UserObjects/ScalarVariable\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: component\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Component to output for this variable\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str ScalarVariable\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        Name of the variable\n    subblocks:\n  - name: /UserObjects/ScalePostprocessor\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: scaling_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The scaling factor\n    - name: type\n      required: No\n      default: !!str ScalePostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The postprocessor to be scaled\n    subblocks:\n  - name: /UserObjects/SideAverageValue\n    description: |\n      Computes the average value of a variable on a sideset. Note that this cannot be used on the centerline of an axisymmetric model.\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str SideAverageValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /UserObjects/SideFluxAverage\n    description: |\n      Computes the integral of the flux over the specified boundary\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diffusivity\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The name of the diffusivity material property that will be used in the flux computation.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str SideFluxAverage\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /UserObjects/SideFluxIntegral\n    description: |\n      Computes the integral of the flux over the specified boundary\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: diffusivity\n      required: Yes\n      default: !!str \n      cpp_type: MaterialPropertyName\n      group_name: \n      description: |\n        The name of the diffusivity material property that will be used in the flux computation.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str SideFluxIntegral\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /UserObjects/SideIntegralVariablePostprocessor\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str SideIntegralVariablePostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /UserObjects/SolutionRasterizer\n    description: |\n      Process an XYZ file of atomic coordinates and filter atoms via threshold or map variable values.\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: es\n      required: No\n      default: !!str <not supplied>\n      cpp_type: FileName\n      group_name: \n      description: |\n        The name of the file holding the equation system info in xda format (xda only).\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: mesh\n      required: Yes\n      default: !!str \n      cpp_type: MeshFileName\n      group_name: \n      description: |\n        The name of the mesh file (must be xda or exodusII file).\n    - name: raster_mode\n      required: No\n      default: !!str MAP\n      cpp_type: MooseEnum\n      group_name: \n      options: MAP FILTER\n      description: |\n        Rasterization mode (MAP|FILTER).\n    - name: rotation0_angle\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Anticlockwise rotation angle (in degrees) to use for rotation about rotation0_vector.\n    - name: rotation0_vector\n      required: No\n      default: !!str 0 0 1\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Vector about which to rotate points of the simulation.\n    - name: rotation1_angle\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Anticlockwise rotation angle (in degrees) to use for rotation about rotation1_vector.\n    - name: rotation1_vector\n      required: No\n      default: !!str 0 0 1\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Vector about which to rotate points of the simulation.\n    - name: scale\n      required: No\n      default: !!str 1 1 1 \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Scale factor for points in the simulation\n    - name: scale_multiplier\n      required: No\n      default: !!str 1 1 1 \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Scale multiplying factor for points in the simulation\n    - name: system\n      required: No\n      default: !!str nl0\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The name of the system to pull values out of (xda only).\n    - name: system_variables\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The name of the nodal and elemental variables from the file you want to use for values\n    - name: threshold\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Accept atoms with a variable value above this threshold in FILTER mode.\n    - name: timestep\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Index of the single timestep used or "LATEST" for the last timestep (exodusII only).  If not supplied, time interpolation will occur.\n    - name: transformation_order\n      required: No\n      default: !!str translation scale\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: rotation0 translation scale rotation1 scale_multiplier\n      description: |\n        The order to perform the operations in.  Define R0 to be the rotation matrix encoded by rotation0_vector and rotation0_angle.  Similarly for R1.  Denote the scale by s, the scale_multiplier by m, and the translation by t.  Then, given a point x in the simulation, if transformation_order = \'rotation0 scale_multiplier translation scale rotation1\' then form p = R1*(R0*x*m - t)/s.  Then the values provided by the SolutionUserObject at point x in the simulation are the variable values at point p in the mesh.\n    - name: translation\n      required: No\n      default: !!str 0 0 0 \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Translation factors for x,y,z coordinates of the simulation\n    - name: type\n      required: No\n      default: !!str SolutionRasterizer\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Variable from the mesh file to use for mapping to or filtering of the atoms.\n    - name: xyz_input\n      required: Yes\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        XYZ input file.\n    - name: xyz_output\n      required: Yes\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        XYZ output file.\n    subblocks:\n  - name: /UserObjects/SolutionUserObject\n    description: |\n      Reads a variable from a mesh in one simulation to another\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: es\n      required: No\n      default: !!str <not supplied>\n      cpp_type: FileName\n      group_name: \n      description: |\n        The name of the file holding the equation system info in xda format (xda only).\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: mesh\n      required: Yes\n      default: !!str \n      cpp_type: MeshFileName\n      group_name: \n      description: |\n        The name of the mesh file (must be xda or exodusII file).\n    - name: rotation0_angle\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Anticlockwise rotation angle (in degrees) to use for rotation about rotation0_vector.\n    - name: rotation0_vector\n      required: No\n      default: !!str 0 0 1\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Vector about which to rotate points of the simulation.\n    - name: rotation1_angle\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Anticlockwise rotation angle (in degrees) to use for rotation about rotation1_vector.\n    - name: rotation1_vector\n      required: No\n      default: !!str 0 0 1\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Vector about which to rotate points of the simulation.\n    - name: scale\n      required: No\n      default: !!str 1 1 1 \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Scale factor for points in the simulation\n    - name: scale_multiplier\n      required: No\n      default: !!str 1 1 1 \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Scale multiplying factor for points in the simulation\n    - name: system\n      required: No\n      default: !!str nl0\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The name of the system to pull values out of (xda only).\n    - name: system_variables\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        The name of the nodal and elemental variables from the file you want to use for values\n    - name: timestep\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Index of the single timestep used or "LATEST" for the last timestep (exodusII only).  If not supplied, time interpolation will occur.\n    - name: transformation_order\n      required: No\n      default: !!str translation scale\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: rotation0 translation scale rotation1 scale_multiplier\n      description: |\n        The order to perform the operations in.  Define R0 to be the rotation matrix encoded by rotation0_vector and rotation0_angle.  Similarly for R1.  Denote the scale by s, the scale_multiplier by m, and the translation by t.  Then, given a point x in the simulation, if transformation_order = \'rotation0 scale_multiplier translation scale rotation1\' then form p = R1*(R0*x*m - t)/s.  Then the values provided by the SolutionUserObject at point x in the simulation are the variable values at point p in the mesh.\n    - name: translation\n      required: No\n      default: !!str 0 0 0 \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Translation factors for x,y,z coordinates of the simulation\n    - name: type\n      required: No\n      default: !!str SolutionUserObject\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/TensorMechanicsHardeningConstant\n    description: |\n      No hardening - the parameter is independent of the internal parameter(s)\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: convert_to_radians\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true, the value you entered will be multiplied by Pi/180 before passing to the Plasticity algorithms\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: type\n      required: No\n      default: !!str TensorMechanicsHardeningConstant\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The value of the parameter for all internal parameter.  This is perfect plasticity - there is no hardening.\n    subblocks:\n  - name: /UserObjects/TensorMechanicsHardeningCubic\n    description: |\n      Hardening is Cubic\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: internal_0\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The value of the internal_parameter when hardening begins\n    - name: internal_limit\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The value of the internal_parameter when hardening ends.  This hardening forms a cubic between (internal_0, value_0) and (internal_limit, value_residual) that is smooth at internal_0 and internal_limit\n    - name: type\n      required: No\n      default: !!str TensorMechanicsHardeningCubic\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value_0\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The value of the parameter for all internal_parameter <= internal_0\n    - name: value_residual\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The value of the parameter for internal_parameter >= internal_limit.  Default = value_0, ie perfect plasticity\n    subblocks:\n  - name: /UserObjects/TensorMechanicsHardeningCutExponential\n    description: |\n      Hardening is Cut-exponential\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: internal_0\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The cutoff of internal parameter\n    - name: rate\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Let p = internal_parameter.  Then value = value_0 for p<internal_0, and otherwise, value = value_residual + (value_0 - value_residual)*exp(-rate*(p - internal_0)\n    - name: type\n      required: No\n      default: !!str TensorMechanicsHardeningCutExponential\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value_0\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The value of the parameter for all internal_parameter <= internal_0\n    - name: value_residual\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The value of the parameter for internal_parameter = infinity.  Default = value_0, ie perfect plasticity\n    subblocks:\n  - name: /UserObjects/TensorMechanicsHardeningExponential\n    description: |\n      Hardening is Exponential\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: rate\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Let p = internal_parameter.  Then value = value_residual + (value_0 - value_residual)*exp(-rate*intnal_parameter)\n    - name: type\n      required: No\n      default: !!str TensorMechanicsHardeningExponential\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value_0\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The value of the parameter at internal_parameter = 0\n    - name: value_residual\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The value of the parameter for internal_parameter = infinity.  Default = value_0, ie perfect plasticity\n    subblocks:\n  - name: /UserObjects/TensorMechanicsHardeningGaussian\n    description: |\n      Hardening is Gaussian\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: internal_0\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The value of the internal_parameter when hardening begins\n    - name: rate\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Let p = internal_parameter.  Then value = value_0 for p<internal_0, and value = value_residual + (value_0 - value_residual)*exp(-0.5*rate*(p - internal_0)^2)\n    - name: type\n      required: No\n      default: !!str TensorMechanicsHardeningGaussian\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value_0\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The value of the parameter for all internal_parameter <= internal_0\n    - name: value_residual\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The value of the parameter for internal_parameter = infinity.  Default = value_0, ie perfect plasticity\n    subblocks:\n  - name: /UserObjects/TensorMechanicsHardeningPowerRule\n    description: |\n      Hardening defined by power rule\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: epsilon0\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The reference strain\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: exponent\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Let p = internal_parameter.  Then value = value_0 * (p / epsilon0 + 1)^{exponent})\n    - name: type\n      required: No\n      default: !!str TensorMechanicsHardeningPowerRule\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value_0\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The yield strength when internal variable = 0\n    subblocks:\n  - name: /UserObjects/TensorMechanicsPlasticDruckerPrager\n    description: |\n      Non-associative Drucker Prager plasticity with no smoothing of the cone tip.\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: internal_constraint_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n    - name: mc_cohesion\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the Mohr-Coulomb cohesion.  Physically this should not be negative.\n    - name: mc_dilation_angle\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the Mohr-Coulomb dilation angle (in radians).  Usually the dilation angle is not greater than the friction angle, and it is between 0 and Pi/2.\n    - name: mc_friction_angle\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the Mohr-Coulomb friction angle (in radians).  Physically this should be between 0 and Pi/2.\n    - name: mc_interpolation_scheme\n      required: No\n      default: !!str lode_zero\n      cpp_type: MooseEnum\n      group_name: \n      options: outer_tip inner_tip lode_zero inner_edge native\n      description: |\n        Scheme by which the Drucker-Prager cohesion, friction angle and dilation angle are set from the Mohr-Coulomb parameters mc_cohesion, mc_friction_angle and mc_dilation_angle.  Consider the DP and MC yield surfaces on the devatoric (octahedral) plane.  Outer_tip: the DP circle touches the outer tips of the MC hex.  Inner_tip: the DP circle touches the inner tips of the MC hex.  Lode_zero: the DP circle intersects the MC hex at lode angle=0.  Inner_edge: the DP circle is the largest circle that wholey fits inside the MC hex.  Native: The DP cohesion, friction angle and dilation angle are set equal to the mc_ parameters entered.\n    - name: type\n      required: No\n      default: !!str TensorMechanicsPlasticDruckerPrager\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_function_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n    subblocks:\n  - name: /UserObjects/TensorMechanicsPlasticDruckerPragerHyperbolic\n    description: |\n      Non-associative Drucker Prager plasticity with hyperbolic smoothing of the cone tip.\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: internal_constraint_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n    - name: max_iterations\n      required: No\n      default: !!str 40\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum iterations to use in the custom return map function\n    - name: mc_cohesion\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the Mohr-Coulomb cohesion.  Physically this should not be negative.\n    - name: mc_dilation_angle\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the Mohr-Coulomb dilation angle (in radians).  Usually the dilation angle is not greater than the friction angle, and it is between 0 and Pi/2.\n    - name: mc_friction_angle\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the Mohr-Coulomb friction angle (in radians).  Physically this should be between 0 and Pi/2.\n    - name: mc_interpolation_scheme\n      required: No\n      default: !!str lode_zero\n      cpp_type: MooseEnum\n      group_name: \n      options: outer_tip inner_tip lode_zero inner_edge native\n      description: |\n        Scheme by which the Drucker-Prager cohesion, friction angle and dilation angle are set from the Mohr-Coulomb parameters mc_cohesion, mc_friction_angle and mc_dilation_angle.  Consider the DP and MC yield surfaces on the devatoric (octahedral) plane.  Outer_tip: the DP circle touches the outer tips of the MC hex.  Inner_tip: the DP circle touches the inner tips of the MC hex.  Lode_zero: the DP circle intersects the MC hex at lode angle=0.  Inner_edge: the DP circle is the largest circle that wholey fits inside the MC hex.  Native: The DP cohesion, friction angle and dilation angle are set equal to the mc_ parameters entered.\n    - name: smoother\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The cone vertex at J2=0 is smoothed.  The maximum mean stress possible, which is Cohesion*Cot(friction_angle) for smoother=0, becomes (Cohesion - smoother/3)*Cot(friction_angle).  This is a non-hardening parameter\n    - name: type\n      required: No\n      default: !!str TensorMechanicsPlasticDruckerPragerHyperbolic\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_custom_cto\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to use the custom consistent tangent operator computations.  Set to true if you are using isotropic elasticity.\n    - name: use_custom_returnMap\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to use the custom returnMap algorithm.  Set to true if you are using isotropic elasticity.\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_function_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n    subblocks:\n  - name: /UserObjects/TensorMechanicsPlasticIsotropicSD\n    description: |\n      IsotropicSD plasticity for pressure sensitive materials and also models the strength differential effect\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: associative\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Flag for flow-rule, true if not specified\n    - name: b\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        A constant to model the influence of pressure\n    - name: c\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        A constant to model the influence of strength differential effect\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: internal_constraint_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n    - name: max_iterations\n      required: No\n      default: !!str 10\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum iterations for custom J2 return map\n    - name: type\n      required: No\n      default: !!str TensorMechanicsPlasticIsotropicSD\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_custom_cto\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to use the custom consistent tangent operator computations.  Set to true if you are using isotropic elasticity.\n    - name: use_custom_returnMap\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to use the custom returnMap algorithm.  Set to true if you are using isotropic elasticity.\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_function_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n    - name: yield_strength\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the yield strength\n    subblocks:\n  - name: /UserObjects/TensorMechanicsPlasticJ2\n    description: |\n      J2 plasticity, associative, with hardening\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: internal_constraint_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n    - name: max_iterations\n      required: No\n      default: !!str 10\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum iterations for custom J2 return map\n    - name: type\n      required: No\n      default: !!str TensorMechanicsPlasticJ2\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_custom_cto\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to use the custom consistent tangent operator computations.  Set to true if you are using isotropic elasticity.\n    - name: use_custom_returnMap\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to use the custom returnMap algorithm.  Set to true if you are using isotropic elasticity.\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_function_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n    - name: yield_strength\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the yield strength\n    subblocks:\n  - name: /UserObjects/TensorMechanicsPlasticMeanCap\n    description: |\n      Class that limits the mean stress.  Yield function = a*mean_stress - strength.  mean_stress = (stress_xx + stress_yy + stress_zz)/3\n    parameters:\n    - name: a\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Yield function = a*mean_stress - strength\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: internal_constraint_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n    - name: strength\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Yield function = a*mean_stress - strength\n    - name: type\n      required: No\n      default: !!str TensorMechanicsPlasticMeanCap\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_function_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n    subblocks:\n  - name: /UserObjects/TensorMechanicsPlasticMeanCapTC\n    description: |\n      Associative mean-cap tensile and compressive plasticity with hardening/softening\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: compressive_strength\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the mean-cap compressive strength.  This should always be less than tensile_strength (it will typically be negative).  Yield function = - (trace(stress) - compressive_strength) for trace(stress)<compressive_strength.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: internal_constraint_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n    - name: max_iterations\n      required: No\n      default: !!str 10\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum iterations for custom MeanCapTC return map\n    - name: tensile_strength\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the mean-cap tensile strength (it will typically be positive).  Yield function = trace(stress) - tensile_strength for trace(stress)>tensile_strength.\n    - name: type\n      required: No\n      default: !!str TensorMechanicsPlasticMeanCapTC\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_custom_cto\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to use the custom consistent tangent operator computations.\n    - name: use_custom_returnMap\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to use the custom MeanCapTC returnMap algorithm.\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_function_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n    subblocks:\n  - name: /UserObjects/TensorMechanicsPlasticMohrCoulomb\n    description: |\n      Non-associative Mohr-Coulomb plasticity with hardening/softening\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: cap_rate\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        For the \'cap\' tip_scheme, this controls how quickly the cap degenerates to a hemisphere: small values mean a slow degeneration to a hemisphere (and zero means the \'cap\' will be totally inactive).  Typical value is 1/tensile_strength\n    - name: cap_start\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        For the \'cap\' tip_scheme, smoothing is performed in the stress_mean > cap_start region\n    - name: cohesion\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the cohesion.  Physically the cohesion should not be negative.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: dilation_angle\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the dilation angle (in radians).  Usually the dilation angle is not greater than the friction angle, and it is between 0 and 90deg.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: friction_angle\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the friction angle (in radians).  Physically the friction angle should be between 0 and 90deg.\n    - name: internal_constraint_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n    - name: mc_edge_smoother\n      required: No\n      default: !!str 25\n      cpp_type: double\n      group_name: \n      description: |\n        Smoothing parameter: the edges of the cone are smoothed by the given amount.\n    - name: mc_lode_cutoff\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        If the second invariant of stress is less than this amount, the Lode angle is assumed to be zero.  This is to gaurd against precision-loss problems, and this parameter should be set small.  Default = 0.00001*((yield_Function_tolerance)^2)\n    - name: mc_tip_smoother\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Smoothing parameter: the cone vertex at mean = cohesion*cot(friction_angle), will be smoothed by the given amount.  Typical value is 0.1*cohesion\n    - name: tip_scheme\n      required: No\n      default: !!str hyperbolic\n      cpp_type: MooseEnum\n      group_name: \n      options: hyperbolic cap\n      description: |\n        Scheme by which the pyramid\'s tip will be smoothed.\n    - name: type\n      required: No\n      default: !!str TensorMechanicsPlasticMohrCoulomb\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_function_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n    subblocks:\n  - name: /UserObjects/TensorMechanicsPlasticMohrCoulombMulti\n    description: |\n      Non-associative Mohr-Coulomb plasticity with hardening/softening\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: cohesion\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the cohesion\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: dilation_angle\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the dilation angle (in radians)\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: friction_angle\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the friction angle (in radians)\n    - name: internal_constraint_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n    - name: max_iterations\n      required: No\n      default: !!str 10\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of Newton-Raphson iterations allowed in the custom return-map algorithm.  For highly nonlinear hardening this may need to be higher than 10.\n    - name: shift\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Yield surface is shifted by this amount to avoid problems with defining derivatives when eigenvalues are equal.  If this is larger than f_tol, a warning will be issued.  This may be set very small when using the custom returnMap.  Default = f_tol.\n    - name: type\n      required: No\n      default: !!str TensorMechanicsPlasticMohrCoulombMulti\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_custom_returnMap\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Use a custom return-map algorithm for this plasticity model, which may speed up computations considerably.  Set to true only for isotropic elasticity with no hardening of the dilation angle.  In this case you may set \'shift\' very small.\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_function_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n    subblocks:\n  - name: /UserObjects/TensorMechanicsPlasticOrthotropic\n    description: |\n      Orthotropic plasticity for pressure sensitive materials and also models the strength differential effect\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: associative\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Flag for flow-rule, true if not specified\n    - name: b\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        A constant to model the influence of pressure\n    - name: c\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        A constant to model the influence of strength differential effect\n    - name: c1\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The six coefficients of L prime\n    - name: c2\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The six coefficients of L prime prime\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: internal_constraint_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n    - name: max_iterations\n      required: No\n      default: !!str 10\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum iterations for custom J2 return map\n    - name: type\n      required: No\n      default: !!str TensorMechanicsPlasticOrthotropic\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_custom_cto\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to use the custom consistent tangent operator computations.  Set to true if you are using isotropic elasticity.\n    - name: use_custom_returnMap\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to use the custom returnMap algorithm.  Set to true if you are using isotropic elasticity.\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_function_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n    - name: yield_strength\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the yield strength\n    subblocks:\n  - name: /UserObjects/TensorMechanicsPlasticSimpleTester\n    description: |\n      Class that can be used for testing multi-surface plasticity models.  Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n    parameters:\n    - name: a\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: b\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n    - name: c\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: d\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n    - name: e\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: f\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n    - name: internal_constraint_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n    - name: strength\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Yield function = a*stress_yy + b*stress_zz + c*stress_xx + d*(stress_xy + stress_yx)/2 + e*(stress_xz + stress_zx)/2 + f*(stress_yz + stress_zy)/2 - strength\n    - name: type\n      required: No\n      default: !!str TensorMechanicsPlasticSimpleTester\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_function_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n    subblocks:\n  - name: /UserObjects/TensorMechanicsPlasticTensile\n    description: |\n      Associative tensile plasticity with hardening/softening, and tensile_strength = 1\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: cap_rate\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        For the \'cap\' tip_scheme, this controls how quickly the cap degenerates to a hemisphere: small values mean a slow degeneration to a hemisphere (and zero means the \'cap\' will be totally inactive).  Typical value is 1/tensile_strength\n    - name: cap_start\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        For the \'cap\' tip_scheme, smoothing is performed in the stress_mean > cap_start region\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: internal_constraint_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n    - name: tensile_edge_smoother\n      required: No\n      default: !!str 25\n      cpp_type: double\n      group_name: \n      description: |\n        Smoothing parameter: the edges of the cone are smoothed by the given amount.\n    - name: tensile_lode_cutoff\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        If the second invariant of stress is less than this amount, the Lode angle is assumed to be zero.  This is to gaurd against precision-loss problems, and this parameter should be set small.  Default = 0.00001*((yield_Function_tolerance)^2)\n    - name: tensile_strength\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the tensile strength\n    - name: tensile_tip_smoother\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        For the \'hyperbolic\' tip_scheme, the pyramid vertex will be smoothed by the given amount.  For the \'cap\' tip_scheme, additional smoothing will occur.  Typical value is 0.1*tensile_strength\n    - name: tip_scheme\n      required: No\n      default: !!str hyperbolic\n      cpp_type: MooseEnum\n      group_name: \n      options: hyperbolic cap\n      description: |\n        Scheme by which the pyramid\'s tip will be smoothed.\n    - name: type\n      required: No\n      default: !!str TensorMechanicsPlasticTensile\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_function_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n    subblocks:\n  - name: /UserObjects/TensorMechanicsPlasticTensileMulti\n    description: |\n      Associative tensile plasticity with hardening/softening\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: internal_constraint_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n    - name: max_iterations\n      required: No\n      default: !!str 10\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of Newton-Raphson iterations allowed in the custom return-map algorithm.  For highly nonlinear hardening this may need to be higher than 10.\n    - name: shift\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Yield surface is shifted by this amount to avoid problems with defining derivatives when eigenvalues are equal.  If this is larger than f_tol, a warning will be issued.  Default = f_tol.\n    - name: tensile_strength\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the tensile strength\n    - name: type\n      required: No\n      default: !!str TensorMechanicsPlasticTensileMulti\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_custom_cto\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to use the custom consistent tangent operator computations.  Set to true if you are using isotropic elasticity.\n    - name: use_custom_returnMap\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to use the custom returnMap algorithm.  Set to true if you are using isotropic elasticity.\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_function_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n    subblocks:\n  - name: /UserObjects/TensorMechanicsPlasticWeakPlaneShear\n    description: |\n      Non-associative finite-strain weak-plane shear perfect plasticity.  Here cohesion = 1, tan(phi) = 1 = tan(psi)\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: cap_rate\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        For the \'cap\' tip_scheme, this controls how quickly the cap degenerates to a hemisphere: small values mean a slow degeneration to a hemisphere (and zero means the \'cap\' will be totally inactive).  Typical value is 1/cohesion\n    - name: cap_start\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        For the \'cap\' tip_scheme, smoothing is performed in the stress_zz > cap_start region\n    - name: cohesion\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the cohesion.  Physically the cohesion should not be negative.\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: internal_constraint_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n    - name: smoother\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        For the \'hyperbolic\' tip_scheme, the cone vertex at shear-stress = 0 will be smoothed by the given amount.  For the \'cap\' tip_scheme, additional smoothing will occur.  Typical value is 0.1*cohesion\n    - name: tan_dilation_angle\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the tan(dilation angle).  Usually the dilation angle is not greater than the friction angle, and it is between 0 and 90deg.\n    - name: tan_friction_angle\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of tan(friction angle).  Physically the friction angle should be between 0 and 90deg.\n    - name: tip_scheme\n      required: No\n      default: !!str hyperbolic\n      cpp_type: MooseEnum\n      group_name: \n      options: hyperbolic cap\n      description: |\n        Scheme by which the cone\'s tip will be smoothed.\n    - name: type\n      required: No\n      default: !!str TensorMechanicsPlasticWeakPlaneShear\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_function_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n    subblocks:\n  - name: /UserObjects/TensorMechanicsPlasticWeakPlaneTensile\n    description: |\n      Associative weak-plane tensile plasticity with hardening/softening\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: internal_constraint_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n    - name: stress_coefficient\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The yield function is stress_coefficient * stress_zz - tensile_strength\n    - name: tensile_strength\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the weak-plane tensile strength\n    - name: type\n      required: No\n      default: !!str TensorMechanicsPlasticWeakPlaneTensile\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_function_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n    subblocks:\n  - name: /UserObjects/TensorMechanicsPlasticWeakPlaneTensileN\n    description: |\n      Associative weak-plane tensile plasticity with hardening/softening, with specified, fixed normal vector.  (WeakPlaneTensile combined with specifying N in the Material might be preferable to you.)\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: internal_constraint_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The Newton-Raphson process is only deemed converged if the internal constraint is less than this.\n    - name: normal_vector\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        The normal vector to the weak plane\n    - name: stress_coefficient\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The yield function is stress_coefficient * stress_zz - tensile_strength\n    - name: tensile_strength\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        A TensorMechanicsHardening UserObject that defines hardening of the weak-plane tensile strength\n    - name: type\n      required: No\n      default: !!str TensorMechanicsPlasticWeakPlaneTensileN\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: yield_function_tolerance\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        If the yield function is less than this amount, the (stress, internal parameter) are deemed admissible.\n    subblocks:\n  - name: /UserObjects/Terminator\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: expression\n      required: Yes\n      default: !!str \n      cpp_type: FunctionExpression\n      group_name: \n      description: |\n        FParser expression to process Postprocessor values into a boolean value. Termination of the simulation occurs when this returns true.\n    - name: type\n      required: No\n      default: !!str Terminator\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/TimeExtremeValue\n    description: |\n      A postprocessor for reporting the extreme value of another postprocessor over time.\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: postprocessor\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the postprocessor used for reporting time extreme values\n    - name: type\n      required: No\n      default: !!str TimeExtremeValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value_type\n      required: No\n      default: !!str max\n      cpp_type: MooseEnum\n      group_name: \n      options: max min abs_max abs_min\n      description: |\n        Type of extreme value to return.\'max\' returns the maximum value.\'min\' returns the minimum value.\'abs_max\' returns the maximum absolute value.\'abs_min\' returns the minimum absolute value.\n    subblocks:\n  - name: /UserObjects/TimestepSize\n    description: |\n      Reports the timestep size\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str TimestepSize\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/TorqueReaction\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: axis_origin\n      required: No\n      default: !!str 0 0 0\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        Origin of the axis of rotation used to calculate the torque\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction_vector\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        The direction vector of the axis of rotation about which the calculated torque is calculated\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: react\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: \n      description: |\n        The reaction variables\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str TorqueReaction\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: unique_node_execute\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/TotalVariableValue\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str TotalVariableValue\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: No\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the postprocessor\n    subblocks:\n  - name: /UserObjects/VariableInnerProduct\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: second_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the second variable in the inner product (variable, second_variable)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str VariableInnerProduct\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/VariableResidual\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str VariableResidual\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable to compute the residual for\n    subblocks:\n  - name: /UserObjects/VolumePostprocessor\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str VolumePostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n- name: /Variables\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /Variables/*\n    description: |\n      \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The block id where this variable lives\n    - name: eigen\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        True to make this variable an eigen variable\n    - name: family\n      required: No\n      default: !!str LAGRANGE\n      cpp_type: MooseEnum\n      group_name: \n      options: LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN L2_LAGRANGE L2_HIERARCHIC\n      description: |\n        Specifies the family of FE shape functions to use for this variable\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: initial_condition\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Specifies the initial condition for this variable\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: CONSTANT FIRST SECOND THIRD FOURTH\n      description: |\n        Specifies the order of the FE shape function to use for this variable (additional orders not listed are allowed)\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: scaling\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \'Advanced\'\n      description: |\n        Specifies a scaling factor to apply to this variable\n    - name: initial_from_file_timestep\n      required: No\n      default: !!str LATEST\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \'Initial From File\'\n      description: |\n        Gives the timestep (or "LATEST") for which to read a solution from a file for a given variable. (Default: LATEST)\n    - name: initial_from_file_var\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \'Initial From File\'\n      description: |\n        Gives the name of a variable for which to read an initial condition from a mesh file\n    subblocks:\n    - name: /Variables/*/InitialCondition\n      description: |\n        \n      parameters:\n      - name: inactive\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n        group_name: \n        description: |\n          If specified blocks matching these identifiers will be skipped.\n      - name: isObjectAction\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          Indicates that this is a MooseObjectAction.\n      - name: type\n        required: Yes\n        default: !!str \n        cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n        group_name: \n        description: |\n          A string representing the Moose Object that will be built by this Action\n      subblocks:\n      - name: /Variables/*/InitialCondition/<type>\n        description: |\n          \n        parameters:\n        subblocks:\n        - name: /Variables/*/InitialCondition/<type>/BimodalInverseSuperellipsoidsIC\n          description: |\n            Bimodal size distribution of large particles (specified in input file, value invalue) and small particles (placed randomly inside the larger particles, value outvalue)\n          parameters:\n          - name: as\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Semiaxis a for each superellipsoid\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: bs\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Semiaxis b for each superellipsoid\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: cs\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Semiaxis c for each superellipsoid\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the superellipsoid\n          - name: large_spac\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              minimum spacing between large and small particles, measured from closest edge to closest edge\n          - name: nestedvalue\n            required: No\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value for nested particles inside the superellipsoid in inverse configuration\n          - name: npart\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The number of random (small) particles to place\n          - name: ns\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Exponent n for each superellipsoid\n          - name: numtries\n            required: No\n            default: !!str 1000\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The number of tries to place the random particles\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the superellipsoid\n          - name: rand_seed\n            required: No\n            default: !!str 12345\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: size_variation\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Plus or minus fraction of random variation in the semiaxes for uniform, standard deviation for normal\n          - name: size_variation_type\n            required: No\n            default: !!str none\n            cpp_type: MooseEnum\n            group_name: \n            options: uniform normal none\n            description: |\n              Type of distribution that random semiaxes will follow\n          - name: small_a\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Mean semiaxis a value for the randomly placed (small) superellipsoids\n          - name: small_b\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Mean semiaxis b value for the randomly placed (small) superellipsoids\n          - name: small_c\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Mean semiaxis c value for the randomly placed (small) superellipsoids\n          - name: small_n\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Exponent n for the randomly placed (small) superellipsoids\n          - name: small_spac\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              minimum spacing between small particles, measured from closest edge to closest edge\n          - name: type\n            required: No\n            default: !!str BimodalInverseSuperellipsoidsIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x_positions\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The x-coordinate for each superellipsoid center\n          - name: y_positions\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The y-coordinate for each superellipsoid center\n          - name: z_positions\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The z-coordinate for each superellipsoid center\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/BimodalSuperellipsoidsIC\n          description: |\n            Bimodal size distribution of large particles (specified in input file) and small particles (placed randomly outside the larger particles)\n          parameters:\n          - name: as\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Semiaxis a for each superellipsoid\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: bs\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Semiaxis b for each superellipsoid\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: cs\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Semiaxis c for each superellipsoid\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the superellipsoid\n          - name: large_spac\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              minimum spacing between large and small particles, measured from closest edge to closest edge\n          - name: nestedvalue\n            required: No\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value for nested particles inside the superellipsoid in inverse configuration\n          - name: npart\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The number of random (small) particles to place\n          - name: ns\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Exponent n for each superellipsoid\n          - name: numtries\n            required: No\n            default: !!str 1000\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The number of tries to place the random particles\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the superellipsoid\n          - name: rand_seed\n            required: No\n            default: !!str 12345\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: size_variation\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Plus or minus fraction of random variation in the semiaxes for uniform, standard deviation for normal\n          - name: size_variation_type\n            required: No\n            default: !!str none\n            cpp_type: MooseEnum\n            group_name: \n            options: uniform normal none\n            description: |\n              Type of distribution that random semiaxes will follow\n          - name: small_a\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Mean semiaxis a value for the randomly placed (small) superellipsoids\n          - name: small_b\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Mean semiaxis b value for the randomly placed (small) superellipsoids\n          - name: small_c\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Mean semiaxis c value for the randomly placed (small) superellipsoids\n          - name: small_n\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Exponent n for the randomly placed (small) superellipsoids\n          - name: small_spac\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              minimum spacing between small particles, measured from closest edge to closest edge\n          - name: type\n            required: No\n            default: !!str BimodalSuperellipsoidsIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x_positions\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The x-coordinate for each superellipsoid center\n          - name: y_positions\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The y-coordinate for each superellipsoid center\n          - name: z_positions\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The z-coordinate for each superellipsoid center\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/BoundingBoxIC\n          description: |\n            \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: inside\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The value of the variable inside the box\n          - name: outside\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The value of the variable outside the box\n          - name: type\n            required: No\n            default: !!str BoundingBoxIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the lower left-hand corner of the box\n          - name: x2\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the upper right-hand corner of the box\n          - name: y1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the lower left-hand corner of the box\n          - name: y2\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the upper right-hand corner of the box\n          - name: z1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the lower left-hand corner of the box\n          - name: z2\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the upper right-hand corner of the box\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/ClosePackIC\n          description: |\n            Close packed arrangement of smooth circles\n          parameters:\n          - name: 3D_spheres\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              in 3D, whether the objects are spheres or columns\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: radius\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The radius of a circle\n          - name: rand_seed\n            required: No\n            default: !!str 12345\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str ClosePackIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/ConstantIC\n          description: |\n            \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: type\n            required: No\n            default: !!str ConstantIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: value\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The value to be set in IC\n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/CrossIC\n          description: |\n            Cross-shaped initial condition\n          parameters:\n          - name: amplitude\n            required: No\n            default: !!str 1\n            cpp_type: double\n            group_name: \n            description: |\n              The amplitude\n          - name: average\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The average value\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: buffer\n            required: No\n            default: !!str 0.03125\n            cpp_type: double\n            group_name: \n            description: |\n              A small area between the max value and the interface\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: interface\n            required: No\n            default: !!str 0.03125\n            cpp_type: double\n            group_name: \n            description: |\n              The interface width\n          - name: length\n            required: No\n            default: !!str 0.75\n            cpp_type: double\n            group_name: \n            description: |\n              The length\n          - name: type\n            required: No\n            default: !!str CrossIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: width\n            required: No\n            default: !!str 0.125\n            cpp_type: double\n            group_name: \n            description: |\n              The width\n          - name: x1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the lower left-hand corner of the box\n          - name: x2\n            required: No\n            default: !!str 1\n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the upper right-hand corner of the box\n          - name: y1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the lower left-hand corner of the box\n          - name: y2\n            required: No\n            default: !!str 1\n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the upper right-hand corner of the box\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/FunctionIC\n          description: |\n            \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: function\n            required: Yes\n            default: !!str \n            cpp_type: FunctionName\n            group_name: \n            description: |\n              The initial condition function.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: type\n            required: No\n            default: !!str FunctionIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/FunctionScalarIC\n          description: |\n            \n          parameters:\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: function\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n            group_name: \n            description: |\n              The initial condition function.\n          - name: type\n            required: No\n            default: !!str FunctionScalarIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: No\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/LatticeSmoothCircleIC\n          description: |\n            Perturbed square lattice of smooth circles\n          parameters:\n          - name: 3D_spheres\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              in 3D, whether the objects are spheres or columns\n          - name: Rnd_variation\n            required: No\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Variation from central lattice position\n          - name: avoid_bounds\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              Don\'t place any bubbles on the simulation cell boundaries\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: circles_per_side\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n            group_name: \n            description: |\n              Vector containing the number of bubbles along each side\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: pos_variation\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Variation from central lattice position\n          - name: radius\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Mean radius value for the circels\n          - name: radius_variation\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Plus or minus fraction of random variation in the bubble radius\n          - name: radius_variation_type\n            required: No\n            default: !!str none\n            cpp_type: MooseEnum\n            group_name: \n            options: uniform normal none\n            description: |\n              Type of distribution that random circle radii will follow\n          - name: rand_seed\n            required: No\n            default: !!str 2000\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              random seed\n          - name: type\n            required: No\n            default: !!str LatticeSmoothCircleIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/MultiBoundingBoxIC\n          description: |\n            Specify variable values inside and outside a list of box shaped axis-aligned regions defined by pairs of opposing corners\n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: corners\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<libMesh::Point, std::allocator<libMesh::Point> >\n            group_name: \n            description: |\n              The corner coordinates boxes\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: inside\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The value of the variable inside each box (one value per box or a single value for all boxes)\n          - name: opposite_corners\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<libMesh::Point, std::allocator<libMesh::Point> >\n            group_name: \n            description: |\n              The coordinates of the opposite corners of the boxes\n          - name: outside\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The value of the variable outside the box\n          - name: type\n            required: No\n            default: !!str MultiBoundingBoxIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/MultiSmoothCircleIC\n          description: |\n            Random distribution of smooth circles with given minimum spacing\n          parameters:\n          - name: 3D_spheres\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              in 3D, whether the objects are spheres or columns\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: bubspac\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              minimum spacing of bubbles, measured from center to center\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: numbub\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The number of bubbles to place\n          - name: numtries\n            required: No\n            default: !!str 1000\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The number of tries\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: radius\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Mean radius value for the circles\n          - name: radius_variation\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Plus or minus fraction of random variation in the bubble radius for uniform, standard deviation for normal\n          - name: radius_variation_type\n            required: No\n            default: !!str none\n            cpp_type: MooseEnum\n            group_name: \n            options: uniform normal none\n            description: |\n              Type of distribution that random circle radii will follow\n          - name: rand_seed\n            required: No\n            default: !!str 12345\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str MultiSmoothCircleIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/MultiSmoothSuperellipsoidIC\n          description: |\n            Random distribution of smooth ellipse with given minimum spacing\n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: bubspac\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Vector of the minimum spacing of bubbles of one type, measured from center to center\n          - name: check_extremes\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Check all Superellipsoid extremes (center +- each semiaxis) for overlap, must have prevent_overlap set to True.\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: exponent\n            required: No\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Vector of exponents for each superellipsoid, n=2 is a normal ellipse\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the superellipsoid\n          - name: max_num_tries\n            required: No\n            default: !!str 1000\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The number of tries\n          - name: nestedvalue\n            required: No\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value for nested particles inside the superellipsoid in inverse configuration\n          - name: numbub\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n            group_name: \n            description: |\n              Vector of the number of bubbles to place\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the superellipsoid\n          - name: prevent_overlap\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Check all Superellipsoid centers for overlap with other Superellipsoids.\n          - name: rand_seed\n            required: No\n            default: !!str 12345\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: semiaxis_a\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Vector of mean semiaxis values in the x direction for the ellipse\n          - name: semiaxis_a_variation\n            required: No\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Vector of plus or minus fractions of random variation in the bubble semiaxis in the x direction for uniform, standard deviation for normal\n          - name: semiaxis_b\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Vector of mean semiaxis values in the y direction for the ellipse\n          - name: semiaxis_b_variation\n            required: No\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Vector of plus or minus fractions of random variation in the bubble semiaxis in the y direction for uniform, standard deviation for normal\n          - name: semiaxis_c\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Vector of mean semiaxis values in the z direction for the ellipse, must be set to 1 if 2D.\n          - name: semiaxis_c_variation\n            required: No\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Vector of plus or minus fractions of random variation in the bubble semiaxis in the z direction for uniform, standard deviation for normal. Must be set to 0 if 2D.\n          - name: semiaxis_variation_type\n            required: No\n            default: !!str none\n            cpp_type: MooseEnum\n            group_name: \n            options: uniform normal none\n            description: |\n              Type of distribution that random superellipsoid semiaxes will follow\n          - name: type\n            required: No\n            default: !!str MultiSmoothSuperellipsoidIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: vary_axes_independently\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              If true the length of each semiaxis is randomly chosen within the provided parameters, if false then one random number is generated and applied to all semiaxes.\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/PFCFreezingIC\n          description: |\n            \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: crystal_structure\n            required: No\n            default: !!str \n            cpp_type: MooseEnum\n            group_name: \n            options: FCC BCC\n            description: |\n              The type of crystal structure\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: inside\n            required: No\n            default: !!str 1\n            cpp_type: double\n            group_name: \n            description: |\n              Value inside sinusoids\n          - name: lc\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The lattice constant off the crystal structure\n          - name: max\n            required: No\n            default: !!str 1\n            cpp_type: double\n            group_name: \n            description: |\n              Upper bound of the randomly generated values\n          - name: min\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Lower bound of the randomly generated values\n          - name: outside\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Value outside sinusoids\n          - name: seed\n            required: No\n            default: !!str 0\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str PFCFreezingIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the lower left-hand corner of the frozen box\n          - name: x2\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the upper right-hand corner of the box\n          - name: y1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the lower left-hand corner of the frozen box\n          - name: y2\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the upper right-hand corner of the box\n          - name: z1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the lower left-hand corner of the box\n          - name: z2\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the upper right-hand corner of the box\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/PolycrystalColoringIC\n          description: |\n            Random Voronoi tesselation polycrystal (used by PolycrystalVoronoiICAction)\n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: op_index\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The index for the current order parameter\n          - name: polycrystal_ic_uo\n            required: Yes\n            default: !!str \n            cpp_type: UserObjectName\n            group_name: \n            description: |\n              TODO\n          - name: type\n            required: No\n            default: !!str PolycrystalColoringIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/PolycrystalRandomIC\n          description: |\n            Random initial condition for a polycrystalline material\n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: op_index\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The index for the current order parameter\n          - name: op_num\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Number of order parameters\n          - name: typ\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Type of random grain structure\n          - name: type\n            required: No\n            default: !!str PolycrystalRandomIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/PolycrystalVoronoiVoidIC\n          description: |\n            Random distribution of smooth circles with given minimum spacing\n          parameters:\n          - name: 3D_spheres\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              in 3D, whether the objects are spheres or columns\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: bubspac\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              minimum spacing of bubbles, measured from center to center\n          - name: columnar_3D\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              3D microstructure will be columnar in the z-direction?\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: grain_num\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Number of grains being represented by the order parameters\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: numbub\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The number of bubbles to place\n          - name: numtries\n            required: No\n            default: !!str 1000\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The number of tries\n          - name: op_index\n            required: No\n            default: !!str 0\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The index for the current order parameter, not needed if structure_type = voids\n          - name: op_num\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Number of order parameters\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: radius\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Mean radius value for the circles\n          - name: radius_variation\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Plus or minus fraction of random variation in the bubble radius for uniform, standard deviation for normal\n          - name: radius_variation_type\n            required: No\n            default: !!str none\n            cpp_type: MooseEnum\n            group_name: \n            options: uniform normal none\n            description: |\n              Type of distribution that random circle radii will follow\n          - name: rand_seed\n            required: No\n            default: !!str 12444\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The random seed\n          - name: structure_type\n            required: Yes\n            default: !!str \n            cpp_type: MooseEnum\n            group_name: \n            options: grains voids\n            description: |\n              Which structure type is being initialized, grains or voids\n          - name: type\n            required: No\n            default: !!str PolycrystalVoronoiVoidIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/RampIC\n          description: |\n            Linear ramp along the x-axis with given values at the left and right extreme points.\n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: type\n            required: No\n            default: !!str RampIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: value_left\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The value on left (xmin) boundary.\n          - name: value_right\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The value on right (xmax) boundary.\n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/RandomIC\n          description: |\n            \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: max\n            required: No\n            default: !!str 1\n            cpp_type: double\n            group_name: \n            description: |\n              Upper bound of the randomly generated values\n          - name: min\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Lower bound of the randomly generated values\n          - name: seed\n            required: No\n            default: !!str 0\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str RandomIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/ReconPhaseVarIC\n          description: |\n            \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: ebsd_reader\n            required: Yes\n            default: !!str \n            cpp_type: UserObjectName\n            group_name: \n            description: |\n              The EBSDReader object holding the EBSD data\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: phase\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              EBSD phase number this variable is to represent\n          - name: type\n            required: No\n            default: !!str ReconPhaseVarIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/RndBoundingBoxIC\n          description: |\n            Random noise with different min/max inside/outside of a bounding box\n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: mn_invalue\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The min value of the variable invalue the box\n          - name: mn_outvalue\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The min value of the variable outvalue the box\n          - name: mx_invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The max value of the variable invalue the box\n          - name: mx_outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The max value of the variable outvalue the box\n          - name: type\n            required: No\n            default: !!str RndBoundingBoxIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the lower left-hand corner of the box\n          - name: x2\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the upper right-hand corner of the box\n          - name: y1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the lower left-hand corner of the box\n          - name: y2\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the upper right-hand corner of the box\n          - name: z1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the lower left-hand corner of the box\n          - name: z2\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the upper right-hand corner of the box\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/RndSmoothCircleIC\n          description: |\n            Random noise with different min/max inside/outside of a smooth circle\n          parameters:\n          - name: 3D_spheres\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              in 3D, whether the objects are spheres or columns\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: radius\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The radius of a circle\n          - name: rand_seed\n            required: No\n            default: !!str 12345\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str RndSmoothCircleIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: variation_invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Plus or minus this amount on the invalue\n          - name: variation_outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Plus or minus this amount on the outvalue\n          - name: x1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the circle center\n          - name: y1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the circle center\n          - name: z1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the circle center\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/ScalarComponentIC\n          description: |\n            \n          parameters:\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: type\n            required: No\n            default: !!str ScalarComponentIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: values\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Initial values to initialize the scalar variable.\n          - name: variable\n            required: No\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/ScalarConstantIC\n          description: |\n            \n          parameters:\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: type\n            required: No\n            default: !!str ScalarConstantIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: value\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              \n          - name: variable\n            required: No\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/SmoothCircleFromFileIC\n          description: |\n            Multiple smooth circles read from a text file\n          parameters:\n          - name: 3D_spheres\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              in 3D, whether the objects are spheres or columns\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: file_name\n            required: Yes\n            default: !!str \n            cpp_type: FileName\n            group_name: \n            description: |\n              File containing circle centers and radii\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: rand_seed\n            required: No\n            default: !!str 12345\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str SmoothCircleFromFileIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/SmoothCircleIC\n          description: |\n            Circle with a smooth interface\n          parameters:\n          - name: 3D_spheres\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              in 3D, whether the objects are spheres or columns\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: radius\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The radius of a circle\n          - name: rand_seed\n            required: No\n            default: !!str 12345\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str SmoothCircleIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the circle center\n          - name: y1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the circle center\n          - name: z1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the circle center\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/SmoothSuperellipsoidIC\n          description: |\n            Superellipsoid with a smooth interface\n          parameters:\n          - name: a\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Semiaxis a of the superellipsoid\n          - name: b\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Semiaxis b of the superellipsoid\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: c\n            required: No\n            default: !!str 1\n            cpp_type: double\n            group_name: \n            description: |\n              Semiaxis c of the superellipsoid\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the superellipsoid\n          - name: n\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              Exponent n of the superellipsoid\n          - name: nestedvalue\n            required: No\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value for nested particles inside the superellipsoid in inverse configuration\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the superellipsoid\n          - name: rand_seed\n            required: No\n            default: !!str 12345\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str SmoothSuperellipsoidIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the superellipsoid center\n          - name: y1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the superellipsoid center\n          - name: z1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the superellipsoid center\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/SpecifiedSmoothCircleIC\n          description: |\n            Multiple smooth circles with manually specified radii and center points\n          parameters:\n          - name: 3D_spheres\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              in 3D, whether the objects are spheres or columns\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: radii\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The radius for each circle\n          - name: rand_seed\n            required: No\n            default: !!str 12345\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str SpecifiedSmoothCircleIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x_positions\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The x-coordinate for each circle center\n          - name: y_positions\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The y-coordinate for each circle center\n          - name: z_positions\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The z-coordinate for each circle center\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/SpecifiedSmoothSuperellipsoidIC\n          description: |\n            Multiple smooth superellipsoids with manually specified center points; semiaxes a,b,c; and exponents n\n          parameters:\n          - name: as\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Semiaxis a for each superellipsoid\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: bs\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Semiaxis b for each superellipsoid\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: cs\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Semiaxis c for each superellipsoid\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the superellipsoid\n          - name: nestedvalue\n            required: No\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value for nested particles inside the superellipsoid in inverse configuration\n          - name: ns\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Exponent n for each superellipsoid\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the superellipsoid\n          - name: rand_seed\n            required: No\n            default: !!str 12345\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str SpecifiedSmoothSuperellipsoidIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x_positions\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The x-coordinate for each superellipsoid center\n          - name: y_positions\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The y-coordinate for each superellipsoid center\n          - name: z_positions\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The z-coordinate for each superellipsoid center\n          - name: zero_gradient\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/ThumbIC\n          description: |\n            Thumb shaped bicrystal for grain boundary mobility tests\n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: height\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the circle center\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: type\n            required: No\n            default: !!str ThumbIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: width\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the circle center\n          - name: xcoord\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the circle center\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/Tricrystal2CircleGrainsIC\n          description: |\n            Tricrystal with two circles/bubbles\n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: op_index\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Index for the current grain order parameter\n          - name: op_num\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Number of grain order parameters\n          - name: type\n            required: No\n            default: !!str Tricrystal2CircleGrainsIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/TricrystalTripleJunctionIC\n          description: |\n            Tricrystal with a triple junction\n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: control_tags\n            required: No\n            default: !!str \n            cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n            group_name: \'Advanced\'\n            description: |\n              Adds user-defined labels for accessing object parameters via control logic.\n          - name: enable\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              Set the enabled status of the MooseObject.\n          - name: ignore_uo_dependency\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \'Advanced\'\n            description: |\n              When set to true, a UserObject retrieved by this IC will not be executed before the this IC\n          - name: junction\n            required: No\n            default: !!str \n            cpp_type: libMesh::Point\n            group_name: \n            description: |\n              The point where the triple junction is located. Default is the center of the mesh\n          - name: op_index\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Index for the current grain order parameter\n          - name: op_num\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Number of grain order parameters\n          - name: theta1\n            required: No\n            default: !!str 135\n            cpp_type: double\n            group_name: \n            description: |\n              Angle of first grain at triple junction in degrees\n          - name: theta2\n            required: No\n            default: !!str 135\n            cpp_type: double\n            group_name: \n            description: |\n              Angle of second grain at triple junction in degrees\n          - name: type\n            required: No\n            default: !!str TricrystalTripleJunctionIC\n            cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n  - name: /Variables/CHPFCRFFSplitVariables\n    description: |\n      \n    parameters:\n    - name: L_name_base\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name for the complex L variables\n    - name: family\n      required: No\n      default: !!str LAGRANGE\n      cpp_type: MooseEnum\n      group_name: \n      options: LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN L2_LAGRANGE L2_HIERARCHIC\n      description: |\n        Specifies the family of FE shape functions to use for the L variables\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: n_name\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        Name of atomic density variable\n    - name: num_L\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        specifies the number of complex L variables will be solved for\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: CONSTANT FIRST SECOND THIRD FOURTH\n      description: |\n        Specifies the order of the FE shape function to use for the L variables\n    - name: scaling\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Specifies a scaling factor to apply to the L variables\n    - name: sub_filenames\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<FileName, std::allocator<FileName> >\n      group_name: \n      description: |\n        This is the filename of the sub.i file\n    subblocks:\n  - name: /Variables/HHPFCRFFSplitVariables\n    description: |\n      \n    parameters:\n    - name: L_name_base\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name for the complex L variables\n    - name: family\n      required: No\n      default: !!str LAGRANGE\n      cpp_type: MooseEnum\n      group_name: \n      options: LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN L2_LAGRANGE L2_HIERARCHIC\n      description: |\n        Specifies the family of FE shape functions to use for the L variables\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: num_L\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        specifies the number of complex L variables will be solved for\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: CONSTANT FIRST SECOND THIRD FOURTH\n      description: |\n        Specifies the order of the FE shape function to use for the L variables\n    - name: scaling\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Specifies a scaling factor to apply to the L variables\n    subblocks:\n  - name: /Variables/PFCRFFVariables\n    description: |\n      \n    parameters:\n    - name: L_name_base\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        Base name for the complex L variables\n    - name: family\n      required: No\n      default: !!str LAGRANGE\n      cpp_type: MooseEnum\n      group_name: \n      options: LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN L2_LAGRANGE L2_HIERARCHIC\n      description: |\n        Specifies the family of FE shape functions to use for the L variables\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: num_L\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        specifies the number of complex L variables will be solved for\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: CONSTANT FIRST SECOND THIRD FOURTH\n      description: |\n        Specifies the order of the FE shape function to use for the L variables\n    - name: scaling\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Specifies a scaling factor to apply to the L variables\n    subblocks:\n  - name: /Variables/PolycrystalVariables\n    description: |\n      \n    parameters:\n    - name: family\n      required: No\n      default: !!str LAGRANGE\n      cpp_type: MooseEnum\n      group_name: \n      options: LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN L2_LAGRANGE L2_HIERARCHIC\n      description: |\n        Specifies the family of FE shape function to use for the order parameters\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: op_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        specifies the number of order parameters to create\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: CONSTANT FIRST SECOND THIRD FOURTH\n      description: |\n        Specifies the order of the FE shape function to use for the order parameters\n    - name: scaling\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Specifies a scaling factor to apply to this variable\n    - name: var_name_base\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        specifies the base name of the variables\n    subblocks:\n- name: /VectorPostprocessors\n  description: |\n    \n  parameters:\n  subblocks:\n  - name: /VectorPostprocessors/*\n    description: |\n      \n    parameters:\n    - name: inactive\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        If specified blocks matching these identifiers will be skipped.\n    - name: isObjectAction\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Indicates that this is a MooseObjectAction.\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /VectorPostprocessors/CSVReader\n    description: |\n      Converts columns of a CSV file into vectors of a VectorPostprocessor.\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: csv_file\n      required: Yes\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        The name of the CSV file to read. Currently, with the exception of the header row, only numeric values are supported.\n    - name: delimiter\n      required: No\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The column delimiter. Despite the name this can read files separated by delimiter other than a comma. If this options is omitted it will read comma or space separated files.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str initial\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: header\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        When true it is assumed that the first row contains column headers, these headers are used as the VectorPostprocessor vector names. If false the file is assumed to contain only numbers and the vectors are named automatically based on the column number (e.g., \'column_0000\', \'column_0001\'). If not supplied the reader attempts to auto detect the headers.\n    - name: ignore_empty_lines\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When true new empty lines in the file are ignored.\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str CSVReader\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /VectorPostprocessors/ConstantVectorPostprocessor\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str ConstantVectorPostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The vector value this object will have.\n    subblocks:\n  - name: /VectorPostprocessors/CrackDataSampler\n    description: |\n      Outputs the values of a set of domain integral postprocessors as a vector, along with their positions along the crack front.\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: crack_front_definition\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The CrackFrontDefinition user object name\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: position_type\n      required: No\n      default: !!str Distance\n      cpp_type: MooseEnum\n      group_name: \n      options: Angle Distance\n      description: |\n        The method used to calculate position along crack front.  Options are: Angle Distance\n    - name: postprocessors\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<PostprocessorName, std::allocator<PostprocessorName> >\n      group_name: \n      description: |\n        The postprocessors whose values are to be reported\n    - name: sort_by\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z id\n      description: |\n        What to sort the samples by\n    - name: type\n      required: No\n      default: !!str CrackDataSampler\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /VectorPostprocessors/Eigenvalues\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str Eigenvalues\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /VectorPostprocessors/ElementVariablesDifferenceMax\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: compare_a\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The first variable to evaluate the difference with, performed as "compare_a - compare_b"\n    - name: compare_b\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The second variable to evaluate the difference with, performed as "compare_a - compare_b"\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: furthest_from_zero\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Find the difference with the highest absolute value\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementVariablesDifferenceMax\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /VectorPostprocessors/ElementsAlongLine\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: end\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        The end of the line\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: start\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        The beginning of the line\n    - name: type\n      required: No\n      default: !!str ElementsAlongLine\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /VectorPostprocessors/ElementsAlongPlane\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: normal\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        Normal vector to the plane\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: point\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        Point in the plane\n    - name: type\n      required: No\n      default: !!str ElementsAlongPlane\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /VectorPostprocessors/EulerAngleUpdaterCheck\n    description: |\n      Provide updated euler angles after rigid body rotation of the grains.\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: euler_angle_updater\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Name of Euler angle provider user object\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: grain_torques_object\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Name of Euler angle provider user object\n    - name: grain_tracker_object\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The FeatureFloodCount UserObject to get values from.\n    - name: grain_volumes\n      required: Yes\n      default: !!str \n      cpp_type: VectorPostprocessorName\n      group_name: \n      description: |\n        The feature volume VectorPostprocessorValue.\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: rotation_constant\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        constant value characterizing grain rotation\n    - name: type\n      required: No\n      default: !!str EulerAngleUpdaterCheck\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /VectorPostprocessors/FeatureVolumeVectorPostprocessor\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: flood_counter\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The FeatureFloodCount UserObject to get values from.\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: single_feature_per_element\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set this Boolean if you wish to use an element based volume where the dominant order parameter determines the feature that accumulates the entire element volume\n    - name: type\n      required: No\n      default: !!str FeatureVolumeVectorPostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /VectorPostprocessors/GrainForcesPostprocessor\n    description: |\n      Outputs the values from GrainForcesPostprocessor\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: grain_force\n      required: No\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        Specify userobject that gives center of mass and volume of grains\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: type\n      required: No\n      default: !!str GrainForcesPostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /VectorPostprocessors/GrainTextureVectorPostprocessor\n    description: |\n      Gives out info on the grain boundary properties\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: euler_angle_provider\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The EulerAngleProvider User object\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: grain_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        the number of grains\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: sort_by\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z id\n      description: |\n        What to sort the samples by\n    - name: type\n      required: No\n      default: !!str GrainTextureVectorPostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: unique_grains\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The grain number\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /VectorPostprocessors/IntersectionPointsAlongLine\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: end\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        The end of the line\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: start\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        The beginning of the line\n    - name: type\n      required: No\n      default: !!str IntersectionPointsAlongLine\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /VectorPostprocessors/LeastSquaresFit\n    description: |\n      Performs a polynomial least squares fit on the data contained in another VectorPostprocessor\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: num_samples\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of samples to be output\n    - name: order\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The order of the polynomial fit\n    - name: output\n      required: No\n      default: !!str Coefficients\n      cpp_type: MooseEnum\n      group_name: \n      options: Coefficients Samples\n      description: |\n        The quantity to output.  Options are: Coefficients Samples\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: sample_x_max\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The maximum x value of the of samples to be output\n    - name: sample_x_min\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The minimum x value of the of samples to be output\n    - name: type\n      required: No\n      default: !!str LeastSquaresFit\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: vectorpostprocessor\n      required: Yes\n      default: !!str \n      cpp_type: VectorPostprocessorName\n      group_name: \n      description: |\n        The vectorpostprocessor on whose values we perform a least squares fit\n    - name: x_name\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The name of the independent variable\n    - name: x_scale\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Value used to scale x values (scaling is done after shifting)\n    - name: x_shift\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Value used to shift x values (shifting is done before scaling)\n    - name: y_name\n      required: Yes\n      default: !!str \n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        The name of the dependent variable\n    - name: y_scale\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Value used to scale y values (scaling is done after shifting)\n    - name: y_shift\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Value used to shift y values (shifting is done before scaling)\n    subblocks:\n  - name: /VectorPostprocessors/LineFunctionSampler\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: end_point\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        The ending of the line\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: functions\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        The Functions to sample along the line\n    - name: num_points\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of points to sample along the line\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: sort_by\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z id\n      description: |\n        What to sort the samples by\n    - name: start_point\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        The beginning of the line\n    - name: type\n      required: No\n      default: !!str LineFunctionSampler\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /VectorPostprocessors/LineMaterialRankTwoSampler\n    description: |\n      Access a component of a RankTwoTensor\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: end\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        The end of the line\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: index_i\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index i of ij for the tensor to output (0, 1, 2)\n    - name: index_j\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index j of ij for the tensor to output (0, 1, 2)\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Name of the material property to be output along a line\n    - name: sort_by\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z id\n      description: |\n        What to sort the samples by\n    - name: start\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        The beginning of the line\n    - name: type\n      required: No\n      default: !!str LineMaterialRankTwoSampler\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /VectorPostprocessors/LineMaterialRankTwoScalarSampler\n    description: |\n      Compute a scalar property of a RankTwoTensor\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: direction\n      required: No\n      default: !!str 0 0 1\n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        Direction vector\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: end\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        The end of the line\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: point1\n      required: No\n      default: !!str 0 0 0\n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        Start point for axis used to calculate some cylinderical material tensor quantities\n    - name: point2\n      required: No\n      default: !!str 0 1 0\n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        End point for axis used to calculate some material tensor quantities\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Name of the material property to be output along a line\n    - name: scalar_type\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: VonMisesStress EffectiveStrain Hydrostatic L2norm MaxPrincipal MidPrincipal MinPrincipal VolumetricStrain FirstInvariant SecondInvariant ThirdInvariant AxialStress HoopStress RadialStress TriaxialityStress Direction\n      description: |\n        A scalar to ouput\n    - name: sort_by\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z id\n      description: |\n        What to sort the samples by\n    - name: start\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        The beginning of the line\n    - name: type\n      required: No\n      default: !!str LineMaterialRankTwoScalarSampler\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /VectorPostprocessors/LineMaterialRealSampler\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: end\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        The end of the line\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \n      description: |\n        Name of the material property to be output along a line\n    - name: sort_by\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z id\n      description: |\n        What to sort the samples by\n    - name: start\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        The beginning of the line\n    - name: type\n      required: No\n      default: !!str LineMaterialRealSampler\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /VectorPostprocessors/LineValueSampler\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: end_point\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        The ending of the line\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: num_points\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of points to sample along the line\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: sort_by\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z id\n      description: |\n        What to sort the samples by\n    - name: start_point\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        The beginning of the line\n    - name: type\n      required: No\n      default: !!str LineValueSampler\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The names of the variables that this VectorPostprocessor operates on\n    subblocks:\n  - name: /VectorPostprocessors/MaterialVectorPostprocessor\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: elem_ids\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        Element IDs to print data for (others are ignored).\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: material\n      required: Yes\n      default: !!str \n      cpp_type: MaterialName\n      group_name: \n      description: |\n        Material for which all properties will be recorded.\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialVectorPostprocessor\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /VectorPostprocessors/NodalValueSampler\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: sort_by\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z id\n      description: |\n        What to sort the samples by\n    - name: type\n      required: No\n      default: !!str NodalValueSampler\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: unique_node_execute\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The names of the variables that this VectorPostprocessor operates on\n    subblocks:\n  - name: /VectorPostprocessors/PointValueSampler\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: points\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<libMesh::Point, std::allocator<libMesh::Point> >\n      group_name: \n      description: |\n        The points where you want to evaluate the variables\n    - name: sort_by\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z id\n      description: |\n        What to sort the samples by\n    - name: type\n      required: No\n      default: !!str PointValueSampler\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The names of the variables that this VectorPostprocessor operates on\n    subblocks:\n  - name: /VectorPostprocessors/SideValueSampler\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: sort_by\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z id\n      description: |\n        What to sort the samples by\n    - name: type\n      required: No\n      default: !!str SideValueSampler\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The names of the variables that this VectorPostprocessor operates on\n    subblocks:\n  - name: /VectorPostprocessors/SphericalAverage\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: bin_number\n      required: No\n      default: !!str 50\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of histogram bins\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: empty_bin_value\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Value to assign to bins into which no datapoints fall\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: radius\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Radius to average out to\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SphericalAverage\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variables to average radially\n    subblocks:\n  - name: /VectorPostprocessors/VectorOfPostprocessors\n    description: |\n      Outputs the values of an arbitrary user-specified set of postprocessors as a vector in the order specified by the user\n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: postprocessors\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<PostprocessorName, std::allocator<PostprocessorName> >\n      group_name: \n      description: |\n        The postprocessors whose values are to be reported\n    - name: type\n      required: No\n      default: !!str VectorOfPostprocessors\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /VectorPostprocessors/VolumeHistogram\n    description: |\n      \n    parameters:\n    - name: allow_duplicate_execution_on_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        In the case where this UserObject is depended upon by an initial condition, allow it to be executed twice during the initial setup (once before the IC and again after mesh adaptivity (if applicable).\n    - name: bin_number\n      required: No\n      default: !!str 50\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of histogram bins\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: control_tags\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >\n      group_name: \'Advanced\'\n      description: |\n        Adds user-defined labels for accessing object parameters via control logic.\n    - name: enable\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Set the enabled status of the MooseObject.\n    - name: execute_on\n      required: No\n      default: !!str timestep_end\n      cpp_type: MultiMooseEnum\n      group_name: \n      options: none initial linear nonlinear timestep_end timestep_begin custom\n      description: |\n        Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Determines whether this object is calculated using an implicit or explicit form\n    - name: max_value\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Maximum variable value\n    - name: min_value\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Minimum variable value\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: \'Advanced\'\n      description: |\n        Vector of output names were you would like to restrict the output of variables(s) associated with this object\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \'Advanced\'\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str VolumeHistogram\n      cpp_type: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \'Advanced\'\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Variable to bin the volume of\n    subblocks:\n'
p0
.